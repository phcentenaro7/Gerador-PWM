--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=13 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_8ua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[12..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[12..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3400w[1..0]	: WIRE;
	w_anode3409w[3..0]	: WIRE;
	w_anode3426w[3..0]	: WIRE;
	w_anode3436w[3..0]	: WIRE;
	w_anode3446w[3..0]	: WIRE;
	w_anode3456w[3..0]	: WIRE;
	w_anode3466w[3..0]	: WIRE;
	w_anode3476w[3..0]	: WIRE;
	w_anode3486w[3..0]	: WIRE;
	w_anode3498w[1..0]	: WIRE;
	w_anode3505w[3..0]	: WIRE;
	w_anode3516w[3..0]	: WIRE;
	w_anode3526w[3..0]	: WIRE;
	w_anode3536w[3..0]	: WIRE;
	w_anode3546w[3..0]	: WIRE;
	w_anode3556w[3..0]	: WIRE;
	w_anode3566w[3..0]	: WIRE;
	w_anode3576w[3..0]	: WIRE;
	w_data3398w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[12..0] = eq_wire[12..0];
	eq_wire[] = ( ( w_anode3576w[3..3], w_anode3566w[3..3], w_anode3556w[3..3], w_anode3546w[3..3], w_anode3536w[3..3], w_anode3526w[3..3], w_anode3516w[3..3], w_anode3505w[3..3]), ( w_anode3486w[3..3], w_anode3476w[3..3], w_anode3466w[3..3], w_anode3456w[3..3], w_anode3446w[3..3], w_anode3436w[3..3], w_anode3426w[3..3], w_anode3409w[3..3]));
	w_anode3400w[] = ( (w_anode3400w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3409w[] = ( (w_anode3409w[2..2] & (! w_data3398w[2..2])), (w_anode3409w[1..1] & (! w_data3398w[1..1])), (w_anode3409w[0..0] & (! w_data3398w[0..0])), w_anode3400w[1..1]);
	w_anode3426w[] = ( (w_anode3426w[2..2] & (! w_data3398w[2..2])), (w_anode3426w[1..1] & (! w_data3398w[1..1])), (w_anode3426w[0..0] & w_data3398w[0..0]), w_anode3400w[1..1]);
	w_anode3436w[] = ( (w_anode3436w[2..2] & (! w_data3398w[2..2])), (w_anode3436w[1..1] & w_data3398w[1..1]), (w_anode3436w[0..0] & (! w_data3398w[0..0])), w_anode3400w[1..1]);
	w_anode3446w[] = ( (w_anode3446w[2..2] & (! w_data3398w[2..2])), (w_anode3446w[1..1] & w_data3398w[1..1]), (w_anode3446w[0..0] & w_data3398w[0..0]), w_anode3400w[1..1]);
	w_anode3456w[] = ( (w_anode3456w[2..2] & w_data3398w[2..2]), (w_anode3456w[1..1] & (! w_data3398w[1..1])), (w_anode3456w[0..0] & (! w_data3398w[0..0])), w_anode3400w[1..1]);
	w_anode3466w[] = ( (w_anode3466w[2..2] & w_data3398w[2..2]), (w_anode3466w[1..1] & (! w_data3398w[1..1])), (w_anode3466w[0..0] & w_data3398w[0..0]), w_anode3400w[1..1]);
	w_anode3476w[] = ( (w_anode3476w[2..2] & w_data3398w[2..2]), (w_anode3476w[1..1] & w_data3398w[1..1]), (w_anode3476w[0..0] & (! w_data3398w[0..0])), w_anode3400w[1..1]);
	w_anode3486w[] = ( (w_anode3486w[2..2] & w_data3398w[2..2]), (w_anode3486w[1..1] & w_data3398w[1..1]), (w_anode3486w[0..0] & w_data3398w[0..0]), w_anode3400w[1..1]);
	w_anode3498w[] = ( (w_anode3498w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3505w[] = ( (w_anode3505w[2..2] & (! w_data3398w[2..2])), (w_anode3505w[1..1] & (! w_data3398w[1..1])), (w_anode3505w[0..0] & (! w_data3398w[0..0])), w_anode3498w[1..1]);
	w_anode3516w[] = ( (w_anode3516w[2..2] & (! w_data3398w[2..2])), (w_anode3516w[1..1] & (! w_data3398w[1..1])), (w_anode3516w[0..0] & w_data3398w[0..0]), w_anode3498w[1..1]);
	w_anode3526w[] = ( (w_anode3526w[2..2] & (! w_data3398w[2..2])), (w_anode3526w[1..1] & w_data3398w[1..1]), (w_anode3526w[0..0] & (! w_data3398w[0..0])), w_anode3498w[1..1]);
	w_anode3536w[] = ( (w_anode3536w[2..2] & (! w_data3398w[2..2])), (w_anode3536w[1..1] & w_data3398w[1..1]), (w_anode3536w[0..0] & w_data3398w[0..0]), w_anode3498w[1..1]);
	w_anode3546w[] = ( (w_anode3546w[2..2] & w_data3398w[2..2]), (w_anode3546w[1..1] & (! w_data3398w[1..1])), (w_anode3546w[0..0] & (! w_data3398w[0..0])), w_anode3498w[1..1]);
	w_anode3556w[] = ( (w_anode3556w[2..2] & w_data3398w[2..2]), (w_anode3556w[1..1] & (! w_data3398w[1..1])), (w_anode3556w[0..0] & w_data3398w[0..0]), w_anode3498w[1..1]);
	w_anode3566w[] = ( (w_anode3566w[2..2] & w_data3398w[2..2]), (w_anode3566w[1..1] & w_data3398w[1..1]), (w_anode3566w[0..0] & (! w_data3398w[0..0])), w_anode3498w[1..1]);
	w_anode3576w[] = ( (w_anode3576w[2..2] & w_data3398w[2..2]), (w_anode3576w[1..1] & w_data3398w[1..1]), (w_anode3576w[0..0] & w_data3398w[0..0]), w_anode3498w[1..1]);
	w_data3398w[2..0] = data_wire[2..0];
END;
--VALID FILE
