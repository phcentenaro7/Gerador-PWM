
gerador_pwm.elf:     file format elf32-littlenios2
gerador_pwm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080224

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000057f8 memsz 0x000057f8 flags r-x
    LOAD off    0x00006818 vaddr 0x00085818 paddr 0x00087284 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008cf0 vaddr 0x00088cf0 paddr 0x00088cf0 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000055b0  00080224  00080224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  000857d4  000857d4  000067d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00085818  00087284  00006818  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00088cf0  00088cf0  00008cf0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00088e44  00088e44  00008284  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008284  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a40  00000000  00000000  000082b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00017ef3  00000000  00000000  00008cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006aac  00000000  00000000  00020beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000099f1  00000000  00000000  00027697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000015ac  00000000  00000000  00031088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002900  00000000  00000000  00032634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005fc0  00000000  00000000  00034f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003aef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a8  00000000  00000000  0003af08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0003dd70  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003dd73  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003dd78  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003dd79  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003dd7a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003dd7e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003dd82  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003dd86  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003dd8f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003dd98  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000010  00000000  00000000  0003dda1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0003ddb1  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fe0  00000000  00000000  0003ddec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080224 l    d  .text	00000000 .text
000857d4 l    d  .rodata	00000000 .rodata
00085818 l    d  .rwdata	00000000 .rwdata
00088cf0 l    d  .bss	00000000 .bss
00088e44 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/Administrador/Documents/Sistemas_Digitais_II/nios2/software/gerador_pwm_bsp//obj/HAL/src/crt0.o
0008025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00080408 l     F .text	00000008 __fp_lock
0008041c l     F .text	00000008 __fp_unlock
00080424 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00085818 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
000822a4 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0008310c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00083224 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00083250 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00083348 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00083434 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00083520 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00083700 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00087274 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008396c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00083aac l     F .text	00000034 alt_dev_reg
000861ec l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083da4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00083fb0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000845f4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00084848 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00084cac l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00084dfc l     F .text	0000003c alt_get_errno
00084e38 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00088d18 g     O .bss	00000004 alt_instruction_exception_handler
00082ed8 g     F .text	00000058 _isatty_r
0008363c g     F .text	0000007c alt_main
00080294 g     F .text	000000cc _puts_r
00088d44 g     O .bss	00000100 alt_irq
00082b68 g     F .text	00000064 _lseek_r
00087284 g       *ABS*	00000000 __flash_rwdata_start
00088e44 g       *ABS*	00000000 __alt_heap_start
00082020 g     F .text	0000005c __sseek
0008076c g     F .text	00000010 __sinit
0008058c g     F .text	00000078 __sfmoreglue
000836dc g     F .text	00000024 __malloc_unlock
0008176c g     F .text	0000012c memmove
00080758 g     F .text	00000014 _cleanup
00085220 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082e78 g     F .text	00000060 _fstat_r
00088cfc g     O .bss	00000004 errno
00081f98 g     F .text	00000008 __seofread
00088d04 g     O .bss	00000004 alt_argv
0008f24c g       *ABS*	00000000 _gp
0008606c g     O .rwdata	00000180 alt_fd_list
00085244 g     F .text	00000090 alt_find_dev
0008166c g     F .text	00000100 memcpy
00080410 g     F .text	0000000c _cleanup_r
00084d80 g     F .text	0000007c alt_io_redirect
000857d4 g       *ABS*	00000000 __DTOR_END__
00080360 g     F .text	00000010 puts
00085494 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000841ac g     F .text	00000220 altera_avalon_jtag_uart_read
00083024 g     F .text	00000064 .hidden __udivsi3
00083384 g     F .text	000000b0 isatty
00088cf8 g     O .bss	00000004 __malloc_top_pad
000807b4 g     F .text	000004c8 __sfvwrite_r
00081eec g     F .text	00000058 _sbrk_r
00082e14 g     F .text	00000064 _read_r
0008726c g     O .rwdata	00000004 alt_max_fd
00082364 g     F .text	00000070 _fclose_r
000826cc g     F .text	00000084 fflush
00088cf4 g     O .bss	00000004 __malloc_max_sbrked_mem
0008355c g     F .text	000000e0 lseek
0008724c g     O .rwdata	00000004 _global_impure_ptr
00081988 g     F .text	00000564 _realloc_r
00088e44 g       *ABS*	00000000 __bss_end
00084bc4 g     F .text	000000e8 alt_iic_isr_register
00085118 g     F .text	00000108 alt_tick
0008078c g     F .text	00000014 __fp_lock_all
00084b78 g     F .text	0000004c alt_ic_irq_enabled
00085074 g     F .text	000000a4 alt_alarm_stop
00088d0c g     O .bss	00000004 alt_irq_active
00080000 g       *ABS*	00000000 __alt_mem_onchip_mem
000800fc g     F .exceptions	000000c8 alt_irq_handler
00086044 g     O .rwdata	00000028 alt_dev_null
00084828 g     F .text	00000020 alt_dcache_flush_all
00087284 g       *ABS*	00000000 __ram_rwdata_end
00087264 g     O .rwdata	00000008 alt_dev_list
000839a8 g     F .text	00000104 write
00085818 g       *ABS*	00000000 __ram_rodata_end
0008328c g     F .text	000000bc fstat
00083088 g     F .text	0000005c .hidden __umodsi3
00088e44 g       *ABS*	00000000 end
00083ce4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801c4 g     F .exceptions	00000060 alt_instruction_exception_entry
000857d4 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
00084670 g     F .text	00000084 alt_avalon_timer_sc_init
000843cc g     F .text	00000228 altera_avalon_jtag_uart_write
0008077c g     F .text	00000004 __sfp_lock_acquire
0008159c g     F .text	000000d0 memchr
0008286c g     F .text	000002fc _free_r
0008567c g     F .text	00000120 __call_exitprocs
00087254 g     O .rwdata	00000004 __malloc_sbrk_base
00080224 g     F .text	0000003c _start
00088d10 g     O .bss	00000004 _alt_tick_rate
00088d14 g     O .bss	00000004 _alt_nticks
0008373c g     F .text	00000108 read
00083b1c g     F .text	00000064 alt_sys_init
000855ec g     F .text	00000090 __register_exitproc
00084050 g     F .text	00000068 altera_avalon_jtag_uart_close
000830e4 g     F .text	00000028 .hidden __mulsi3
00085818 g       *ABS*	00000000 __ram_rwdata_start
000857d4 g       *ABS*	00000000 __ram_rodata_start
00088d1c g     O .bss	00000028 __malloc_current_mallinfo
00083b80 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000853dc g     F .text	000000b8 alt_get_fd
0008224c g     F .text	00000058 _close_r
00085574 g     F .text	00000078 memcmp
00083c40 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00088e44 g       *ABS*	00000000 __alt_stack_base
00083c90 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000820e8 g     F .text	00000164 __swsetup_r
00080604 g     F .text	00000154 __sfp
00085c3c g     O .rwdata	00000408 __malloc_av_
00080788 g     F .text	00000004 __sinit_lock_release
00081f44 g     F .text	00000054 __sread
000852d4 g     F .text	00000108 alt_find_file
00084884 g     F .text	000000a8 alt_dev_llist_insert
000836b8 g     F .text	00000024 __malloc_lock
000838b4 g     F .text	000000b8 sbrk
0008266c g     F .text	00000060 _fflush_r
00088cf0 g       *ABS*	00000000 __bss_start
00081898 g     F .text	000000f0 memset
00080260 g     F .text	00000034 main
00088d08 g     O .bss	00000004 alt_envp
00088cf0 g     O .bss	00000004 __malloc_max_total_mem
00083be0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008207c g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
000823d4 g     F .text	00000070 fclose
00080dbc g     F .text	000007e0 _malloc_r
00087270 g     O .rwdata	00000004 alt_errno
00080c7c g     F .text	00000098 _fwalk
00082f30 g     F .text	00000080 .hidden __divsi3
00082750 g     F .text	0000011c _malloc_trim_r
000857d4 g       *ABS*	00000000 __CTOR_END__
000857d4 g       *ABS*	00000000 __flash_rodata_start
000857d4 g       *ABS*	00000000 __DTOR_LIST__
00083ae0 g     F .text	0000003c alt_irq_init
00083844 g     F .text	00000070 alt_release_fd
0008552c g     F .text	00000014 atexit
00082084 g     F .text	00000064 _write_r
00087250 g     O .rwdata	00000004 _impure_ptr
00088d00 g     O .bss	00000004 alt_argc
00082444 g     F .text	00000228 __sflush_r
00084990 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000807a0 g     F .text	00000014 __fp_unlock_all
0008725c g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00082d7c g     F .text	00000098 __swhatbuf_r
00084a14 g     F .text	00000050 alt_ic_isr_register
00087284 g       *ABS*	00000000 _edata
00088e44 g       *ABS*	00000000 _end
00080224 g       *ABS*	00000000 __ram_exceptions_end
000840b8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00084aec g     F .text	0000008c alt_ic_irq_disable
00081fa0 g     F .text	00000080 __swrite
00087258 g     O .rwdata	00000004 __malloc_trim_threshold
00085540 g     F .text	00000034 exit
00080d14 g     F .text	000000a8 _fwalk_reent
00082fb0 g     F .text	00000074 .hidden __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00080780 g     F .text	00000004 __sfp_lock_release
0008579c g     F .text	00000038 _exit
000846f4 g     F .text	00000134 alt_alarm_start
00082bcc g     F .text	000001b0 __smakebuf_r
00080370 g     F .text	00000098 strlen
00084f14 g     F .text	00000160 open
000849f4 g     F .text	00000020 alt_icache_flush_all
00087278 g     O .rwdata	00000004 alt_priority_mask
00084a64 g     F .text	00000088 alt_ic_irq_enable
0008727c g     O .rwdata	00000008 alt_alarm_list
0008492c g     F .text	00000064 _do_ctors
00083148 g     F .text	000000dc close
0008349c g     F .text	00000084 alt_load
00080784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408914 	ori	at,at,548
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801c40 	call	801c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0ffff17 	ldw	r3,-4(fp)
   80130:	e0bffe17 	ldw	r2,-8(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001126 	beq	r2,zero,80180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	e0bffd17 	ldw	r2,-12(fp)
   80140:	100690fa 	slli	r3,r2,3
   80144:	00800274 	movhi	r2,9
   80148:	1885883a 	add	r2,r3,r2
   8014c:	10e35117 	ldw	r3,-29372(r2)
   80150:	e0bffd17 	ldw	r2,-12(fp)
   80154:	100890fa 	slli	r4,r2,3
   80158:	00800274 	movhi	r2,9
   8015c:	2085883a 	add	r2,r4,r2
   80160:	10a35217 	ldw	r2,-29368(r2)
   80164:	1009883a 	mov	r4,r2
   80168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   8016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   80170:	0005313a 	rdctl	r2,ipending
   80174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   80178:	e0bffb17 	ldw	r2,-20(fp)
   8017c:	00000706 	br	8019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   80180:	e0bffe17 	ldw	r2,-8(fp)
   80184:	1085883a 	add	r2,r2,r2
   80188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   8018c:	e0bffd17 	ldw	r2,-12(fp)
   80190:	10800044 	addi	r2,r2,1
   80194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   80198:	003fe406 	br	8012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   8019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   801a0:	e0bfff17 	ldw	r2,-4(fp)
   801a4:	103fde1e 	bne	r2,zero,80120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801a8:	0001883a 	nop
}
   801ac:	0001883a 	nop
   801b0:	e037883a 	mov	sp,fp
   801b4:	dfc00117 	ldw	ra,4(sp)
   801b8:	df000017 	ldw	fp,0(sp)
   801bc:	dec00204 	addi	sp,sp,8
   801c0:	f800283a 	ret

000801c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801c4:	defffb04 	addi	sp,sp,-20
   801c8:	dfc00415 	stw	ra,16(sp)
   801cc:	df000315 	stw	fp,12(sp)
   801d0:	df000304 	addi	fp,sp,12
   801d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801d8:	00bfffc4 	movi	r2,-1
   801dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   801e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801e4:	d0a6b317 	ldw	r2,-25908(gp)
   801e8:	10000726 	beq	r2,zero,80208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801ec:	d0a6b317 	ldw	r2,-25908(gp)
   801f0:	e0ffff17 	ldw	r3,-4(fp)
   801f4:	e1bffe17 	ldw	r6,-8(fp)
   801f8:	e17ffd17 	ldw	r5,-12(fp)
   801fc:	1809883a 	mov	r4,r3
   80200:	103ee83a 	callr	r2
   80204:	00000206 	br	80210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8020c:	0005883a 	mov	r2,zero
}
   80210:	e037883a 	mov	sp,fp
   80214:	dfc00117 	ldw	ra,4(sp)
   80218:	df000017 	ldw	fp,0(sp)
   8021c:	dec00204 	addi	sp,sp,8
   80220:	f800283a 	ret

Disassembly of section .text:

00080224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80224:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   80228:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   8022c:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80230:	d6bc9314 	ori	gp,gp,62028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80234:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80238:	10a33c14 	ori	r2,r2,36080

    movhi r3, %hi(__bss_end)
   8023c:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80240:	18e39114 	ori	r3,r3,36420

    beq r2, r3, 1f
   80244:	10c00326 	beq	r2,r3,80254 <_start+0x30>

0:
    stw zero, (r2)
   80248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80250:	10fffd36 	bltu	r2,r3,80248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80254:	008349c0 	call	8349c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80258:	008363c0 	call	8363c <alt_main>

0008025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8025c:	003fff06 	br	8025c <alt_after_alt_main>

00080260 <main>:
 */

#include <stdio.h>

int main()
{
   80260:	defffe04 	addi	sp,sp,-8
   80264:	dfc00115 	stw	ra,4(sp)
   80268:	df000015 	stw	fp,0(sp)
   8026c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   80270:	01000234 	movhi	r4,8
   80274:	2115f504 	addi	r4,r4,22484
   80278:	00803600 	call	80360 <puts>

  return 0;
   8027c:	0005883a 	mov	r2,zero
}
   80280:	e037883a 	mov	sp,fp
   80284:	dfc00117 	ldw	ra,4(sp)
   80288:	df000017 	ldw	fp,0(sp)
   8028c:	dec00204 	addi	sp,sp,8
   80290:	f800283a 	ret

00080294 <_puts_r>:
   80294:	defff504 	addi	sp,sp,-44
   80298:	dc000815 	stw	r16,32(sp)
   8029c:	2021883a 	mov	r16,r4
   802a0:	2809883a 	mov	r4,r5
   802a4:	dc400915 	stw	r17,36(sp)
   802a8:	dfc00a15 	stw	ra,40(sp)
   802ac:	2823883a 	mov	r17,r5
   802b0:	00803700 	call	80370 <strlen>
   802b4:	11000044 	addi	r4,r2,1
   802b8:	d8800515 	stw	r2,20(sp)
   802bc:	00800044 	movi	r2,1
   802c0:	00c00234 	movhi	r3,8
   802c4:	d8800715 	stw	r2,28(sp)
   802c8:	d8800404 	addi	r2,sp,16
   802cc:	18d5fa04 	addi	r3,r3,22504
   802d0:	d8800115 	stw	r2,4(sp)
   802d4:	00800084 	movi	r2,2
   802d8:	dc400415 	stw	r17,16(sp)
   802dc:	d8c00615 	stw	r3,24(sp)
   802e0:	d9000315 	stw	r4,12(sp)
   802e4:	d8800215 	stw	r2,8(sp)
   802e8:	81400217 	ldw	r5,8(r16)
   802ec:	80000226 	beq	r16,zero,802f8 <_puts_r+0x64>
   802f0:	80800e17 	ldw	r2,56(r16)
   802f4:	10001326 	beq	r2,zero,80344 <_puts_r+0xb0>
   802f8:	2880030b 	ldhu	r2,12(r5)
   802fc:	10c8000c 	andi	r3,r2,8192
   80300:	1800061e 	bne	r3,zero,8031c <_puts_r+0x88>
   80304:	28c01917 	ldw	r3,100(r5)
   80308:	0137ffc4 	movi	r4,-8193
   8030c:	10880014 	ori	r2,r2,8192
   80310:	1906703a 	and	r3,r3,r4
   80314:	2880030d 	sth	r2,12(r5)
   80318:	28c01915 	stw	r3,100(r5)
   8031c:	d9800104 	addi	r6,sp,4
   80320:	8009883a 	mov	r4,r16
   80324:	00807b40 	call	807b4 <__sfvwrite_r>
   80328:	10000b1e 	bne	r2,zero,80358 <_puts_r+0xc4>
   8032c:	00800284 	movi	r2,10
   80330:	dfc00a17 	ldw	ra,40(sp)
   80334:	dc400917 	ldw	r17,36(sp)
   80338:	dc000817 	ldw	r16,32(sp)
   8033c:	dec00b04 	addi	sp,sp,44
   80340:	f800283a 	ret
   80344:	8009883a 	mov	r4,r16
   80348:	d9400015 	stw	r5,0(sp)
   8034c:	008076c0 	call	8076c <__sinit>
   80350:	d9400017 	ldw	r5,0(sp)
   80354:	003fe806 	br	802f8 <_puts_r+0x64>
   80358:	00bfffc4 	movi	r2,-1
   8035c:	003ff406 	br	80330 <_puts_r+0x9c>

00080360 <puts>:
   80360:	00800234 	movhi	r2,8
   80364:	200b883a 	mov	r5,r4
   80368:	111c9417 	ldw	r4,29264(r2)
   8036c:	00802941 	jmpi	80294 <_puts_r>

00080370 <strlen>:
   80370:	208000cc 	andi	r2,r4,3
   80374:	10000926 	beq	r2,zero,8039c <strlen+0x2c>
   80378:	2005883a 	mov	r2,r4
   8037c:	00000306 	br	8038c <strlen+0x1c>
   80380:	10800044 	addi	r2,r2,1
   80384:	10c000cc 	andi	r3,r2,3
   80388:	18000526 	beq	r3,zero,803a0 <strlen+0x30>
   8038c:	10c00007 	ldb	r3,0(r2)
   80390:	183ffb1e 	bne	r3,zero,80380 <strlen+0x10>
   80394:	1105c83a 	sub	r2,r2,r4
   80398:	f800283a 	ret
   8039c:	2005883a 	mov	r2,r4
   803a0:	11400017 	ldw	r5,0(r2)
   803a4:	01ffbff4 	movhi	r7,65279
   803a8:	39ffbfc4 	addi	r7,r7,-257
   803ac:	29c7883a 	add	r3,r5,r7
   803b0:	01a02074 	movhi	r6,32897
   803b4:	014a303a 	nor	r5,zero,r5
   803b8:	1946703a 	and	r3,r3,r5
   803bc:	31a02004 	addi	r6,r6,-32640
   803c0:	1986703a 	and	r3,r3,r6
   803c4:	1800071e 	bne	r3,zero,803e4 <strlen+0x74>
   803c8:	11400117 	ldw	r5,4(r2)
   803cc:	10800104 	addi	r2,r2,4
   803d0:	29c7883a 	add	r3,r5,r7
   803d4:	014a303a 	nor	r5,zero,r5
   803d8:	1946703a 	and	r3,r3,r5
   803dc:	1986703a 	and	r3,r3,r6
   803e0:	183ff926 	beq	r3,zero,803c8 <strlen+0x58>
   803e4:	10c00007 	ldb	r3,0(r2)
   803e8:	183fea26 	beq	r3,zero,80394 <strlen+0x24>
   803ec:	10c00047 	ldb	r3,1(r2)
   803f0:	10800044 	addi	r2,r2,1
   803f4:	183fe726 	beq	r3,zero,80394 <strlen+0x24>
   803f8:	10c00047 	ldb	r3,1(r2)
   803fc:	10800044 	addi	r2,r2,1
   80400:	183ffa1e 	bne	r3,zero,803ec <strlen+0x7c>
   80404:	003fe306 	br	80394 <strlen+0x24>

00080408 <__fp_lock>:
   80408:	0005883a 	mov	r2,zero
   8040c:	f800283a 	ret

00080410 <_cleanup_r>:
   80410:	01400234 	movhi	r5,8
   80414:	2948d904 	addi	r5,r5,9060
   80418:	0080d141 	jmpi	80d14 <_fwalk_reent>

0008041c <__fp_unlock>:
   8041c:	0005883a 	mov	r2,zero
   80420:	f800283a 	ret

00080424 <__sinit.part.0>:
   80424:	00c00234 	movhi	r3,8
   80428:	20800117 	ldw	r2,4(r4)
   8042c:	18c10404 	addi	r3,r3,1040
   80430:	20c00f15 	stw	r3,60(r4)
   80434:	2140bb04 	addi	r5,r4,748
   80438:	00c000c4 	movi	r3,3
   8043c:	20c0b915 	stw	r3,740(r4)
   80440:	2140ba15 	stw	r5,744(r4)
   80444:	2000b815 	stw	zero,736(r4)
   80448:	10001705 	stb	zero,92(r2)
   8044c:	10001745 	stb	zero,93(r2)
   80450:	10001785 	stb	zero,94(r2)
   80454:	100017c5 	stb	zero,95(r2)
   80458:	10001805 	stb	zero,96(r2)
   8045c:	10001845 	stb	zero,97(r2)
   80460:	10001885 	stb	zero,98(r2)
   80464:	100018c5 	stb	zero,99(r2)
   80468:	00c00104 	movi	r3,4
   8046c:	10c00315 	stw	r3,12(r2)
   80470:	02000234 	movhi	r8,8
   80474:	20c00217 	ldw	r3,8(r4)
   80478:	01c00234 	movhi	r7,8
   8047c:	01800234 	movhi	r6,8
   80480:	01400234 	movhi	r5,8
   80484:	4207d104 	addi	r8,r8,8004
   80488:	39c7e804 	addi	r7,r7,8096
   8048c:	31880804 	addi	r6,r6,8224
   80490:	29481f04 	addi	r5,r5,8316
   80494:	02400074 	movhi	r9,1
   80498:	10001915 	stw	zero,100(r2)
   8049c:	10000015 	stw	zero,0(r2)
   804a0:	10000115 	stw	zero,4(r2)
   804a4:	10000215 	stw	zero,8(r2)
   804a8:	10000415 	stw	zero,16(r2)
   804ac:	10000515 	stw	zero,20(r2)
   804b0:	10000615 	stw	zero,24(r2)
   804b4:	10800715 	stw	r2,28(r2)
   804b8:	12000815 	stw	r8,32(r2)
   804bc:	11c00915 	stw	r7,36(r2)
   804c0:	11800a15 	stw	r6,40(r2)
   804c4:	11400b15 	stw	r5,44(r2)
   804c8:	4a400284 	addi	r9,r9,10
   804cc:	1a400315 	stw	r9,12(r3)
   804d0:	18001915 	stw	zero,100(r3)
   804d4:	18000015 	stw	zero,0(r3)
   804d8:	18000115 	stw	zero,4(r3)
   804dc:	18000215 	stw	zero,8(r3)
   804e0:	18000415 	stw	zero,16(r3)
   804e4:	18001705 	stb	zero,92(r3)
   804e8:	18001745 	stb	zero,93(r3)
   804ec:	18001785 	stb	zero,94(r3)
   804f0:	180017c5 	stb	zero,95(r3)
   804f4:	18001805 	stb	zero,96(r3)
   804f8:	18001845 	stb	zero,97(r3)
   804fc:	18001885 	stb	zero,98(r3)
   80500:	180018c5 	stb	zero,99(r3)
   80504:	20800317 	ldw	r2,12(r4)
   80508:	024000b4 	movhi	r9,2
   8050c:	18000515 	stw	zero,20(r3)
   80510:	18000615 	stw	zero,24(r3)
   80514:	18c00715 	stw	r3,28(r3)
   80518:	1a000815 	stw	r8,32(r3)
   8051c:	19c00915 	stw	r7,36(r3)
   80520:	19800a15 	stw	r6,40(r3)
   80524:	19400b15 	stw	r5,44(r3)
   80528:	4a400484 	addi	r9,r9,18
   8052c:	10001915 	stw	zero,100(r2)
   80530:	10000015 	stw	zero,0(r2)
   80534:	10000115 	stw	zero,4(r2)
   80538:	10000215 	stw	zero,8(r2)
   8053c:	12400315 	stw	r9,12(r2)
   80540:	10000415 	stw	zero,16(r2)
   80544:	10000515 	stw	zero,20(r2)
   80548:	10000615 	stw	zero,24(r2)
   8054c:	10001705 	stb	zero,92(r2)
   80550:	10001745 	stb	zero,93(r2)
   80554:	10001785 	stb	zero,94(r2)
   80558:	100017c5 	stb	zero,95(r2)
   8055c:	10001805 	stb	zero,96(r2)
   80560:	10001845 	stb	zero,97(r2)
   80564:	10001885 	stb	zero,98(r2)
   80568:	100018c5 	stb	zero,99(r2)
   8056c:	10800715 	stw	r2,28(r2)
   80570:	12000815 	stw	r8,32(r2)
   80574:	11c00915 	stw	r7,36(r2)
   80578:	11800a15 	stw	r6,40(r2)
   8057c:	11400b15 	stw	r5,44(r2)
   80580:	00800044 	movi	r2,1
   80584:	20800e15 	stw	r2,56(r4)
   80588:	f800283a 	ret

0008058c <__sfmoreglue>:
   8058c:	defffc04 	addi	sp,sp,-16
   80590:	dc800215 	stw	r18,8(sp)
   80594:	2825883a 	mov	r18,r5
   80598:	dc000015 	stw	r16,0(sp)
   8059c:	01401a04 	movi	r5,104
   805a0:	2021883a 	mov	r16,r4
   805a4:	913fffc4 	addi	r4,r18,-1
   805a8:	dfc00315 	stw	ra,12(sp)
   805ac:	dc400115 	stw	r17,4(sp)
   805b0:	00830e40 	call	830e4 <__mulsi3>
   805b4:	8009883a 	mov	r4,r16
   805b8:	11401d04 	addi	r5,r2,116
   805bc:	1023883a 	mov	r17,r2
   805c0:	0080dbc0 	call	80dbc <_malloc_r>
   805c4:	1021883a 	mov	r16,r2
   805c8:	10000726 	beq	r2,zero,805e8 <__sfmoreglue+0x5c>
   805cc:	11000304 	addi	r4,r2,12
   805d0:	10000015 	stw	zero,0(r2)
   805d4:	14800115 	stw	r18,4(r2)
   805d8:	11000215 	stw	r4,8(r2)
   805dc:	89801a04 	addi	r6,r17,104
   805e0:	000b883a 	mov	r5,zero
   805e4:	00818980 	call	81898 <memset>
   805e8:	8005883a 	mov	r2,r16
   805ec:	dfc00317 	ldw	ra,12(sp)
   805f0:	dc800217 	ldw	r18,8(sp)
   805f4:	dc400117 	ldw	r17,4(sp)
   805f8:	dc000017 	ldw	r16,0(sp)
   805fc:	dec00404 	addi	sp,sp,16
   80600:	f800283a 	ret

00080604 <__sfp>:
   80604:	defffb04 	addi	sp,sp,-20
   80608:	00800234 	movhi	r2,8
   8060c:	dc000015 	stw	r16,0(sp)
   80610:	141c9317 	ldw	r16,29260(r2)
   80614:	dc400115 	stw	r17,4(sp)
   80618:	dfc00415 	stw	ra,16(sp)
   8061c:	80800e17 	ldw	r2,56(r16)
   80620:	dcc00315 	stw	r19,12(sp)
   80624:	dc800215 	stw	r18,8(sp)
   80628:	2023883a 	mov	r17,r4
   8062c:	10003126 	beq	r2,zero,806f4 <__sfp+0xf0>
   80630:	8100ba17 	ldw	r4,744(r16)
   80634:	8140b917 	ldw	r5,740(r16)
   80638:	04c00104 	movi	r19,4
   8063c:	8400b804 	addi	r16,r16,736
   80640:	297fffc4 	addi	r5,r5,-1
   80644:	2800050e 	bge	r5,zero,8065c <__sfp+0x58>
   80648:	00002406 	br	806dc <__sfp+0xd8>
   8064c:	297fffc4 	addi	r5,r5,-1
   80650:	28bfffd8 	cmpnei	r2,r5,-1
   80654:	21001a04 	addi	r4,r4,104
   80658:	10002026 	beq	r2,zero,806dc <__sfp+0xd8>
   8065c:	2080030f 	ldh	r2,12(r4)
   80660:	103ffa1e 	bne	r2,zero,8064c <__sfp+0x48>
   80664:	00bffff4 	movhi	r2,65535
   80668:	10800044 	addi	r2,r2,1
   8066c:	20001915 	stw	zero,100(r4)
   80670:	20000015 	stw	zero,0(r4)
   80674:	20000115 	stw	zero,4(r4)
   80678:	20000215 	stw	zero,8(r4)
   8067c:	20800315 	stw	r2,12(r4)
   80680:	20000415 	stw	zero,16(r4)
   80684:	20000515 	stw	zero,20(r4)
   80688:	20000615 	stw	zero,24(r4)
   8068c:	20001705 	stb	zero,92(r4)
   80690:	20001745 	stb	zero,93(r4)
   80694:	20001785 	stb	zero,94(r4)
   80698:	200017c5 	stb	zero,95(r4)
   8069c:	20001805 	stb	zero,96(r4)
   806a0:	20001845 	stb	zero,97(r4)
   806a4:	20001885 	stb	zero,98(r4)
   806a8:	200018c5 	stb	zero,99(r4)
   806ac:	20000c15 	stw	zero,48(r4)
   806b0:	20000d15 	stw	zero,52(r4)
   806b4:	20001115 	stw	zero,68(r4)
   806b8:	20001215 	stw	zero,72(r4)
   806bc:	2005883a 	mov	r2,r4
   806c0:	dfc00417 	ldw	ra,16(sp)
   806c4:	dcc00317 	ldw	r19,12(sp)
   806c8:	dc800217 	ldw	r18,8(sp)
   806cc:	dc400117 	ldw	r17,4(sp)
   806d0:	dc000017 	ldw	r16,0(sp)
   806d4:	dec00504 	addi	sp,sp,20
   806d8:	f800283a 	ret
   806dc:	80800017 	ldw	r2,0(r16)
   806e0:	10000726 	beq	r2,zero,80700 <__sfp+0xfc>
   806e4:	11000217 	ldw	r4,8(r2)
   806e8:	11400117 	ldw	r5,4(r2)
   806ec:	1021883a 	mov	r16,r2
   806f0:	003fd306 	br	80640 <__sfp+0x3c>
   806f4:	8009883a 	mov	r4,r16
   806f8:	00804240 	call	80424 <__sinit.part.0>
   806fc:	003fcc06 	br	80630 <__sfp+0x2c>
   80700:	01406b04 	movi	r5,428
   80704:	8809883a 	mov	r4,r17
   80708:	0080dbc0 	call	80dbc <_malloc_r>
   8070c:	1025883a 	mov	r18,r2
   80710:	10000c26 	beq	r2,zero,80744 <__sfp+0x140>
   80714:	11000304 	addi	r4,r2,12
   80718:	11000215 	stw	r4,8(r2)
   8071c:	000b883a 	mov	r5,zero
   80720:	10000015 	stw	zero,0(r2)
   80724:	14c00115 	stw	r19,4(r2)
   80728:	01806804 	movi	r6,416
   8072c:	00818980 	call	81898 <memset>
   80730:	1009883a 	mov	r4,r2
   80734:	84800015 	stw	r18,0(r16)
   80738:	014000c4 	movi	r5,3
   8073c:	9021883a 	mov	r16,r18
   80740:	003fc606 	br	8065c <__sfp+0x58>
   80744:	80000015 	stw	zero,0(r16)
   80748:	00800304 	movi	r2,12
   8074c:	88800015 	stw	r2,0(r17)
   80750:	0009883a 	mov	r4,zero
   80754:	003fd906 	br	806bc <__sfp+0xb8>

00080758 <_cleanup>:
   80758:	00800234 	movhi	r2,8
   8075c:	111c9317 	ldw	r4,29260(r2)
   80760:	01400234 	movhi	r5,8
   80764:	2948d904 	addi	r5,r5,9060
   80768:	0080d141 	jmpi	80d14 <_fwalk_reent>

0008076c <__sinit>:
   8076c:	20800e17 	ldw	r2,56(r4)
   80770:	10000126 	beq	r2,zero,80778 <__sinit+0xc>
   80774:	f800283a 	ret
   80778:	00804241 	jmpi	80424 <__sinit.part.0>

0008077c <__sfp_lock_acquire>:
   8077c:	f800283a 	ret

00080780 <__sfp_lock_release>:
   80780:	f800283a 	ret

00080784 <__sinit_lock_acquire>:
   80784:	f800283a 	ret

00080788 <__sinit_lock_release>:
   80788:	f800283a 	ret

0008078c <__fp_lock_all>:
   8078c:	00800234 	movhi	r2,8
   80790:	111c9417 	ldw	r4,29264(r2)
   80794:	01400234 	movhi	r5,8
   80798:	29410204 	addi	r5,r5,1032
   8079c:	0080c7c1 	jmpi	80c7c <_fwalk>

000807a0 <__fp_unlock_all>:
   807a0:	00800234 	movhi	r2,8
   807a4:	111c9417 	ldw	r4,29264(r2)
   807a8:	01400234 	movhi	r5,8
   807ac:	29410704 	addi	r5,r5,1052
   807b0:	0080c7c1 	jmpi	80c7c <_fwalk>

000807b4 <__sfvwrite_r>:
   807b4:	30800217 	ldw	r2,8(r6)
   807b8:	1000a326 	beq	r2,zero,80a48 <__sfvwrite_r+0x294>
   807bc:	29c0030b 	ldhu	r7,12(r5)
   807c0:	defff404 	addi	sp,sp,-48
   807c4:	ddc00915 	stw	r23,36(sp)
   807c8:	dd400715 	stw	r21,28(sp)
   807cc:	dc000215 	stw	r16,8(sp)
   807d0:	dfc00b15 	stw	ra,44(sp)
   807d4:	df000a15 	stw	fp,40(sp)
   807d8:	dd800815 	stw	r22,32(sp)
   807dc:	dd000615 	stw	r20,24(sp)
   807e0:	dcc00515 	stw	r19,20(sp)
   807e4:	dc800415 	stw	r18,16(sp)
   807e8:	dc400315 	stw	r17,12(sp)
   807ec:	3880020c 	andi	r2,r7,8
   807f0:	302f883a 	mov	r23,r6
   807f4:	202b883a 	mov	r21,r4
   807f8:	2821883a 	mov	r16,r5
   807fc:	10002226 	beq	r2,zero,80888 <__sfvwrite_r+0xd4>
   80800:	28800417 	ldw	r2,16(r5)
   80804:	10002026 	beq	r2,zero,80888 <__sfvwrite_r+0xd4>
   80808:	3880008c 	andi	r2,r7,2
   8080c:	bc400017 	ldw	r17,0(r23)
   80810:	10002526 	beq	r2,zero,808a8 <__sfvwrite_r+0xf4>
   80814:	80800917 	ldw	r2,36(r16)
   80818:	81400717 	ldw	r5,28(r16)
   8081c:	05200034 	movhi	r20,32768
   80820:	0027883a 	mov	r19,zero
   80824:	0025883a 	mov	r18,zero
   80828:	a53f0004 	addi	r20,r20,-1024
   8082c:	980d883a 	mov	r6,r19
   80830:	a809883a 	mov	r4,r21
   80834:	90001026 	beq	r18,zero,80878 <__sfvwrite_r+0xc4>
   80838:	900f883a 	mov	r7,r18
   8083c:	a480012e 	bgeu	r20,r18,80844 <__sfvwrite_r+0x90>
   80840:	a00f883a 	mov	r7,r20
   80844:	103ee83a 	callr	r2
   80848:	00807a0e 	bge	zero,r2,80a34 <__sfvwrite_r+0x280>
   8084c:	b9000217 	ldw	r4,8(r23)
   80850:	98a7883a 	add	r19,r19,r2
   80854:	90a5c83a 	sub	r18,r18,r2
   80858:	2085c83a 	sub	r2,r4,r2
   8085c:	b8800215 	stw	r2,8(r23)
   80860:	10006326 	beq	r2,zero,809f0 <__sfvwrite_r+0x23c>
   80864:	80800917 	ldw	r2,36(r16)
   80868:	81400717 	ldw	r5,28(r16)
   8086c:	980d883a 	mov	r6,r19
   80870:	a809883a 	mov	r4,r21
   80874:	903ff01e 	bne	r18,zero,80838 <__sfvwrite_r+0x84>
   80878:	8cc00017 	ldw	r19,0(r17)
   8087c:	8c800117 	ldw	r18,4(r17)
   80880:	8c400204 	addi	r17,r17,8
   80884:	003fe906 	br	8082c <__sfvwrite_r+0x78>
   80888:	800b883a 	mov	r5,r16
   8088c:	a809883a 	mov	r4,r21
   80890:	00820e80 	call	820e8 <__swsetup_r>
   80894:	1000f71e 	bne	r2,zero,80c74 <__sfvwrite_r+0x4c0>
   80898:	81c0030b 	ldhu	r7,12(r16)
   8089c:	bc400017 	ldw	r17,0(r23)
   808a0:	3880008c 	andi	r2,r7,2
   808a4:	103fdb1e 	bne	r2,zero,80814 <__sfvwrite_r+0x60>
   808a8:	3880004c 	andi	r2,r7,1
   808ac:	84800217 	ldw	r18,8(r16)
   808b0:	82000017 	ldw	r8,0(r16)
   808b4:	1000661e 	bne	r2,zero,80a50 <__sfvwrite_r+0x29c>
   808b8:	00a00034 	movhi	r2,32768
   808bc:	10bfff84 	addi	r2,r2,-2
   808c0:	00e00034 	movhi	r3,32768
   808c4:	d8800015 	stw	r2,0(sp)
   808c8:	18bfffc4 	addi	r2,r3,-1
   808cc:	0039883a 	mov	fp,zero
   808d0:	0027883a 	mov	r19,zero
   808d4:	d8800115 	stw	r2,4(sp)
   808d8:	98004126 	beq	r19,zero,809e0 <__sfvwrite_r+0x22c>
   808dc:	3880800c 	andi	r2,r7,512
   808e0:	10009726 	beq	r2,zero,80b40 <__sfvwrite_r+0x38c>
   808e4:	902d883a 	mov	r22,r18
   808e8:	9c80be36 	bltu	r19,r18,80be4 <__sfvwrite_r+0x430>
   808ec:	3881200c 	andi	r2,r7,1152
   808f0:	10002626 	beq	r2,zero,8098c <__sfvwrite_r+0x1d8>
   808f4:	81800517 	ldw	r6,20(r16)
   808f8:	81400417 	ldw	r5,16(r16)
   808fc:	98800044 	addi	r2,r19,1
   80900:	3189883a 	add	r4,r6,r6
   80904:	2189883a 	add	r4,r4,r6
   80908:	2028d7fa 	srli	r20,r4,31
   8090c:	4165c83a 	sub	r18,r8,r5
   80910:	1485883a 	add	r2,r2,r18
   80914:	a109883a 	add	r4,r20,r4
   80918:	2029d07a 	srai	r20,r4,1
   8091c:	a00d883a 	mov	r6,r20
   80920:	a080022e 	bgeu	r20,r2,8092c <__sfvwrite_r+0x178>
   80924:	1029883a 	mov	r20,r2
   80928:	100d883a 	mov	r6,r2
   8092c:	39c1000c 	andi	r7,r7,1024
   80930:	3800c026 	beq	r7,zero,80c34 <__sfvwrite_r+0x480>
   80934:	a809883a 	mov	r4,r21
   80938:	300b883a 	mov	r5,r6
   8093c:	0080dbc0 	call	80dbc <_malloc_r>
   80940:	1009883a 	mov	r4,r2
   80944:	1000c726 	beq	r2,zero,80c64 <__sfvwrite_r+0x4b0>
   80948:	81400417 	ldw	r5,16(r16)
   8094c:	900d883a 	mov	r6,r18
   80950:	008166c0 	call	8166c <memcpy>
   80954:	1009883a 	mov	r4,r2
   80958:	8080030b 	ldhu	r2,12(r16)
   8095c:	00fedfc4 	movi	r3,-1153
   80960:	10c4703a 	and	r2,r2,r3
   80964:	10802014 	ori	r2,r2,128
   80968:	8080030d 	sth	r2,12(r16)
   8096c:	2491883a 	add	r8,r4,r18
   80970:	a485c83a 	sub	r2,r20,r18
   80974:	81000415 	stw	r4,16(r16)
   80978:	82000015 	stw	r8,0(r16)
   8097c:	85000515 	stw	r20,20(r16)
   80980:	9825883a 	mov	r18,r19
   80984:	80800215 	stw	r2,8(r16)
   80988:	982d883a 	mov	r22,r19
   8098c:	4009883a 	mov	r4,r8
   80990:	b00d883a 	mov	r6,r22
   80994:	e00b883a 	mov	r5,fp
   80998:	008176c0 	call	8176c <memmove>
   8099c:	81000217 	ldw	r4,8(r16)
   809a0:	80800017 	ldw	r2,0(r16)
   809a4:	9829883a 	mov	r20,r19
   809a8:	24a5c83a 	sub	r18,r4,r18
   809ac:	1585883a 	add	r2,r2,r22
   809b0:	84800215 	stw	r18,8(r16)
   809b4:	80800015 	stw	r2,0(r16)
   809b8:	0027883a 	mov	r19,zero
   809bc:	b8800217 	ldw	r2,8(r23)
   809c0:	e539883a 	add	fp,fp,r20
   809c4:	1529c83a 	sub	r20,r2,r20
   809c8:	bd000215 	stw	r20,8(r23)
   809cc:	a0000826 	beq	r20,zero,809f0 <__sfvwrite_r+0x23c>
   809d0:	81c0030b 	ldhu	r7,12(r16)
   809d4:	84800217 	ldw	r18,8(r16)
   809d8:	82000017 	ldw	r8,0(r16)
   809dc:	983fbf1e 	bne	r19,zero,808dc <__sfvwrite_r+0x128>
   809e0:	8f000017 	ldw	fp,0(r17)
   809e4:	8cc00117 	ldw	r19,4(r17)
   809e8:	8c400204 	addi	r17,r17,8
   809ec:	003fba06 	br	808d8 <__sfvwrite_r+0x124>
   809f0:	0005883a 	mov	r2,zero
   809f4:	dfc00b17 	ldw	ra,44(sp)
   809f8:	df000a17 	ldw	fp,40(sp)
   809fc:	ddc00917 	ldw	r23,36(sp)
   80a00:	dd800817 	ldw	r22,32(sp)
   80a04:	dd400717 	ldw	r21,28(sp)
   80a08:	dd000617 	ldw	r20,24(sp)
   80a0c:	dcc00517 	ldw	r19,20(sp)
   80a10:	dc800417 	ldw	r18,16(sp)
   80a14:	dc400317 	ldw	r17,12(sp)
   80a18:	dc000217 	ldw	r16,8(sp)
   80a1c:	dec00c04 	addi	sp,sp,48
   80a20:	f800283a 	ret
   80a24:	800b883a 	mov	r5,r16
   80a28:	a809883a 	mov	r4,r21
   80a2c:	008266c0 	call	8266c <_fflush_r>
   80a30:	10002026 	beq	r2,zero,80ab4 <__sfvwrite_r+0x300>
   80a34:	8080030b 	ldhu	r2,12(r16)
   80a38:	10801014 	ori	r2,r2,64
   80a3c:	8080030d 	sth	r2,12(r16)
   80a40:	00bfffc4 	movi	r2,-1
   80a44:	003feb06 	br	809f4 <__sfvwrite_r+0x240>
   80a48:	0005883a 	mov	r2,zero
   80a4c:	f800283a 	ret
   80a50:	002d883a 	mov	r22,zero
   80a54:	0027883a 	mov	r19,zero
   80a58:	0005883a 	mov	r2,zero
   80a5c:	0039883a 	mov	fp,zero
   80a60:	b0001d26 	beq	r22,zero,80ad8 <__sfvwrite_r+0x324>
   80a64:	10002026 	beq	r2,zero,80ae8 <__sfvwrite_r+0x334>
   80a68:	9829883a 	mov	r20,r19
   80a6c:	b500012e 	bgeu	r22,r20,80a74 <__sfvwrite_r+0x2c0>
   80a70:	b029883a 	mov	r20,r22
   80a74:	80800417 	ldw	r2,16(r16)
   80a78:	81c00517 	ldw	r7,20(r16)
   80a7c:	1200022e 	bgeu	r2,r8,80a88 <__sfvwrite_r+0x2d4>
   80a80:	3ca5883a 	add	r18,r7,r18
   80a84:	95002216 	blt	r18,r20,80b10 <__sfvwrite_r+0x35c>
   80a88:	a1c05916 	blt	r20,r7,80bf0 <__sfvwrite_r+0x43c>
   80a8c:	80800917 	ldw	r2,36(r16)
   80a90:	81400717 	ldw	r5,28(r16)
   80a94:	e00d883a 	mov	r6,fp
   80a98:	a809883a 	mov	r4,r21
   80a9c:	103ee83a 	callr	r2
   80aa0:	1025883a 	mov	r18,r2
   80aa4:	00bfe30e 	bge	zero,r2,80a34 <__sfvwrite_r+0x280>
   80aa8:	9ca7c83a 	sub	r19,r19,r18
   80aac:	983fdd26 	beq	r19,zero,80a24 <__sfvwrite_r+0x270>
   80ab0:	00800044 	movi	r2,1
   80ab4:	b9800217 	ldw	r6,8(r23)
   80ab8:	e4b9883a 	add	fp,fp,r18
   80abc:	b4adc83a 	sub	r22,r22,r18
   80ac0:	34a5c83a 	sub	r18,r6,r18
   80ac4:	bc800215 	stw	r18,8(r23)
   80ac8:	903fc926 	beq	r18,zero,809f0 <__sfvwrite_r+0x23c>
   80acc:	84800217 	ldw	r18,8(r16)
   80ad0:	82000017 	ldw	r8,0(r16)
   80ad4:	b03fe31e 	bne	r22,zero,80a64 <__sfvwrite_r+0x2b0>
   80ad8:	8d800117 	ldw	r22,4(r17)
   80adc:	8f000017 	ldw	fp,0(r17)
   80ae0:	8c400204 	addi	r17,r17,8
   80ae4:	b03ffc26 	beq	r22,zero,80ad8 <__sfvwrite_r+0x324>
   80ae8:	b00d883a 	mov	r6,r22
   80aec:	01400284 	movi	r5,10
   80af0:	e009883a 	mov	r4,fp
   80af4:	da000015 	stw	r8,0(sp)
   80af8:	008159c0 	call	8159c <memchr>
   80afc:	da000017 	ldw	r8,0(sp)
   80b00:	10004926 	beq	r2,zero,80c28 <__sfvwrite_r+0x474>
   80b04:	10800044 	addi	r2,r2,1
   80b08:	1727c83a 	sub	r19,r2,fp
   80b0c:	003fd606 	br	80a68 <__sfvwrite_r+0x2b4>
   80b10:	e00b883a 	mov	r5,fp
   80b14:	4009883a 	mov	r4,r8
   80b18:	900d883a 	mov	r6,r18
   80b1c:	008176c0 	call	8176c <memmove>
   80b20:	80800017 	ldw	r2,0(r16)
   80b24:	800b883a 	mov	r5,r16
   80b28:	a809883a 	mov	r4,r21
   80b2c:	1485883a 	add	r2,r2,r18
   80b30:	80800015 	stw	r2,0(r16)
   80b34:	008266c0 	call	8266c <_fflush_r>
   80b38:	103fdb26 	beq	r2,zero,80aa8 <__sfvwrite_r+0x2f4>
   80b3c:	003fbd06 	br	80a34 <__sfvwrite_r+0x280>
   80b40:	80800417 	ldw	r2,16(r16)
   80b44:	12001436 	bltu	r2,r8,80b98 <__sfvwrite_r+0x3e4>
   80b48:	85000517 	ldw	r20,20(r16)
   80b4c:	9d001236 	bltu	r19,r20,80b98 <__sfvwrite_r+0x3e4>
   80b50:	d8800017 	ldw	r2,0(sp)
   80b54:	14c0322e 	bgeu	r2,r19,80c20 <__sfvwrite_r+0x46c>
   80b58:	d9000117 	ldw	r4,4(sp)
   80b5c:	a00b883a 	mov	r5,r20
   80b60:	0082f300 	call	82f30 <__divsi3>
   80b64:	a00b883a 	mov	r5,r20
   80b68:	1009883a 	mov	r4,r2
   80b6c:	00830e40 	call	830e4 <__mulsi3>
   80b70:	82000917 	ldw	r8,36(r16)
   80b74:	81400717 	ldw	r5,28(r16)
   80b78:	100f883a 	mov	r7,r2
   80b7c:	e00d883a 	mov	r6,fp
   80b80:	a809883a 	mov	r4,r21
   80b84:	403ee83a 	callr	r8
   80b88:	1029883a 	mov	r20,r2
   80b8c:	00bfa90e 	bge	zero,r2,80a34 <__sfvwrite_r+0x280>
   80b90:	9d27c83a 	sub	r19,r19,r20
   80b94:	003f8906 	br	809bc <__sfvwrite_r+0x208>
   80b98:	9029883a 	mov	r20,r18
   80b9c:	9c80012e 	bgeu	r19,r18,80ba4 <__sfvwrite_r+0x3f0>
   80ba0:	9829883a 	mov	r20,r19
   80ba4:	4009883a 	mov	r4,r8
   80ba8:	a00d883a 	mov	r6,r20
   80bac:	e00b883a 	mov	r5,fp
   80bb0:	008176c0 	call	8176c <memmove>
   80bb4:	80800217 	ldw	r2,8(r16)
   80bb8:	81000017 	ldw	r4,0(r16)
   80bbc:	1505c83a 	sub	r2,r2,r20
   80bc0:	2509883a 	add	r4,r4,r20
   80bc4:	80800215 	stw	r2,8(r16)
   80bc8:	81000015 	stw	r4,0(r16)
   80bcc:	103ff01e 	bne	r2,zero,80b90 <__sfvwrite_r+0x3dc>
   80bd0:	800b883a 	mov	r5,r16
   80bd4:	a809883a 	mov	r4,r21
   80bd8:	008266c0 	call	8266c <_fflush_r>
   80bdc:	103fec26 	beq	r2,zero,80b90 <__sfvwrite_r+0x3dc>
   80be0:	003f9406 	br	80a34 <__sfvwrite_r+0x280>
   80be4:	9825883a 	mov	r18,r19
   80be8:	982d883a 	mov	r22,r19
   80bec:	003f6706 	br	8098c <__sfvwrite_r+0x1d8>
   80bf0:	4009883a 	mov	r4,r8
   80bf4:	a00d883a 	mov	r6,r20
   80bf8:	e00b883a 	mov	r5,fp
   80bfc:	008176c0 	call	8176c <memmove>
   80c00:	81000217 	ldw	r4,8(r16)
   80c04:	80800017 	ldw	r2,0(r16)
   80c08:	a025883a 	mov	r18,r20
   80c0c:	2509c83a 	sub	r4,r4,r20
   80c10:	1505883a 	add	r2,r2,r20
   80c14:	81000215 	stw	r4,8(r16)
   80c18:	80800015 	stw	r2,0(r16)
   80c1c:	003fa206 	br	80aa8 <__sfvwrite_r+0x2f4>
   80c20:	9809883a 	mov	r4,r19
   80c24:	003fcd06 	br	80b5c <__sfvwrite_r+0x3a8>
   80c28:	b5000044 	addi	r20,r22,1
   80c2c:	a027883a 	mov	r19,r20
   80c30:	003f8e06 	br	80a6c <__sfvwrite_r+0x2b8>
   80c34:	a809883a 	mov	r4,r21
   80c38:	00819880 	call	81988 <_realloc_r>
   80c3c:	1009883a 	mov	r4,r2
   80c40:	103f4a1e 	bne	r2,zero,8096c <__sfvwrite_r+0x1b8>
   80c44:	81400417 	ldw	r5,16(r16)
   80c48:	a809883a 	mov	r4,r21
   80c4c:	008286c0 	call	8286c <_free_r>
   80c50:	8080030b 	ldhu	r2,12(r16)
   80c54:	00c00304 	movi	r3,12
   80c58:	a8c00015 	stw	r3,0(r21)
   80c5c:	10bfdfcc 	andi	r2,r2,65407
   80c60:	003f7506 	br	80a38 <__sfvwrite_r+0x284>
   80c64:	00c00304 	movi	r3,12
   80c68:	8080030b 	ldhu	r2,12(r16)
   80c6c:	a8c00015 	stw	r3,0(r21)
   80c70:	003f7106 	br	80a38 <__sfvwrite_r+0x284>
   80c74:	00bfffc4 	movi	r2,-1
   80c78:	003f5e06 	br	809f4 <__sfvwrite_r+0x240>

00080c7c <_fwalk>:
   80c7c:	defffa04 	addi	sp,sp,-24
   80c80:	dd000415 	stw	r20,16(sp)
   80c84:	dcc00315 	stw	r19,12(sp)
   80c88:	dc800215 	stw	r18,8(sp)
   80c8c:	dfc00515 	stw	ra,20(sp)
   80c90:	dc400115 	stw	r17,4(sp)
   80c94:	dc000015 	stw	r16,0(sp)
   80c98:	2827883a 	mov	r19,r5
   80c9c:	2480b804 	addi	r18,r4,736
   80ca0:	0029883a 	mov	r20,zero
   80ca4:	94400117 	ldw	r17,4(r18)
   80ca8:	94000217 	ldw	r16,8(r18)
   80cac:	8c7fffc4 	addi	r17,r17,-1
   80cb0:	88000d16 	blt	r17,zero,80ce8 <_fwalk+0x6c>
   80cb4:	8080030b 	ldhu	r2,12(r16)
   80cb8:	8c7fffc4 	addi	r17,r17,-1
   80cbc:	108000b0 	cmpltui	r2,r2,2
   80cc0:	1000061e 	bne	r2,zero,80cdc <_fwalk+0x60>
   80cc4:	8080038f 	ldh	r2,14(r16)
   80cc8:	8009883a 	mov	r4,r16
   80ccc:	10bfffe0 	cmpeqi	r2,r2,-1
   80cd0:	1000021e 	bne	r2,zero,80cdc <_fwalk+0x60>
   80cd4:	983ee83a 	callr	r19
   80cd8:	a0a8b03a 	or	r20,r20,r2
   80cdc:	88bfffd8 	cmpnei	r2,r17,-1
   80ce0:	84001a04 	addi	r16,r16,104
   80ce4:	103ff31e 	bne	r2,zero,80cb4 <_fwalk+0x38>
   80ce8:	94800017 	ldw	r18,0(r18)
   80cec:	903fed1e 	bne	r18,zero,80ca4 <_fwalk+0x28>
   80cf0:	a005883a 	mov	r2,r20
   80cf4:	dfc00517 	ldw	ra,20(sp)
   80cf8:	dd000417 	ldw	r20,16(sp)
   80cfc:	dcc00317 	ldw	r19,12(sp)
   80d00:	dc800217 	ldw	r18,8(sp)
   80d04:	dc400117 	ldw	r17,4(sp)
   80d08:	dc000017 	ldw	r16,0(sp)
   80d0c:	dec00604 	addi	sp,sp,24
   80d10:	f800283a 	ret

00080d14 <_fwalk_reent>:
   80d14:	defff904 	addi	sp,sp,-28
   80d18:	dd400515 	stw	r21,20(sp)
   80d1c:	dd000415 	stw	r20,16(sp)
   80d20:	dcc00315 	stw	r19,12(sp)
   80d24:	dc800215 	stw	r18,8(sp)
   80d28:	dfc00615 	stw	ra,24(sp)
   80d2c:	dc400115 	stw	r17,4(sp)
   80d30:	dc000015 	stw	r16,0(sp)
   80d34:	202b883a 	mov	r21,r4
   80d38:	2827883a 	mov	r19,r5
   80d3c:	2480b804 	addi	r18,r4,736
   80d40:	0029883a 	mov	r20,zero
   80d44:	94400117 	ldw	r17,4(r18)
   80d48:	94000217 	ldw	r16,8(r18)
   80d4c:	8c7fffc4 	addi	r17,r17,-1
   80d50:	88000e16 	blt	r17,zero,80d8c <_fwalk_reent+0x78>
   80d54:	8080030b 	ldhu	r2,12(r16)
   80d58:	8c7fffc4 	addi	r17,r17,-1
   80d5c:	108000b0 	cmpltui	r2,r2,2
   80d60:	1000071e 	bne	r2,zero,80d80 <_fwalk_reent+0x6c>
   80d64:	8080038f 	ldh	r2,14(r16)
   80d68:	800b883a 	mov	r5,r16
   80d6c:	a809883a 	mov	r4,r21
   80d70:	10bfffe0 	cmpeqi	r2,r2,-1
   80d74:	1000021e 	bne	r2,zero,80d80 <_fwalk_reent+0x6c>
   80d78:	983ee83a 	callr	r19
   80d7c:	a0a8b03a 	or	r20,r20,r2
   80d80:	88bfffd8 	cmpnei	r2,r17,-1
   80d84:	84001a04 	addi	r16,r16,104
   80d88:	103ff21e 	bne	r2,zero,80d54 <_fwalk_reent+0x40>
   80d8c:	94800017 	ldw	r18,0(r18)
   80d90:	903fec1e 	bne	r18,zero,80d44 <_fwalk_reent+0x30>
   80d94:	a005883a 	mov	r2,r20
   80d98:	dfc00617 	ldw	ra,24(sp)
   80d9c:	dd400517 	ldw	r21,20(sp)
   80da0:	dd000417 	ldw	r20,16(sp)
   80da4:	dcc00317 	ldw	r19,12(sp)
   80da8:	dc800217 	ldw	r18,8(sp)
   80dac:	dc400117 	ldw	r17,4(sp)
   80db0:	dc000017 	ldw	r16,0(sp)
   80db4:	dec00704 	addi	sp,sp,28
   80db8:	f800283a 	ret

00080dbc <_malloc_r>:
   80dbc:	defff604 	addi	sp,sp,-40
   80dc0:	dc400115 	stw	r17,4(sp)
   80dc4:	2c4002c4 	addi	r17,r5,11
   80dc8:	dc800215 	stw	r18,8(sp)
   80dcc:	dfc00915 	stw	ra,36(sp)
   80dd0:	df000815 	stw	fp,32(sp)
   80dd4:	ddc00715 	stw	r23,28(sp)
   80dd8:	dd800615 	stw	r22,24(sp)
   80ddc:	dd400515 	stw	r21,20(sp)
   80de0:	dd000415 	stw	r20,16(sp)
   80de4:	dcc00315 	stw	r19,12(sp)
   80de8:	dc000015 	stw	r16,0(sp)
   80dec:	888005e8 	cmpgeui	r2,r17,23
   80df0:	2025883a 	mov	r18,r4
   80df4:	10001b1e 	bne	r2,zero,80e64 <_malloc_r+0xa8>
   80df8:	29400468 	cmpgeui	r5,r5,17
   80dfc:	2800821e 	bne	r5,zero,81008 <_malloc_r+0x24c>
   80e00:	00836b80 	call	836b8 <__malloc_lock>
   80e04:	04400404 	movi	r17,16
   80e08:	00800604 	movi	r2,24
   80e0c:	01c00084 	movi	r7,2
   80e10:	04c00234 	movhi	r19,8
   80e14:	9cd70f04 	addi	r19,r19,23612
   80e18:	9885883a 	add	r2,r19,r2
   80e1c:	14000117 	ldw	r16,4(r2)
   80e20:	10fffe04 	addi	r3,r2,-8
   80e24:	80c08b26 	beq	r16,r3,81054 <_malloc_r+0x298>
   80e28:	80800117 	ldw	r2,4(r16)
   80e2c:	81000317 	ldw	r4,12(r16)
   80e30:	00ffff04 	movi	r3,-4
   80e34:	10c4703a 	and	r2,r2,r3
   80e38:	81400217 	ldw	r5,8(r16)
   80e3c:	8085883a 	add	r2,r16,r2
   80e40:	10c00117 	ldw	r3,4(r2)
   80e44:	29000315 	stw	r4,12(r5)
   80e48:	21400215 	stw	r5,8(r4)
   80e4c:	18c00054 	ori	r3,r3,1
   80e50:	10c00115 	stw	r3,4(r2)
   80e54:	9009883a 	mov	r4,r18
   80e58:	00836dc0 	call	836dc <__malloc_unlock>
   80e5c:	80800204 	addi	r2,r16,8
   80e60:	00006c06 	br	81014 <_malloc_r+0x258>
   80e64:	00bffe04 	movi	r2,-8
   80e68:	88a2703a 	and	r17,r17,r2
   80e6c:	88006616 	blt	r17,zero,81008 <_malloc_r+0x24c>
   80e70:	89406536 	bltu	r17,r5,81008 <_malloc_r+0x24c>
   80e74:	00836b80 	call	836b8 <__malloc_lock>
   80e78:	88807e28 	cmpgeui	r2,r17,504
   80e7c:	10012226 	beq	r2,zero,81308 <_malloc_r+0x54c>
   80e80:	8804d27a 	srli	r2,r17,9
   80e84:	10006f26 	beq	r2,zero,81044 <_malloc_r+0x288>
   80e88:	10c00168 	cmpgeui	r3,r2,5
   80e8c:	1800fe1e 	bne	r3,zero,81288 <_malloc_r+0x4cc>
   80e90:	8804d1ba 	srli	r2,r17,6
   80e94:	11c00e44 	addi	r7,r2,57
   80e98:	380890fa 	slli	r4,r7,3
   80e9c:	12000e04 	addi	r8,r2,56
   80ea0:	04c00234 	movhi	r19,8
   80ea4:	9cd70f04 	addi	r19,r19,23612
   80ea8:	9909883a 	add	r4,r19,r4
   80eac:	24000117 	ldw	r16,4(r4)
   80eb0:	213ffe04 	addi	r4,r4,-8
   80eb4:	24000b26 	beq	r4,r16,80ee4 <_malloc_r+0x128>
   80eb8:	01bfff04 	movi	r6,-4
   80ebc:	00000306 	br	80ecc <_malloc_r+0x110>
   80ec0:	1800d60e 	bge	r3,zero,8121c <_malloc_r+0x460>
   80ec4:	84000317 	ldw	r16,12(r16)
   80ec8:	24000626 	beq	r4,r16,80ee4 <_malloc_r+0x128>
   80ecc:	80800117 	ldw	r2,4(r16)
   80ed0:	1184703a 	and	r2,r2,r6
   80ed4:	1447c83a 	sub	r3,r2,r17
   80ed8:	19400408 	cmpgei	r5,r3,16
   80edc:	283ff826 	beq	r5,zero,80ec0 <_malloc_r+0x104>
   80ee0:	400f883a 	mov	r7,r8
   80ee4:	9c000417 	ldw	r16,16(r19)
   80ee8:	02400234 	movhi	r9,8
   80eec:	4a571104 	addi	r9,r9,23620
   80ef0:	82405f26 	beq	r16,r9,81070 <_malloc_r+0x2b4>
   80ef4:	80c00117 	ldw	r3,4(r16)
   80ef8:	00bfff04 	movi	r2,-4
   80efc:	1884703a 	and	r2,r3,r2
   80f00:	1447c83a 	sub	r3,r2,r17
   80f04:	19000410 	cmplti	r4,r3,16
   80f08:	20010a26 	beq	r4,zero,81334 <_malloc_r+0x578>
   80f0c:	9a400515 	stw	r9,20(r19)
   80f10:	9a400415 	stw	r9,16(r19)
   80f14:	1800ff0e 	bge	r3,zero,81314 <_malloc_r+0x558>
   80f18:	10c08028 	cmpgeui	r3,r2,512
   80f1c:	1800c11e 	bne	r3,zero,81224 <_malloc_r+0x468>
   80f20:	1006d0fa 	srli	r3,r2,3
   80f24:	1008d17a 	srli	r4,r2,5
   80f28:	00800044 	movi	r2,1
   80f2c:	18c00044 	addi	r3,r3,1
   80f30:	180690fa 	slli	r3,r3,3
   80f34:	99400117 	ldw	r5,4(r19)
   80f38:	1104983a 	sll	r2,r2,r4
   80f3c:	98c7883a 	add	r3,r19,r3
   80f40:	19000017 	ldw	r4,0(r3)
   80f44:	1144b03a 	or	r2,r2,r5
   80f48:	197ffe04 	addi	r5,r3,-8
   80f4c:	81400315 	stw	r5,12(r16)
   80f50:	81000215 	stw	r4,8(r16)
   80f54:	98800115 	stw	r2,4(r19)
   80f58:	1c000015 	stw	r16,0(r3)
   80f5c:	24000315 	stw	r16,12(r4)
   80f60:	3807d0ba 	srai	r3,r7,2
   80f64:	01000044 	movi	r4,1
   80f68:	20c8983a 	sll	r4,r4,r3
   80f6c:	11004536 	bltu	r2,r4,81084 <_malloc_r+0x2c8>
   80f70:	2086703a 	and	r3,r4,r2
   80f74:	18000a1e 	bne	r3,zero,80fa0 <_malloc_r+0x1e4>
   80f78:	00ffff04 	movi	r3,-4
   80f7c:	2109883a 	add	r4,r4,r4
   80f80:	38ce703a 	and	r7,r7,r3
   80f84:	2086703a 	and	r3,r4,r2
   80f88:	39c00104 	addi	r7,r7,4
   80f8c:	1800041e 	bne	r3,zero,80fa0 <_malloc_r+0x1e4>
   80f90:	2109883a 	add	r4,r4,r4
   80f94:	2086703a 	and	r3,r4,r2
   80f98:	39c00104 	addi	r7,r7,4
   80f9c:	183ffc26 	beq	r3,zero,80f90 <_malloc_r+0x1d4>
   80fa0:	02bfff04 	movi	r10,-4
   80fa4:	381690fa 	slli	r11,r7,3
   80fa8:	3819883a 	mov	r12,r7
   80fac:	9ad7883a 	add	r11,r19,r11
   80fb0:	5811883a 	mov	r8,r11
   80fb4:	40800317 	ldw	r2,12(r8)
   80fb8:	4080bc26 	beq	r8,r2,812ac <_malloc_r+0x4f0>
   80fbc:	10c00117 	ldw	r3,4(r2)
   80fc0:	1021883a 	mov	r16,r2
   80fc4:	10800317 	ldw	r2,12(r2)
   80fc8:	1a86703a 	and	r3,r3,r10
   80fcc:	1c4bc83a 	sub	r5,r3,r17
   80fd0:	29800410 	cmplti	r6,r5,16
   80fd4:	3000ba26 	beq	r6,zero,812c0 <_malloc_r+0x504>
   80fd8:	283ff716 	blt	r5,zero,80fb8 <_malloc_r+0x1fc>
   80fdc:	80c7883a 	add	r3,r16,r3
   80fe0:	19400117 	ldw	r5,4(r3)
   80fe4:	81800217 	ldw	r6,8(r16)
   80fe8:	9009883a 	mov	r4,r18
   80fec:	29400054 	ori	r5,r5,1
   80ff0:	19400115 	stw	r5,4(r3)
   80ff4:	30800315 	stw	r2,12(r6)
   80ff8:	11800215 	stw	r6,8(r2)
   80ffc:	00836dc0 	call	836dc <__malloc_unlock>
   81000:	80800204 	addi	r2,r16,8
   81004:	00000306 	br	81014 <_malloc_r+0x258>
   81008:	00800304 	movi	r2,12
   8100c:	90800015 	stw	r2,0(r18)
   81010:	0005883a 	mov	r2,zero
   81014:	dfc00917 	ldw	ra,36(sp)
   81018:	df000817 	ldw	fp,32(sp)
   8101c:	ddc00717 	ldw	r23,28(sp)
   81020:	dd800617 	ldw	r22,24(sp)
   81024:	dd400517 	ldw	r21,20(sp)
   81028:	dd000417 	ldw	r20,16(sp)
   8102c:	dcc00317 	ldw	r19,12(sp)
   81030:	dc800217 	ldw	r18,8(sp)
   81034:	dc400117 	ldw	r17,4(sp)
   81038:	dc000017 	ldw	r16,0(sp)
   8103c:	dec00a04 	addi	sp,sp,40
   81040:	f800283a 	ret
   81044:	01008004 	movi	r4,512
   81048:	01c01004 	movi	r7,64
   8104c:	02000fc4 	movi	r8,63
   81050:	003f9306 	br	80ea0 <_malloc_r+0xe4>
   81054:	14000317 	ldw	r16,12(r2)
   81058:	39c00084 	addi	r7,r7,2
   8105c:	143f721e 	bne	r2,r16,80e28 <_malloc_r+0x6c>
   81060:	9c000417 	ldw	r16,16(r19)
   81064:	02400234 	movhi	r9,8
   81068:	4a571104 	addi	r9,r9,23620
   8106c:	827fa11e 	bne	r16,r9,80ef4 <_malloc_r+0x138>
   81070:	3807d0ba 	srai	r3,r7,2
   81074:	01000044 	movi	r4,1
   81078:	98800117 	ldw	r2,4(r19)
   8107c:	20c8983a 	sll	r4,r4,r3
   81080:	113fbb2e 	bgeu	r2,r4,80f70 <_malloc_r+0x1b4>
   81084:	9c000217 	ldw	r16,8(r19)
   81088:	00bfff04 	movi	r2,-4
   8108c:	85400117 	ldw	r21,4(r16)
   81090:	a8ac703a 	and	r22,r21,r2
   81094:	b4400336 	bltu	r22,r17,810a4 <_malloc_r+0x2e8>
   81098:	b445c83a 	sub	r2,r22,r17
   8109c:	10c00408 	cmpgei	r3,r2,16
   810a0:	1800541e 	bne	r3,zero,811f4 <_malloc_r+0x438>
   810a4:	00800234 	movhi	r2,8
   810a8:	109c9517 	ldw	r2,29268(r2)
   810ac:	00c00274 	movhi	r3,9
   810b0:	1d633e17 	ldw	r21,-29448(r3)
   810b4:	10bfffd8 	cmpnei	r2,r2,-1
   810b8:	85b9883a 	add	fp,r16,r22
   810bc:	8d6b883a 	add	r21,r17,r21
   810c0:	1000d626 	beq	r2,zero,8141c <_malloc_r+0x660>
   810c4:	ad4403c4 	addi	r21,r21,4111
   810c8:	00bc0004 	movi	r2,-4096
   810cc:	a8aa703a 	and	r21,r21,r2
   810d0:	a80b883a 	mov	r5,r21
   810d4:	9009883a 	mov	r4,r18
   810d8:	0081eec0 	call	81eec <_sbrk_r>
   810dc:	102f883a 	mov	r23,r2
   810e0:	10bfffd8 	cmpnei	r2,r2,-1
   810e4:	1000a826 	beq	r2,zero,81388 <_malloc_r+0x5cc>
   810e8:	bf00a636 	bltu	r23,fp,81384 <_malloc_r+0x5c8>
   810ec:	00800274 	movhi	r2,9
   810f0:	15234717 	ldw	r20,-29412(r2)
   810f4:	ad29883a 	add	r20,r21,r20
   810f8:	15234715 	stw	r20,-29412(r2)
   810fc:	a007883a 	mov	r3,r20
   81100:	e5c0ec26 	beq	fp,r23,814b4 <_malloc_r+0x6f8>
   81104:	00800234 	movhi	r2,8
   81108:	109c9517 	ldw	r2,29268(r2)
   8110c:	10bfffd8 	cmpnei	r2,r2,-1
   81110:	1000ef26 	beq	r2,zero,814d0 <_malloc_r+0x714>
   81114:	bf39c83a 	sub	fp,r23,fp
   81118:	e0c7883a 	add	r3,fp,r3
   8111c:	00800274 	movhi	r2,9
   81120:	10e34715 	stw	r3,-29412(r2)
   81124:	bf0001cc 	andi	fp,r23,7
   81128:	e000c526 	beq	fp,zero,81440 <_malloc_r+0x684>
   8112c:	bf2fc83a 	sub	r23,r23,fp
   81130:	bdc00204 	addi	r23,r23,8
   81134:	05040204 	movi	r20,4104
   81138:	a729c83a 	sub	r20,r20,fp
   8113c:	bd6b883a 	add	r21,r23,r21
   81140:	a569c83a 	sub	r20,r20,r21
   81144:	a503ffcc 	andi	r20,r20,4095
   81148:	a00b883a 	mov	r5,r20
   8114c:	9009883a 	mov	r4,r18
   81150:	0081eec0 	call	81eec <_sbrk_r>
   81154:	10ffffe0 	cmpeqi	r3,r2,-1
   81158:	1800f31e 	bne	r3,zero,81528 <_malloc_r+0x76c>
   8115c:	15c5c83a 	sub	r2,r2,r23
   81160:	152b883a 	add	r21,r2,r20
   81164:	00800274 	movhi	r2,9
   81168:	11634717 	ldw	r5,-29412(r2)
   8116c:	9dc00215 	stw	r23,8(r19)
   81170:	ad400054 	ori	r21,r21,1
   81174:	a169883a 	add	r20,r20,r5
   81178:	15234715 	stw	r20,-29412(r2)
   8117c:	bd400115 	stw	r21,4(r23)
   81180:	84c0d626 	beq	r16,r19,814dc <_malloc_r+0x720>
   81184:	b0800428 	cmpgeui	r2,r22,16
   81188:	1000d626 	beq	r2,zero,814e4 <_malloc_r+0x728>
   8118c:	80c00117 	ldw	r3,4(r16)
   81190:	013ffe04 	movi	r4,-8
   81194:	b0bffd04 	addi	r2,r22,-12
   81198:	1104703a 	and	r2,r2,r4
   8119c:	18c0004c 	andi	r3,r3,1
   811a0:	1886b03a 	or	r3,r3,r2
   811a4:	80c00115 	stw	r3,4(r16)
   811a8:	01000144 	movi	r4,5
   811ac:	8087883a 	add	r3,r16,r2
   811b0:	19000115 	stw	r4,4(r3)
   811b4:	19000215 	stw	r4,8(r3)
   811b8:	10800428 	cmpgeui	r2,r2,16
   811bc:	1000df1e 	bne	r2,zero,8153c <_malloc_r+0x780>
   811c0:	bd400117 	ldw	r21,4(r23)
   811c4:	b821883a 	mov	r16,r23
   811c8:	00800274 	movhi	r2,9
   811cc:	10a33d17 	ldw	r2,-29452(r2)
   811d0:	1500022e 	bgeu	r2,r20,811dc <_malloc_r+0x420>
   811d4:	00800274 	movhi	r2,9
   811d8:	15233d15 	stw	r20,-29452(r2)
   811dc:	00800274 	movhi	r2,9
   811e0:	10a33c17 	ldw	r2,-29456(r2)
   811e4:	15006a2e 	bgeu	r2,r20,81390 <_malloc_r+0x5d4>
   811e8:	00800274 	movhi	r2,9
   811ec:	15233c15 	stw	r20,-29456(r2)
   811f0:	00006706 	br	81390 <_malloc_r+0x5d4>
   811f4:	88c00054 	ori	r3,r17,1
   811f8:	80c00115 	stw	r3,4(r16)
   811fc:	8463883a 	add	r17,r16,r17
   81200:	10800054 	ori	r2,r2,1
   81204:	9c400215 	stw	r17,8(r19)
   81208:	88800115 	stw	r2,4(r17)
   8120c:	9009883a 	mov	r4,r18
   81210:	00836dc0 	call	836dc <__malloc_unlock>
   81214:	80800204 	addi	r2,r16,8
   81218:	003f7e06 	br	81014 <_malloc_r+0x258>
   8121c:	81000317 	ldw	r4,12(r16)
   81220:	003f0506 	br	80e38 <_malloc_r+0x7c>
   81224:	1006d27a 	srli	r3,r2,9
   81228:	19000168 	cmpgeui	r4,r3,5
   8122c:	20005026 	beq	r4,zero,81370 <_malloc_r+0x5b4>
   81230:	19000568 	cmpgeui	r4,r3,21
   81234:	20008c1e 	bne	r4,zero,81468 <_malloc_r+0x6ac>
   81238:	19401704 	addi	r5,r3,92
   8123c:	280a90fa 	slli	r5,r5,3
   81240:	190016c4 	addi	r4,r3,91
   81244:	994b883a 	add	r5,r19,r5
   81248:	28c00017 	ldw	r3,0(r5)
   8124c:	297ffe04 	addi	r5,r5,-8
   81250:	28c07426 	beq	r5,r3,81424 <_malloc_r+0x668>
   81254:	01bfff04 	movi	r6,-4
   81258:	19000117 	ldw	r4,4(r3)
   8125c:	2188703a 	and	r4,r4,r6
   81260:	1100022e 	bgeu	r2,r4,8126c <_malloc_r+0x4b0>
   81264:	18c00217 	ldw	r3,8(r3)
   81268:	28fffb1e 	bne	r5,r3,81258 <_malloc_r+0x49c>
   8126c:	19400317 	ldw	r5,12(r3)
   81270:	98800117 	ldw	r2,4(r19)
   81274:	81400315 	stw	r5,12(r16)
   81278:	80c00215 	stw	r3,8(r16)
   8127c:	2c000215 	stw	r16,8(r5)
   81280:	1c000315 	stw	r16,12(r3)
   81284:	003f3606 	br	80f60 <_malloc_r+0x1a4>
   81288:	10c00568 	cmpgeui	r3,r2,21
   8128c:	18004a26 	beq	r3,zero,813b8 <_malloc_r+0x5fc>
   81290:	10c01568 	cmpgeui	r3,r2,85
   81294:	18007b1e 	bne	r3,zero,81484 <_malloc_r+0x6c8>
   81298:	8804d33a 	srli	r2,r17,12
   8129c:	11c01bc4 	addi	r7,r2,111
   812a0:	380890fa 	slli	r4,r7,3
   812a4:	12001b84 	addi	r8,r2,110
   812a8:	003efd06 	br	80ea0 <_malloc_r+0xe4>
   812ac:	63000044 	addi	r12,r12,1
   812b0:	608000cc 	andi	r2,r12,3
   812b4:	42000204 	addi	r8,r8,8
   812b8:	103f3e1e 	bne	r2,zero,80fb4 <_malloc_r+0x1f8>
   812bc:	00004506 	br	813d4 <_malloc_r+0x618>
   812c0:	81000217 	ldw	r4,8(r16)
   812c4:	89800054 	ori	r6,r17,1
   812c8:	81800115 	stw	r6,4(r16)
   812cc:	20800315 	stw	r2,12(r4)
   812d0:	11000215 	stw	r4,8(r2)
   812d4:	8463883a 	add	r17,r16,r17
   812d8:	9c400515 	stw	r17,20(r19)
   812dc:	9c400415 	stw	r17,16(r19)
   812e0:	28800054 	ori	r2,r5,1
   812e4:	88800115 	stw	r2,4(r17)
   812e8:	8a400315 	stw	r9,12(r17)
   812ec:	8a400215 	stw	r9,8(r17)
   812f0:	80c7883a 	add	r3,r16,r3
   812f4:	19400015 	stw	r5,0(r3)
   812f8:	9009883a 	mov	r4,r18
   812fc:	00836dc0 	call	836dc <__malloc_unlock>
   81300:	80800204 	addi	r2,r16,8
   81304:	003f4306 	br	81014 <_malloc_r+0x258>
   81308:	880ed0fa 	srli	r7,r17,3
   8130c:	88800204 	addi	r2,r17,8
   81310:	003ebf06 	br	80e10 <_malloc_r+0x54>
   81314:	8085883a 	add	r2,r16,r2
   81318:	10c00117 	ldw	r3,4(r2)
   8131c:	9009883a 	mov	r4,r18
   81320:	18c00054 	ori	r3,r3,1
   81324:	10c00115 	stw	r3,4(r2)
   81328:	00836dc0 	call	836dc <__malloc_unlock>
   8132c:	80800204 	addi	r2,r16,8
   81330:	003f3806 	br	81014 <_malloc_r+0x258>
   81334:	89000054 	ori	r4,r17,1
   81338:	81000115 	stw	r4,4(r16)
   8133c:	8463883a 	add	r17,r16,r17
   81340:	9c400515 	stw	r17,20(r19)
   81344:	9c400415 	stw	r17,16(r19)
   81348:	19000054 	ori	r4,r3,1
   8134c:	89000115 	stw	r4,4(r17)
   81350:	8085883a 	add	r2,r16,r2
   81354:	8a400315 	stw	r9,12(r17)
   81358:	8a400215 	stw	r9,8(r17)
   8135c:	10c00015 	stw	r3,0(r2)
   81360:	9009883a 	mov	r4,r18
   81364:	00836dc0 	call	836dc <__malloc_unlock>
   81368:	80800204 	addi	r2,r16,8
   8136c:	003f2906 	br	81014 <_malloc_r+0x258>
   81370:	1006d1ba 	srli	r3,r2,6
   81374:	19400e44 	addi	r5,r3,57
   81378:	280a90fa 	slli	r5,r5,3
   8137c:	19000e04 	addi	r4,r3,56
   81380:	003fb006 	br	81244 <_malloc_r+0x488>
   81384:	84c04626 	beq	r16,r19,814a0 <_malloc_r+0x6e4>
   81388:	9c000217 	ldw	r16,8(r19)
   8138c:	85400117 	ldw	r21,4(r16)
   81390:	00bfff04 	movi	r2,-4
   81394:	a8aa703a 	and	r21,r21,r2
   81398:	ac45c83a 	sub	r2,r21,r17
   8139c:	ac400236 	bltu	r21,r17,813a8 <_malloc_r+0x5ec>
   813a0:	10c00408 	cmpgei	r3,r2,16
   813a4:	183f931e 	bne	r3,zero,811f4 <_malloc_r+0x438>
   813a8:	9009883a 	mov	r4,r18
   813ac:	00836dc0 	call	836dc <__malloc_unlock>
   813b0:	0005883a 	mov	r2,zero
   813b4:	003f1706 	br	81014 <_malloc_r+0x258>
   813b8:	11c01704 	addi	r7,r2,92
   813bc:	380890fa 	slli	r4,r7,3
   813c0:	120016c4 	addi	r8,r2,91
   813c4:	003eb606 	br	80ea0 <_malloc_r+0xe4>
   813c8:	58800217 	ldw	r2,8(r11)
   813cc:	39ffffc4 	addi	r7,r7,-1
   813d0:	12c0701e 	bne	r2,r11,81594 <_malloc_r+0x7d8>
   813d4:	388000cc 	andi	r2,r7,3
   813d8:	5afffe04 	addi	r11,r11,-8
   813dc:	103ffa1e 	bne	r2,zero,813c8 <_malloc_r+0x60c>
   813e0:	98c00117 	ldw	r3,4(r19)
   813e4:	0104303a 	nor	r2,zero,r4
   813e8:	10c4703a 	and	r2,r2,r3
   813ec:	98800115 	stw	r2,4(r19)
   813f0:	2109883a 	add	r4,r4,r4
   813f4:	113f2336 	bltu	r2,r4,81084 <_malloc_r+0x2c8>
   813f8:	203f2226 	beq	r4,zero,81084 <_malloc_r+0x2c8>
   813fc:	2086703a 	and	r3,r4,r2
   81400:	1800041e 	bne	r3,zero,81414 <_malloc_r+0x658>
   81404:	2109883a 	add	r4,r4,r4
   81408:	2086703a 	and	r3,r4,r2
   8140c:	63000104 	addi	r12,r12,4
   81410:	183ffc26 	beq	r3,zero,81404 <_malloc_r+0x648>
   81414:	600f883a 	mov	r7,r12
   81418:	003ee206 	br	80fa4 <_malloc_r+0x1e8>
   8141c:	ad400404 	addi	r21,r21,16
   81420:	003f2b06 	br	810d0 <_malloc_r+0x314>
   81424:	2009d0ba 	srai	r4,r4,2
   81428:	00800044 	movi	r2,1
   8142c:	99800117 	ldw	r6,4(r19)
   81430:	1104983a 	sll	r2,r2,r4
   81434:	1184b03a 	or	r2,r2,r6
   81438:	98800115 	stw	r2,4(r19)
   8143c:	003f8d06 	br	81274 <_malloc_r+0x4b8>
   81440:	bd69883a 	add	r20,r23,r21
   81444:	0529c83a 	sub	r20,zero,r20
   81448:	a503ffcc 	andi	r20,r20,4095
   8144c:	a00b883a 	mov	r5,r20
   81450:	9009883a 	mov	r4,r18
   81454:	0081eec0 	call	81eec <_sbrk_r>
   81458:	10ffffe0 	cmpeqi	r3,r2,-1
   8145c:	183f3f26 	beq	r3,zero,8115c <_malloc_r+0x3a0>
   81460:	0029883a 	mov	r20,zero
   81464:	003f3f06 	br	81164 <_malloc_r+0x3a8>
   81468:	19001568 	cmpgeui	r4,r3,85
   8146c:	2000201e 	bne	r4,zero,814f0 <_malloc_r+0x734>
   81470:	1006d33a 	srli	r3,r2,12
   81474:	19401bc4 	addi	r5,r3,111
   81478:	280a90fa 	slli	r5,r5,3
   8147c:	19001b84 	addi	r4,r3,110
   81480:	003f7006 	br	81244 <_malloc_r+0x488>
   81484:	10c05568 	cmpgeui	r3,r2,341
   81488:	1800201e 	bne	r3,zero,8150c <_malloc_r+0x750>
   8148c:	8804d3fa 	srli	r2,r17,15
   81490:	11c01e04 	addi	r7,r2,120
   81494:	380890fa 	slli	r4,r7,3
   81498:	12001dc4 	addi	r8,r2,119
   8149c:	003e8006 	br	80ea0 <_malloc_r+0xe4>
   814a0:	00800274 	movhi	r2,9
   814a4:	10e34717 	ldw	r3,-29412(r2)
   814a8:	a8c7883a 	add	r3,r21,r3
   814ac:	10e34715 	stw	r3,-29412(r2)
   814b0:	003f1406 	br	81104 <_malloc_r+0x348>
   814b4:	e083ffcc 	andi	r2,fp,4095
   814b8:	103f121e 	bne	r2,zero,81104 <_malloc_r+0x348>
   814bc:	9c000217 	ldw	r16,8(r19)
   814c0:	b56b883a 	add	r21,r22,r21
   814c4:	ad400054 	ori	r21,r21,1
   814c8:	85400115 	stw	r21,4(r16)
   814cc:	003f3e06 	br	811c8 <_malloc_r+0x40c>
   814d0:	00800234 	movhi	r2,8
   814d4:	15dc9515 	stw	r23,29268(r2)
   814d8:	003f1206 	br	81124 <_malloc_r+0x368>
   814dc:	b821883a 	mov	r16,r23
   814e0:	003f3906 	br	811c8 <_malloc_r+0x40c>
   814e4:	00800044 	movi	r2,1
   814e8:	b8800115 	stw	r2,4(r23)
   814ec:	003fae06 	br	813a8 <_malloc_r+0x5ec>
   814f0:	19005568 	cmpgeui	r4,r3,341
   814f4:	2000191e 	bne	r4,zero,8155c <_malloc_r+0x7a0>
   814f8:	1006d3fa 	srli	r3,r2,15
   814fc:	19401e04 	addi	r5,r3,120
   81500:	280a90fa 	slli	r5,r5,3
   81504:	19001dc4 	addi	r4,r3,119
   81508:	003f4e06 	br	81244 <_malloc_r+0x488>
   8150c:	10815568 	cmpgeui	r2,r2,1365
   81510:	1000191e 	bne	r2,zero,81578 <_malloc_r+0x7bc>
   81514:	8804d4ba 	srli	r2,r17,18
   81518:	11c01f44 	addi	r7,r2,125
   8151c:	380890fa 	slli	r4,r7,3
   81520:	12001f04 	addi	r8,r2,124
   81524:	003e5e06 	br	80ea0 <_malloc_r+0xe4>
   81528:	e73ffe04 	addi	fp,fp,-8
   8152c:	af2b883a 	add	r21,r21,fp
   81530:	adebc83a 	sub	r21,r21,r23
   81534:	0029883a 	mov	r20,zero
   81538:	003f0a06 	br	81164 <_malloc_r+0x3a8>
   8153c:	81400204 	addi	r5,r16,8
   81540:	9009883a 	mov	r4,r18
   81544:	008286c0 	call	8286c <_free_r>
   81548:	9c000217 	ldw	r16,8(r19)
   8154c:	00800274 	movhi	r2,9
   81550:	15234717 	ldw	r20,-29412(r2)
   81554:	85400117 	ldw	r21,4(r16)
   81558:	003f1b06 	br	811c8 <_malloc_r+0x40c>
   8155c:	18c15568 	cmpgeui	r3,r3,1365
   81560:	1800091e 	bne	r3,zero,81588 <_malloc_r+0x7cc>
   81564:	1006d4ba 	srli	r3,r2,18
   81568:	19401f44 	addi	r5,r3,125
   8156c:	280a90fa 	slli	r5,r5,3
   81570:	19001f04 	addi	r4,r3,124
   81574:	003f3306 	br	81244 <_malloc_r+0x488>
   81578:	0100fe04 	movi	r4,1016
   8157c:	01c01fc4 	movi	r7,127
   81580:	02001f84 	movi	r8,126
   81584:	003e4606 	br	80ea0 <_malloc_r+0xe4>
   81588:	0140fe04 	movi	r5,1016
   8158c:	01001f84 	movi	r4,126
   81590:	003f2c06 	br	81244 <_malloc_r+0x488>
   81594:	98800117 	ldw	r2,4(r19)
   81598:	003f9506 	br	813f0 <_malloc_r+0x634>

0008159c <memchr>:
   8159c:	208000cc 	andi	r2,r4,3
   815a0:	280f883a 	mov	r7,r5
   815a4:	10000e26 	beq	r2,zero,815e0 <memchr+0x44>
   815a8:	30bfffc4 	addi	r2,r6,-1
   815ac:	30001726 	beq	r6,zero,8160c <memchr+0x70>
   815b0:	29803fcc 	andi	r6,r5,255
   815b4:	00000606 	br	815d0 <memchr+0x34>
   815b8:	21000044 	addi	r4,r4,1
   815bc:	20c000cc 	andi	r3,r4,3
   815c0:	18000826 	beq	r3,zero,815e4 <memchr+0x48>
   815c4:	10bfffc4 	addi	r2,r2,-1
   815c8:	10ffffe0 	cmpeqi	r3,r2,-1
   815cc:	18000f1e 	bne	r3,zero,8160c <memchr+0x70>
   815d0:	20c00003 	ldbu	r3,0(r4)
   815d4:	19bff81e 	bne	r3,r6,815b8 <memchr+0x1c>
   815d8:	2005883a 	mov	r2,r4
   815dc:	f800283a 	ret
   815e0:	3005883a 	mov	r2,r6
   815e4:	10c00128 	cmpgeui	r3,r2,4
   815e8:	18000a1e 	bne	r3,zero,81614 <memchr+0x78>
   815ec:	10001e26 	beq	r2,zero,81668 <memchr+0xcc>
   815f0:	2087883a 	add	r3,r4,r2
   815f4:	39803fcc 	andi	r6,r7,255
   815f8:	2005883a 	mov	r2,r4
   815fc:	11000003 	ldbu	r4,0(r2)
   81600:	21bff626 	beq	r4,r6,815dc <memchr+0x40>
   81604:	10800044 	addi	r2,r2,1
   81608:	18bffc1e 	bne	r3,r2,815fc <memchr+0x60>
   8160c:	0005883a 	mov	r2,zero
   81610:	f800283a 	ret
   81614:	29403fcc 	andi	r5,r5,255
   81618:	280c923a 	slli	r6,r5,8
   8161c:	027fbff4 	movhi	r9,65279
   81620:	02202074 	movhi	r8,32897
   81624:	314ab03a 	or	r5,r6,r5
   81628:	280c943a 	slli	r6,r5,16
   8162c:	4a7fbfc4 	addi	r9,r9,-257
   81630:	42202004 	addi	r8,r8,-32640
   81634:	314cb03a 	or	r6,r6,r5
   81638:	20c00017 	ldw	r3,0(r4)
   8163c:	30c6f03a 	xor	r3,r6,r3
   81640:	1a4b883a 	add	r5,r3,r9
   81644:	00c6303a 	nor	r3,zero,r3
   81648:	28c6703a 	and	r3,r5,r3
   8164c:	1a06703a 	and	r3,r3,r8
   81650:	183fe71e 	bne	r3,zero,815f0 <memchr+0x54>
   81654:	10bfff04 	addi	r2,r2,-4
   81658:	10c00128 	cmpgeui	r3,r2,4
   8165c:	21000104 	addi	r4,r4,4
   81660:	183ff51e 	bne	r3,zero,81638 <memchr+0x9c>
   81664:	003fe106 	br	815ec <memchr+0x50>
   81668:	f800283a 	ret

0008166c <memcpy>:
   8166c:	30c00430 	cmpltui	r3,r6,16
   81670:	2005883a 	mov	r2,r4
   81674:	18002d1e 	bne	r3,zero,8172c <memcpy+0xc0>
   81678:	2906b03a 	or	r3,r5,r4
   8167c:	18c000cc 	andi	r3,r3,3
   81680:	1800351e 	bne	r3,zero,81758 <memcpy+0xec>
   81684:	32fffc04 	addi	r11,r6,-16
   81688:	5816d13a 	srli	r11,r11,4
   8168c:	280f883a 	mov	r7,r5
   81690:	2007883a 	mov	r3,r4
   81694:	5ac00044 	addi	r11,r11,1
   81698:	5816913a 	slli	r11,r11,4
   8169c:	22d5883a 	add	r10,r4,r11
   816a0:	39000117 	ldw	r4,4(r7)
   816a4:	3a400017 	ldw	r9,0(r7)
   816a8:	3a000217 	ldw	r8,8(r7)
   816ac:	19000115 	stw	r4,4(r3)
   816b0:	39000317 	ldw	r4,12(r7)
   816b4:	1a400015 	stw	r9,0(r3)
   816b8:	1a000215 	stw	r8,8(r3)
   816bc:	19000315 	stw	r4,12(r3)
   816c0:	18c00404 	addi	r3,r3,16
   816c4:	39c00404 	addi	r7,r7,16
   816c8:	50fff51e 	bne	r10,r3,816a0 <memcpy+0x34>
   816cc:	3100030c 	andi	r4,r6,12
   816d0:	2acb883a 	add	r5,r5,r11
   816d4:	320003cc 	andi	r8,r6,15
   816d8:	20002226 	beq	r4,zero,81764 <memcpy+0xf8>
   816dc:	280f883a 	mov	r7,r5
   816e0:	1813883a 	mov	r9,r3
   816e4:	39c00104 	addi	r7,r7,4
   816e8:	3abfff17 	ldw	r10,-4(r7)
   816ec:	41c9c83a 	sub	r4,r8,r7
   816f0:	2909883a 	add	r4,r5,r4
   816f4:	4a800015 	stw	r10,0(r9)
   816f8:	21000128 	cmpgeui	r4,r4,4
   816fc:	4a400104 	addi	r9,r9,4
   81700:	203ff81e 	bne	r4,zero,816e4 <memcpy+0x78>
   81704:	413fff04 	addi	r4,r8,-4
   81708:	2008d0ba 	srli	r4,r4,2
   8170c:	318000cc 	andi	r6,r6,3
   81710:	31ffffc4 	addi	r7,r6,-1
   81714:	21000044 	addi	r4,r4,1
   81718:	200890ba 	slli	r4,r4,2
   8171c:	1907883a 	add	r3,r3,r4
   81720:	290b883a 	add	r5,r5,r4
   81724:	3000041e 	bne	r6,zero,81738 <memcpy+0xcc>
   81728:	f800283a 	ret
   8172c:	2007883a 	mov	r3,r4
   81730:	31ffffc4 	addi	r7,r6,-1
   81734:	303ffc26 	beq	r6,zero,81728 <memcpy+0xbc>
   81738:	39c00044 	addi	r7,r7,1
   8173c:	19cf883a 	add	r7,r3,r7
   81740:	29800003 	ldbu	r6,0(r5)
   81744:	18c00044 	addi	r3,r3,1
   81748:	29400044 	addi	r5,r5,1
   8174c:	19bfffc5 	stb	r6,-1(r3)
   81750:	38fffb1e 	bne	r7,r3,81740 <memcpy+0xd4>
   81754:	f800283a 	ret
   81758:	31ffffc4 	addi	r7,r6,-1
   8175c:	2007883a 	mov	r3,r4
   81760:	003ff506 	br	81738 <memcpy+0xcc>
   81764:	400d883a 	mov	r6,r8
   81768:	003ff106 	br	81730 <memcpy+0xc4>

0008176c <memmove>:
   8176c:	2005883a 	mov	r2,r4
   81770:	29000a2e 	bgeu	r5,r4,8179c <memmove+0x30>
   81774:	2989883a 	add	r4,r5,r6
   81778:	1100082e 	bgeu	r2,r4,8179c <memmove+0x30>
   8177c:	1187883a 	add	r3,r2,r6
   81780:	30003e26 	beq	r6,zero,8187c <memmove+0x110>
   81784:	217fffc3 	ldbu	r5,-1(r4)
   81788:	18ffffc4 	addi	r3,r3,-1
   8178c:	213fffc4 	addi	r4,r4,-1
   81790:	19400005 	stb	r5,0(r3)
   81794:	10fffb1e 	bne	r2,r3,81784 <memmove+0x18>
   81798:	f800283a 	ret
   8179c:	30c00430 	cmpltui	r3,r6,16
   817a0:	18000b26 	beq	r3,zero,817d0 <memmove+0x64>
   817a4:	1007883a 	mov	r3,r2
   817a8:	31ffffc4 	addi	r7,r6,-1
   817ac:	30003726 	beq	r6,zero,8188c <memmove+0x120>
   817b0:	39c00044 	addi	r7,r7,1
   817b4:	29cf883a 	add	r7,r5,r7
   817b8:	29800003 	ldbu	r6,0(r5)
   817bc:	29400044 	addi	r5,r5,1
   817c0:	18c00044 	addi	r3,r3,1
   817c4:	19bfffc5 	stb	r6,-1(r3)
   817c8:	29fffb1e 	bne	r5,r7,817b8 <memmove+0x4c>
   817cc:	f800283a 	ret
   817d0:	2886b03a 	or	r3,r5,r2
   817d4:	18c000cc 	andi	r3,r3,3
   817d8:	1800291e 	bne	r3,zero,81880 <memmove+0x114>
   817dc:	327ffc04 	addi	r9,r6,-16
   817e0:	4812d13a 	srli	r9,r9,4
   817e4:	280f883a 	mov	r7,r5
   817e8:	1007883a 	mov	r3,r2
   817ec:	4a400044 	addi	r9,r9,1
   817f0:	4812913a 	slli	r9,r9,4
   817f4:	1251883a 	add	r8,r2,r9
   817f8:	39000017 	ldw	r4,0(r7)
   817fc:	39c00404 	addi	r7,r7,16
   81800:	18c00404 	addi	r3,r3,16
   81804:	193ffc15 	stw	r4,-16(r3)
   81808:	393ffd17 	ldw	r4,-12(r7)
   8180c:	193ffd15 	stw	r4,-12(r3)
   81810:	393ffe17 	ldw	r4,-8(r7)
   81814:	193ffe15 	stw	r4,-8(r3)
   81818:	393fff17 	ldw	r4,-4(r7)
   8181c:	193fff15 	stw	r4,-4(r3)
   81820:	40fff51e 	bne	r8,r3,817f8 <memmove+0x8c>
   81824:	3100030c 	andi	r4,r6,12
   81828:	2a4b883a 	add	r5,r5,r9
   8182c:	320003cc 	andi	r8,r6,15
   81830:	20001726 	beq	r4,zero,81890 <memmove+0x124>
   81834:	2813883a 	mov	r9,r5
   81838:	180f883a 	mov	r7,r3
   8183c:	4a800017 	ldw	r10,0(r9)
   81840:	39c00104 	addi	r7,r7,4
   81844:	41c9c83a 	sub	r4,r8,r7
   81848:	1909883a 	add	r4,r3,r4
   8184c:	21000128 	cmpgeui	r4,r4,4
   81850:	3abfff15 	stw	r10,-4(r7)
   81854:	4a400104 	addi	r9,r9,4
   81858:	203ff81e 	bne	r4,zero,8183c <memmove+0xd0>
   8185c:	413fff04 	addi	r4,r8,-4
   81860:	2008d0ba 	srli	r4,r4,2
   81864:	318000cc 	andi	r6,r6,3
   81868:	21000044 	addi	r4,r4,1
   8186c:	200890ba 	slli	r4,r4,2
   81870:	1907883a 	add	r3,r3,r4
   81874:	290b883a 	add	r5,r5,r4
   81878:	003fcb06 	br	817a8 <memmove+0x3c>
   8187c:	f800283a 	ret
   81880:	31ffffc4 	addi	r7,r6,-1
   81884:	1007883a 	mov	r3,r2
   81888:	003fc906 	br	817b0 <memmove+0x44>
   8188c:	f800283a 	ret
   81890:	400d883a 	mov	r6,r8
   81894:	003fc406 	br	817a8 <memmove+0x3c>

00081898 <memset>:
   81898:	20c000cc 	andi	r3,r4,3
   8189c:	2005883a 	mov	r2,r4
   818a0:	18003626 	beq	r3,zero,8197c <memset+0xe4>
   818a4:	31ffffc4 	addi	r7,r6,-1
   818a8:	30003326 	beq	r6,zero,81978 <memset+0xe0>
   818ac:	2811883a 	mov	r8,r5
   818b0:	2007883a 	mov	r3,r4
   818b4:	00000306 	br	818c4 <memset+0x2c>
   818b8:	39ffffc4 	addi	r7,r7,-1
   818bc:	39bfffe0 	cmpeqi	r6,r7,-1
   818c0:	30002d1e 	bne	r6,zero,81978 <memset+0xe0>
   818c4:	18c00044 	addi	r3,r3,1
   818c8:	198000cc 	andi	r6,r3,3
   818cc:	1a3fffc5 	stb	r8,-1(r3)
   818d0:	303ff91e 	bne	r6,zero,818b8 <memset+0x20>
   818d4:	39000130 	cmpltui	r4,r7,4
   818d8:	2000221e 	bne	r4,zero,81964 <memset+0xcc>
   818dc:	29003fcc 	andi	r4,r5,255
   818e0:	200c923a 	slli	r6,r4,8
   818e4:	3a000430 	cmpltui	r8,r7,16
   818e8:	3108b03a 	or	r4,r6,r4
   818ec:	200c943a 	slli	r6,r4,16
   818f0:	310cb03a 	or	r6,r6,r4
   818f4:	40000e1e 	bne	r8,zero,81930 <memset+0x98>
   818f8:	393ffc04 	addi	r4,r7,-16
   818fc:	2008d13a 	srli	r4,r4,4
   81900:	21000044 	addi	r4,r4,1
   81904:	2008913a 	slli	r4,r4,4
   81908:	1909883a 	add	r4,r3,r4
   8190c:	19800015 	stw	r6,0(r3)
   81910:	19800115 	stw	r6,4(r3)
   81914:	19800215 	stw	r6,8(r3)
   81918:	19800315 	stw	r6,12(r3)
   8191c:	18c00404 	addi	r3,r3,16
   81920:	20fffa1e 	bne	r4,r3,8190c <memset+0x74>
   81924:	3900030c 	andi	r4,r7,12
   81928:	39c003cc 	andi	r7,r7,15
   8192c:	20000d26 	beq	r4,zero,81964 <memset+0xcc>
   81930:	1811883a 	mov	r8,r3
   81934:	42000104 	addi	r8,r8,4
   81938:	3a09c83a 	sub	r4,r7,r8
   8193c:	1909883a 	add	r4,r3,r4
   81940:	21000128 	cmpgeui	r4,r4,4
   81944:	41bfff15 	stw	r6,-4(r8)
   81948:	203ffa1e 	bne	r4,zero,81934 <memset+0x9c>
   8194c:	393fff04 	addi	r4,r7,-4
   81950:	2008d0ba 	srli	r4,r4,2
   81954:	39c000cc 	andi	r7,r7,3
   81958:	21000044 	addi	r4,r4,1
   8195c:	200890ba 	slli	r4,r4,2
   81960:	1907883a 	add	r3,r3,r4
   81964:	38000426 	beq	r7,zero,81978 <memset+0xe0>
   81968:	19cf883a 	add	r7,r3,r7
   8196c:	18c00044 	addi	r3,r3,1
   81970:	197fffc5 	stb	r5,-1(r3)
   81974:	38fffd1e 	bne	r7,r3,8196c <memset+0xd4>
   81978:	f800283a 	ret
   8197c:	2007883a 	mov	r3,r4
   81980:	300f883a 	mov	r7,r6
   81984:	003fd306 	br	818d4 <memset+0x3c>

00081988 <_realloc_r>:
   81988:	defff504 	addi	sp,sp,-44
   8198c:	dc800315 	stw	r18,12(sp)
   81990:	dfc00a15 	stw	ra,40(sp)
   81994:	df000915 	stw	fp,36(sp)
   81998:	ddc00815 	stw	r23,32(sp)
   8199c:	dd800715 	stw	r22,28(sp)
   819a0:	dd400615 	stw	r21,24(sp)
   819a4:	dd000515 	stw	r20,20(sp)
   819a8:	dcc00415 	stw	r19,16(sp)
   819ac:	dc400215 	stw	r17,8(sp)
   819b0:	dc000115 	stw	r16,4(sp)
   819b4:	3025883a 	mov	r18,r6
   819b8:	28008b26 	beq	r5,zero,81be8 <_realloc_r+0x260>
   819bc:	2821883a 	mov	r16,r5
   819c0:	2027883a 	mov	r19,r4
   819c4:	944002c4 	addi	r17,r18,11
   819c8:	00836b80 	call	836b8 <__malloc_lock>
   819cc:	888005f0 	cmpltui	r2,r17,23
   819d0:	1000521e 	bne	r2,zero,81b1c <_realloc_r+0x194>
   819d4:	017ffe04 	movi	r5,-8
   819d8:	8962703a 	and	r17,r17,r5
   819dc:	8807883a 	mov	r3,r17
   819e0:	88005116 	blt	r17,zero,81b28 <_realloc_r+0x1a0>
   819e4:	8c805036 	bltu	r17,r18,81b28 <_realloc_r+0x1a0>
   819e8:	80bfff17 	ldw	r2,-4(r16)
   819ec:	017fff04 	movi	r5,-4
   819f0:	857ffe04 	addi	r21,r16,-8
   819f4:	1168703a 	and	r20,r2,r5
   819f8:	ad2d883a 	add	r22,r21,r20
   819fc:	a0c0390e 	bge	r20,r3,81ae4 <_realloc_r+0x15c>
   81a00:	07000234 	movhi	fp,8
   81a04:	e7170f04 	addi	fp,fp,23612
   81a08:	e2000217 	ldw	r8,8(fp)
   81a0c:	b1000117 	ldw	r4,4(r22)
   81a10:	45808e26 	beq	r8,r22,81c4c <_realloc_r+0x2c4>
   81a14:	01bfff84 	movi	r6,-2
   81a18:	218c703a 	and	r6,r4,r6
   81a1c:	b18d883a 	add	r6,r22,r6
   81a20:	31800117 	ldw	r6,4(r6)
   81a24:	3180004c 	andi	r6,r6,1
   81a28:	30004f1e 	bne	r6,zero,81b68 <_realloc_r+0x1e0>
   81a2c:	2148703a 	and	r4,r4,r5
   81a30:	a10b883a 	add	r5,r20,r4
   81a34:	28c0bf0e 	bge	r5,r3,81d34 <_realloc_r+0x3ac>
   81a38:	1080004c 	andi	r2,r2,1
   81a3c:	10004c1e 	bne	r2,zero,81b70 <_realloc_r+0x1e8>
   81a40:	81fffe17 	ldw	r7,-8(r16)
   81a44:	00bfff04 	movi	r2,-4
   81a48:	a9cfc83a 	sub	r7,r21,r7
   81a4c:	39400117 	ldw	r5,4(r7)
   81a50:	288a703a 	and	r5,r5,r2
   81a54:	b0000426 	beq	r22,zero,81a68 <_realloc_r+0xe0>
   81a58:	a16f883a 	add	r23,r20,r5
   81a5c:	b92f883a 	add	r23,r23,r4
   81a60:	4580bf26 	beq	r8,r22,81d60 <_realloc_r+0x3d8>
   81a64:	b8c0930e 	bge	r23,r3,81cb4 <_realloc_r+0x32c>
   81a68:	38004126 	beq	r7,zero,81b70 <_realloc_r+0x1e8>
   81a6c:	a16f883a 	add	r23,r20,r5
   81a70:	b8c03f16 	blt	r23,r3,81b70 <_realloc_r+0x1e8>
   81a74:	38800317 	ldw	r2,12(r7)
   81a78:	38c00217 	ldw	r3,8(r7)
   81a7c:	a1bfff04 	addi	r6,r20,-4
   81a80:	31400968 	cmpgeui	r5,r6,37
   81a84:	18800315 	stw	r2,12(r3)
   81a88:	10c00215 	stw	r3,8(r2)
   81a8c:	39000204 	addi	r4,r7,8
   81a90:	3ded883a 	add	r22,r7,r23
   81a94:	2800941e 	bne	r5,zero,81ce8 <_realloc_r+0x360>
   81a98:	30800530 	cmpltui	r2,r6,20
   81a9c:	80c00017 	ldw	r3,0(r16)
   81aa0:	1000df1e 	bne	r2,zero,81e20 <_realloc_r+0x498>
   81aa4:	38c00215 	stw	r3,8(r7)
   81aa8:	80c00117 	ldw	r3,4(r16)
   81aac:	30800728 	cmpgeui	r2,r6,28
   81ab0:	38c00315 	stw	r3,12(r7)
   81ab4:	1000dc1e 	bne	r2,zero,81e28 <_realloc_r+0x4a0>
   81ab8:	80c00217 	ldw	r3,8(r16)
   81abc:	38800404 	addi	r2,r7,16
   81ac0:	84000204 	addi	r16,r16,8
   81ac4:	10c00015 	stw	r3,0(r2)
   81ac8:	80c00117 	ldw	r3,4(r16)
   81acc:	b829883a 	mov	r20,r23
   81ad0:	382b883a 	mov	r21,r7
   81ad4:	10c00115 	stw	r3,4(r2)
   81ad8:	80c00217 	ldw	r3,8(r16)
   81adc:	2021883a 	mov	r16,r4
   81ae0:	10c00215 	stw	r3,8(r2)
   81ae4:	a9800117 	ldw	r6,4(r21)
   81ae8:	a445c83a 	sub	r2,r20,r17
   81aec:	10c00430 	cmpltui	r3,r2,16
   81af0:	3180004c 	andi	r6,r6,1
   81af4:	18004926 	beq	r3,zero,81c1c <_realloc_r+0x294>
   81af8:	a18cb03a 	or	r6,r20,r6
   81afc:	a9800115 	stw	r6,4(r21)
   81b00:	b0800117 	ldw	r2,4(r22)
   81b04:	10800054 	ori	r2,r2,1
   81b08:	b0800115 	stw	r2,4(r22)
   81b0c:	9809883a 	mov	r4,r19
   81b10:	00836dc0 	call	836dc <__malloc_unlock>
   81b14:	8025883a 	mov	r18,r16
   81b18:	00000606 	br	81b34 <_realloc_r+0x1ac>
   81b1c:	04400404 	movi	r17,16
   81b20:	00c00404 	movi	r3,16
   81b24:	8cbfb02e 	bgeu	r17,r18,819e8 <_realloc_r+0x60>
   81b28:	00800304 	movi	r2,12
   81b2c:	98800015 	stw	r2,0(r19)
   81b30:	0025883a 	mov	r18,zero
   81b34:	9005883a 	mov	r2,r18
   81b38:	dfc00a17 	ldw	ra,40(sp)
   81b3c:	df000917 	ldw	fp,36(sp)
   81b40:	ddc00817 	ldw	r23,32(sp)
   81b44:	dd800717 	ldw	r22,28(sp)
   81b48:	dd400617 	ldw	r21,24(sp)
   81b4c:	dd000517 	ldw	r20,20(sp)
   81b50:	dcc00417 	ldw	r19,16(sp)
   81b54:	dc800317 	ldw	r18,12(sp)
   81b58:	dc400217 	ldw	r17,8(sp)
   81b5c:	dc000117 	ldw	r16,4(sp)
   81b60:	dec00b04 	addi	sp,sp,44
   81b64:	f800283a 	ret
   81b68:	1080004c 	andi	r2,r2,1
   81b6c:	10006c26 	beq	r2,zero,81d20 <_realloc_r+0x398>
   81b70:	900b883a 	mov	r5,r18
   81b74:	9809883a 	mov	r4,r19
   81b78:	0080dbc0 	call	80dbc <_malloc_r>
   81b7c:	1025883a 	mov	r18,r2
   81b80:	10001626 	beq	r2,zero,81bdc <_realloc_r+0x254>
   81b84:	80bfff17 	ldw	r2,-4(r16)
   81b88:	013fff84 	movi	r4,-2
   81b8c:	90fffe04 	addi	r3,r18,-8
   81b90:	1104703a 	and	r2,r2,r4
   81b94:	a885883a 	add	r2,r21,r2
   81b98:	10c05b26 	beq	r2,r3,81d08 <_realloc_r+0x380>
   81b9c:	a1bfff04 	addi	r6,r20,-4
   81ba0:	30800968 	cmpgeui	r2,r6,37
   81ba4:	10006a1e 	bne	r2,zero,81d50 <_realloc_r+0x3c8>
   81ba8:	30800530 	cmpltui	r2,r6,20
   81bac:	81000017 	ldw	r4,0(r16)
   81bb0:	10003726 	beq	r2,zero,81c90 <_realloc_r+0x308>
   81bb4:	9005883a 	mov	r2,r18
   81bb8:	8007883a 	mov	r3,r16
   81bbc:	11000015 	stw	r4,0(r2)
   81bc0:	19000117 	ldw	r4,4(r3)
   81bc4:	11000115 	stw	r4,4(r2)
   81bc8:	18c00217 	ldw	r3,8(r3)
   81bcc:	10c00215 	stw	r3,8(r2)
   81bd0:	800b883a 	mov	r5,r16
   81bd4:	9809883a 	mov	r4,r19
   81bd8:	008286c0 	call	8286c <_free_r>
   81bdc:	9809883a 	mov	r4,r19
   81be0:	00836dc0 	call	836dc <__malloc_unlock>
   81be4:	003fd306 	br	81b34 <_realloc_r+0x1ac>
   81be8:	300b883a 	mov	r5,r6
   81bec:	dfc00a17 	ldw	ra,40(sp)
   81bf0:	df000917 	ldw	fp,36(sp)
   81bf4:	ddc00817 	ldw	r23,32(sp)
   81bf8:	dd800717 	ldw	r22,28(sp)
   81bfc:	dd400617 	ldw	r21,24(sp)
   81c00:	dd000517 	ldw	r20,20(sp)
   81c04:	dcc00417 	ldw	r19,16(sp)
   81c08:	dc800317 	ldw	r18,12(sp)
   81c0c:	dc400217 	ldw	r17,8(sp)
   81c10:	dc000117 	ldw	r16,4(sp)
   81c14:	dec00b04 	addi	sp,sp,44
   81c18:	0080dbc1 	jmpi	80dbc <_malloc_r>
   81c1c:	344cb03a 	or	r6,r6,r17
   81c20:	a9800115 	stw	r6,4(r21)
   81c24:	ac4b883a 	add	r5,r21,r17
   81c28:	10800054 	ori	r2,r2,1
   81c2c:	28800115 	stw	r2,4(r5)
   81c30:	b0800117 	ldw	r2,4(r22)
   81c34:	29400204 	addi	r5,r5,8
   81c38:	9809883a 	mov	r4,r19
   81c3c:	10800054 	ori	r2,r2,1
   81c40:	b0800115 	stw	r2,4(r22)
   81c44:	008286c0 	call	8286c <_free_r>
   81c48:	003fb006 	br	81b0c <_realloc_r+0x184>
   81c4c:	2148703a 	and	r4,r4,r5
   81c50:	a10b883a 	add	r5,r20,r4
   81c54:	89800404 	addi	r6,r17,16
   81c58:	29bf7716 	blt	r5,r6,81a38 <_realloc_r+0xb0>
   81c5c:	ac6b883a 	add	r21,r21,r17
   81c60:	2c45c83a 	sub	r2,r5,r17
   81c64:	e5400215 	stw	r21,8(fp)
   81c68:	10800054 	ori	r2,r2,1
   81c6c:	a8800115 	stw	r2,4(r21)
   81c70:	80bfff17 	ldw	r2,-4(r16)
   81c74:	9809883a 	mov	r4,r19
   81c78:	8025883a 	mov	r18,r16
   81c7c:	1080004c 	andi	r2,r2,1
   81c80:	1462b03a 	or	r17,r2,r17
   81c84:	847fff15 	stw	r17,-4(r16)
   81c88:	00836dc0 	call	836dc <__malloc_unlock>
   81c8c:	003fa906 	br	81b34 <_realloc_r+0x1ac>
   81c90:	91000015 	stw	r4,0(r18)
   81c94:	80c00117 	ldw	r3,4(r16)
   81c98:	30800728 	cmpgeui	r2,r6,28
   81c9c:	90c00115 	stw	r3,4(r18)
   81ca0:	1000551e 	bne	r2,zero,81df8 <_realloc_r+0x470>
   81ca4:	81000217 	ldw	r4,8(r16)
   81ca8:	80c00204 	addi	r3,r16,8
   81cac:	90800204 	addi	r2,r18,8
   81cb0:	003fc206 	br	81bbc <_realloc_r+0x234>
   81cb4:	b0800317 	ldw	r2,12(r22)
   81cb8:	b0c00217 	ldw	r3,8(r22)
   81cbc:	a1bfff04 	addi	r6,r20,-4
   81cc0:	31400968 	cmpgeui	r5,r6,37
   81cc4:	18800315 	stw	r2,12(r3)
   81cc8:	10c00215 	stw	r3,8(r2)
   81ccc:	38c00217 	ldw	r3,8(r7)
   81cd0:	38800317 	ldw	r2,12(r7)
   81cd4:	39000204 	addi	r4,r7,8
   81cd8:	3ded883a 	add	r22,r7,r23
   81cdc:	18800315 	stw	r2,12(r3)
   81ce0:	10c00215 	stw	r3,8(r2)
   81ce4:	283f6c26 	beq	r5,zero,81a98 <_realloc_r+0x110>
   81ce8:	800b883a 	mov	r5,r16
   81cec:	d9c00015 	stw	r7,0(sp)
   81cf0:	008176c0 	call	8176c <memmove>
   81cf4:	d9c00017 	ldw	r7,0(sp)
   81cf8:	1021883a 	mov	r16,r2
   81cfc:	b829883a 	mov	r20,r23
   81d00:	382b883a 	mov	r21,r7
   81d04:	003f7706 	br	81ae4 <_realloc_r+0x15c>
   81d08:	90bfff17 	ldw	r2,-4(r18)
   81d0c:	00ffff04 	movi	r3,-4
   81d10:	10c4703a 	and	r2,r2,r3
   81d14:	a0a9883a 	add	r20,r20,r2
   81d18:	ad2d883a 	add	r22,r21,r20
   81d1c:	003f7106 	br	81ae4 <_realloc_r+0x15c>
   81d20:	81fffe17 	ldw	r7,-8(r16)
   81d24:	a9cfc83a 	sub	r7,r21,r7
   81d28:	38800117 	ldw	r2,4(r7)
   81d2c:	114a703a 	and	r5,r2,r5
   81d30:	003f4d06 	br	81a68 <_realloc_r+0xe0>
   81d34:	b0800317 	ldw	r2,12(r22)
   81d38:	b0c00217 	ldw	r3,8(r22)
   81d3c:	2829883a 	mov	r20,r5
   81d40:	a96d883a 	add	r22,r21,r5
   81d44:	18800315 	stw	r2,12(r3)
   81d48:	10c00215 	stw	r3,8(r2)
   81d4c:	003f6506 	br	81ae4 <_realloc_r+0x15c>
   81d50:	800b883a 	mov	r5,r16
   81d54:	9009883a 	mov	r4,r18
   81d58:	008176c0 	call	8176c <memmove>
   81d5c:	003f9c06 	br	81bd0 <_realloc_r+0x248>
   81d60:	88800404 	addi	r2,r17,16
   81d64:	b8bf4016 	blt	r23,r2,81a68 <_realloc_r+0xe0>
   81d68:	38800317 	ldw	r2,12(r7)
   81d6c:	38c00217 	ldw	r3,8(r7)
   81d70:	a1bfff04 	addi	r6,r20,-4
   81d74:	31000968 	cmpgeui	r4,r6,37
   81d78:	18800315 	stw	r2,12(r3)
   81d7c:	10c00215 	stw	r3,8(r2)
   81d80:	3c800204 	addi	r18,r7,8
   81d84:	20003b1e 	bne	r4,zero,81e74 <_realloc_r+0x4ec>
   81d88:	30800530 	cmpltui	r2,r6,20
   81d8c:	80c00017 	ldw	r3,0(r16)
   81d90:	1000361e 	bne	r2,zero,81e6c <_realloc_r+0x4e4>
   81d94:	38c00215 	stw	r3,8(r7)
   81d98:	80c00117 	ldw	r3,4(r16)
   81d9c:	30800728 	cmpgeui	r2,r6,28
   81da0:	38c00315 	stw	r3,12(r7)
   81da4:	1000401e 	bne	r2,zero,81ea8 <_realloc_r+0x520>
   81da8:	80c00217 	ldw	r3,8(r16)
   81dac:	38800404 	addi	r2,r7,16
   81db0:	84000204 	addi	r16,r16,8
   81db4:	10c00015 	stw	r3,0(r2)
   81db8:	80c00117 	ldw	r3,4(r16)
   81dbc:	10c00115 	stw	r3,4(r2)
   81dc0:	80c00217 	ldw	r3,8(r16)
   81dc4:	10c00215 	stw	r3,8(r2)
   81dc8:	3c47883a 	add	r3,r7,r17
   81dcc:	bc45c83a 	sub	r2,r23,r17
   81dd0:	e0c00215 	stw	r3,8(fp)
   81dd4:	10800054 	ori	r2,r2,1
   81dd8:	18800115 	stw	r2,4(r3)
   81ddc:	38800117 	ldw	r2,4(r7)
   81de0:	9809883a 	mov	r4,r19
   81de4:	1080004c 	andi	r2,r2,1
   81de8:	1462b03a 	or	r17,r2,r17
   81dec:	3c400115 	stw	r17,4(r7)
   81df0:	00836dc0 	call	836dc <__malloc_unlock>
   81df4:	003f4f06 	br	81b34 <_realloc_r+0x1ac>
   81df8:	80800217 	ldw	r2,8(r16)
   81dfc:	31800920 	cmpeqi	r6,r6,36
   81e00:	90800215 	stw	r2,8(r18)
   81e04:	80800317 	ldw	r2,12(r16)
   81e08:	90800315 	stw	r2,12(r18)
   81e0c:	81000417 	ldw	r4,16(r16)
   81e10:	30000f1e 	bne	r6,zero,81e50 <_realloc_r+0x4c8>
   81e14:	80c00404 	addi	r3,r16,16
   81e18:	90800404 	addi	r2,r18,16
   81e1c:	003f6706 	br	81bbc <_realloc_r+0x234>
   81e20:	2005883a 	mov	r2,r4
   81e24:	003f2706 	br	81ac4 <_realloc_r+0x13c>
   81e28:	80800217 	ldw	r2,8(r16)
   81e2c:	31800920 	cmpeqi	r6,r6,36
   81e30:	38800415 	stw	r2,16(r7)
   81e34:	80800317 	ldw	r2,12(r16)
   81e38:	38800515 	stw	r2,20(r7)
   81e3c:	80c00417 	ldw	r3,16(r16)
   81e40:	3000121e 	bne	r6,zero,81e8c <_realloc_r+0x504>
   81e44:	38800604 	addi	r2,r7,24
   81e48:	84000404 	addi	r16,r16,16
   81e4c:	003f1d06 	br	81ac4 <_realloc_r+0x13c>
   81e50:	91000415 	stw	r4,16(r18)
   81e54:	81000517 	ldw	r4,20(r16)
   81e58:	80c00604 	addi	r3,r16,24
   81e5c:	90800604 	addi	r2,r18,24
   81e60:	91000515 	stw	r4,20(r18)
   81e64:	81000617 	ldw	r4,24(r16)
   81e68:	003f5406 	br	81bbc <_realloc_r+0x234>
   81e6c:	9005883a 	mov	r2,r18
   81e70:	003fd006 	br	81db4 <_realloc_r+0x42c>
   81e74:	800b883a 	mov	r5,r16
   81e78:	9009883a 	mov	r4,r18
   81e7c:	d9c00015 	stw	r7,0(sp)
   81e80:	008176c0 	call	8176c <memmove>
   81e84:	d9c00017 	ldw	r7,0(sp)
   81e88:	003fcf06 	br	81dc8 <_realloc_r+0x440>
   81e8c:	84000604 	addi	r16,r16,24
   81e90:	38c00615 	stw	r3,24(r7)
   81e94:	80ffff17 	ldw	r3,-4(r16)
   81e98:	38800804 	addi	r2,r7,32
   81e9c:	38c00715 	stw	r3,28(r7)
   81ea0:	80c00017 	ldw	r3,0(r16)
   81ea4:	003f0706 	br	81ac4 <_realloc_r+0x13c>
   81ea8:	80800217 	ldw	r2,8(r16)
   81eac:	31800920 	cmpeqi	r6,r6,36
   81eb0:	38800415 	stw	r2,16(r7)
   81eb4:	80800317 	ldw	r2,12(r16)
   81eb8:	38800515 	stw	r2,20(r7)
   81ebc:	80c00417 	ldw	r3,16(r16)
   81ec0:	3000031e 	bne	r6,zero,81ed0 <_realloc_r+0x548>
   81ec4:	38800604 	addi	r2,r7,24
   81ec8:	84000404 	addi	r16,r16,16
   81ecc:	003fb906 	br	81db4 <_realloc_r+0x42c>
   81ed0:	84000604 	addi	r16,r16,24
   81ed4:	38c00615 	stw	r3,24(r7)
   81ed8:	80ffff17 	ldw	r3,-4(r16)
   81edc:	38800804 	addi	r2,r7,32
   81ee0:	38c00715 	stw	r3,28(r7)
   81ee4:	80c00017 	ldw	r3,0(r16)
   81ee8:	003fb206 	br	81db4 <_realloc_r+0x42c>

00081eec <_sbrk_r>:
   81eec:	defffe04 	addi	sp,sp,-8
   81ef0:	dc000015 	stw	r16,0(sp)
   81ef4:	00800274 	movhi	r2,9
   81ef8:	2021883a 	mov	r16,r4
   81efc:	2809883a 	mov	r4,r5
   81f00:	dfc00115 	stw	ra,4(sp)
   81f04:	10233f15 	stw	zero,-29444(r2)
   81f08:	00838b40 	call	838b4 <sbrk>
   81f0c:	10ffffd8 	cmpnei	r3,r2,-1
   81f10:	18000426 	beq	r3,zero,81f24 <_sbrk_r+0x38>
   81f14:	dfc00117 	ldw	ra,4(sp)
   81f18:	dc000017 	ldw	r16,0(sp)
   81f1c:	dec00204 	addi	sp,sp,8
   81f20:	f800283a 	ret
   81f24:	00c00274 	movhi	r3,9
   81f28:	18e33f17 	ldw	r3,-29444(r3)
   81f2c:	183ff926 	beq	r3,zero,81f14 <_sbrk_r+0x28>
   81f30:	80c00015 	stw	r3,0(r16)
   81f34:	dfc00117 	ldw	ra,4(sp)
   81f38:	dc000017 	ldw	r16,0(sp)
   81f3c:	dec00204 	addi	sp,sp,8
   81f40:	f800283a 	ret

00081f44 <__sread>:
   81f44:	defffe04 	addi	sp,sp,-8
   81f48:	dc000015 	stw	r16,0(sp)
   81f4c:	2821883a 	mov	r16,r5
   81f50:	2940038f 	ldh	r5,14(r5)
   81f54:	dfc00115 	stw	ra,4(sp)
   81f58:	0082e140 	call	82e14 <_read_r>
   81f5c:	10000716 	blt	r2,zero,81f7c <__sread+0x38>
   81f60:	80c01417 	ldw	r3,80(r16)
   81f64:	1887883a 	add	r3,r3,r2
   81f68:	80c01415 	stw	r3,80(r16)
   81f6c:	dfc00117 	ldw	ra,4(sp)
   81f70:	dc000017 	ldw	r16,0(sp)
   81f74:	dec00204 	addi	sp,sp,8
   81f78:	f800283a 	ret
   81f7c:	80c0030b 	ldhu	r3,12(r16)
   81f80:	18fbffcc 	andi	r3,r3,61439
   81f84:	80c0030d 	sth	r3,12(r16)
   81f88:	dfc00117 	ldw	ra,4(sp)
   81f8c:	dc000017 	ldw	r16,0(sp)
   81f90:	dec00204 	addi	sp,sp,8
   81f94:	f800283a 	ret

00081f98 <__seofread>:
   81f98:	0005883a 	mov	r2,zero
   81f9c:	f800283a 	ret

00081fa0 <__swrite>:
   81fa0:	2880030b 	ldhu	r2,12(r5)
   81fa4:	defffb04 	addi	sp,sp,-20
   81fa8:	dcc00315 	stw	r19,12(sp)
   81fac:	dc800215 	stw	r18,8(sp)
   81fb0:	dc400115 	stw	r17,4(sp)
   81fb4:	dc000015 	stw	r16,0(sp)
   81fb8:	dfc00415 	stw	ra,16(sp)
   81fbc:	10c0400c 	andi	r3,r2,256
   81fc0:	2821883a 	mov	r16,r5
   81fc4:	2023883a 	mov	r17,r4
   81fc8:	2940038f 	ldh	r5,14(r5)
   81fcc:	3025883a 	mov	r18,r6
   81fd0:	3827883a 	mov	r19,r7
   81fd4:	18000c1e 	bne	r3,zero,82008 <__swrite+0x68>
   81fd8:	10bbffcc 	andi	r2,r2,61439
   81fdc:	980f883a 	mov	r7,r19
   81fe0:	900d883a 	mov	r6,r18
   81fe4:	8809883a 	mov	r4,r17
   81fe8:	8080030d 	sth	r2,12(r16)
   81fec:	dfc00417 	ldw	ra,16(sp)
   81ff0:	dcc00317 	ldw	r19,12(sp)
   81ff4:	dc800217 	ldw	r18,8(sp)
   81ff8:	dc400117 	ldw	r17,4(sp)
   81ffc:	dc000017 	ldw	r16,0(sp)
   82000:	dec00504 	addi	sp,sp,20
   82004:	00820841 	jmpi	82084 <_write_r>
   82008:	01c00084 	movi	r7,2
   8200c:	000d883a 	mov	r6,zero
   82010:	0082b680 	call	82b68 <_lseek_r>
   82014:	8080030b 	ldhu	r2,12(r16)
   82018:	8140038f 	ldh	r5,14(r16)
   8201c:	003fee06 	br	81fd8 <__swrite+0x38>

00082020 <__sseek>:
   82020:	defffe04 	addi	sp,sp,-8
   82024:	dc000015 	stw	r16,0(sp)
   82028:	2821883a 	mov	r16,r5
   8202c:	2940038f 	ldh	r5,14(r5)
   82030:	dfc00115 	stw	ra,4(sp)
   82034:	0082b680 	call	82b68 <_lseek_r>
   82038:	10ffffd8 	cmpnei	r3,r2,-1
   8203c:	18000826 	beq	r3,zero,82060 <__sseek+0x40>
   82040:	80c0030b 	ldhu	r3,12(r16)
   82044:	80801415 	stw	r2,80(r16)
   82048:	18c40014 	ori	r3,r3,4096
   8204c:	80c0030d 	sth	r3,12(r16)
   82050:	dfc00117 	ldw	ra,4(sp)
   82054:	dc000017 	ldw	r16,0(sp)
   82058:	dec00204 	addi	sp,sp,8
   8205c:	f800283a 	ret
   82060:	80c0030b 	ldhu	r3,12(r16)
   82064:	18fbffcc 	andi	r3,r3,61439
   82068:	80c0030d 	sth	r3,12(r16)
   8206c:	dfc00117 	ldw	ra,4(sp)
   82070:	dc000017 	ldw	r16,0(sp)
   82074:	dec00204 	addi	sp,sp,8
   82078:	f800283a 	ret

0008207c <__sclose>:
   8207c:	2940038f 	ldh	r5,14(r5)
   82080:	008224c1 	jmpi	8224c <_close_r>

00082084 <_write_r>:
   82084:	2807883a 	mov	r3,r5
   82088:	defffe04 	addi	sp,sp,-8
   8208c:	dc000015 	stw	r16,0(sp)
   82090:	300b883a 	mov	r5,r6
   82094:	00800274 	movhi	r2,9
   82098:	380d883a 	mov	r6,r7
   8209c:	2021883a 	mov	r16,r4
   820a0:	1809883a 	mov	r4,r3
   820a4:	dfc00115 	stw	ra,4(sp)
   820a8:	10233f15 	stw	zero,-29444(r2)
   820ac:	00839a80 	call	839a8 <write>
   820b0:	10ffffd8 	cmpnei	r3,r2,-1
   820b4:	18000426 	beq	r3,zero,820c8 <_write_r+0x44>
   820b8:	dfc00117 	ldw	ra,4(sp)
   820bc:	dc000017 	ldw	r16,0(sp)
   820c0:	dec00204 	addi	sp,sp,8
   820c4:	f800283a 	ret
   820c8:	00c00274 	movhi	r3,9
   820cc:	18e33f17 	ldw	r3,-29444(r3)
   820d0:	183ff926 	beq	r3,zero,820b8 <_write_r+0x34>
   820d4:	80c00015 	stw	r3,0(r16)
   820d8:	dfc00117 	ldw	ra,4(sp)
   820dc:	dc000017 	ldw	r16,0(sp)
   820e0:	dec00204 	addi	sp,sp,8
   820e4:	f800283a 	ret

000820e8 <__swsetup_r>:
   820e8:	00800234 	movhi	r2,8
   820ec:	109c9417 	ldw	r2,29264(r2)
   820f0:	defffd04 	addi	sp,sp,-12
   820f4:	dc400115 	stw	r17,4(sp)
   820f8:	dc000015 	stw	r16,0(sp)
   820fc:	dfc00215 	stw	ra,8(sp)
   82100:	2023883a 	mov	r17,r4
   82104:	2821883a 	mov	r16,r5
   82108:	10000226 	beq	r2,zero,82114 <__swsetup_r+0x2c>
   8210c:	10c00e17 	ldw	r3,56(r2)
   82110:	18001f26 	beq	r3,zero,82190 <__swsetup_r+0xa8>
   82114:	8180030b 	ldhu	r6,12(r16)
   82118:	30c0020c 	andi	r3,r6,8
   8211c:	3005883a 	mov	r2,r6
   82120:	18002126 	beq	r3,zero,821a8 <__swsetup_r+0xc0>
   82124:	80c00417 	ldw	r3,16(r16)
   82128:	18002826 	beq	r3,zero,821cc <__swsetup_r+0xe4>
   8212c:	1100004c 	andi	r4,r2,1
   82130:	20000b1e 	bne	r4,zero,82160 <__swsetup_r+0x78>
   82134:	1100008c 	andi	r4,r2,2
   82138:	20002e1e 	bne	r4,zero,821f4 <__swsetup_r+0x10c>
   8213c:	81000517 	ldw	r4,20(r16)
   82140:	81000215 	stw	r4,8(r16)
   82144:	18000b26 	beq	r3,zero,82174 <__swsetup_r+0x8c>
   82148:	0005883a 	mov	r2,zero
   8214c:	dfc00217 	ldw	ra,8(sp)
   82150:	dc400117 	ldw	r17,4(sp)
   82154:	dc000017 	ldw	r16,0(sp)
   82158:	dec00304 	addi	sp,sp,12
   8215c:	f800283a 	ret
   82160:	81000517 	ldw	r4,20(r16)
   82164:	80000215 	stw	zero,8(r16)
   82168:	0109c83a 	sub	r4,zero,r4
   8216c:	81000615 	stw	r4,24(r16)
   82170:	183ff51e 	bne	r3,zero,82148 <__swsetup_r+0x60>
   82174:	10c0200c 	andi	r3,r2,128
   82178:	0005883a 	mov	r2,zero
   8217c:	183ff326 	beq	r3,zero,8214c <__swsetup_r+0x64>
   82180:	31801014 	ori	r6,r6,64
   82184:	8180030d 	sth	r6,12(r16)
   82188:	00bfffc4 	movi	r2,-1
   8218c:	003fef06 	br	8214c <__swsetup_r+0x64>
   82190:	1009883a 	mov	r4,r2
   82194:	008076c0 	call	8076c <__sinit>
   82198:	8180030b 	ldhu	r6,12(r16)
   8219c:	30c0020c 	andi	r3,r6,8
   821a0:	3005883a 	mov	r2,r6
   821a4:	183fdf1e 	bne	r3,zero,82124 <__swsetup_r+0x3c>
   821a8:	3080040c 	andi	r2,r6,16
   821ac:	10002126 	beq	r2,zero,82234 <__swsetup_r+0x14c>
   821b0:	3080010c 	andi	r2,r6,4
   821b4:	1000111e 	bne	r2,zero,821fc <__swsetup_r+0x114>
   821b8:	80c00417 	ldw	r3,16(r16)
   821bc:	30800214 	ori	r2,r6,8
   821c0:	8080030d 	sth	r2,12(r16)
   821c4:	100d883a 	mov	r6,r2
   821c8:	183fd81e 	bne	r3,zero,8212c <__swsetup_r+0x44>
   821cc:	1100a00c 	andi	r4,r2,640
   821d0:	21008020 	cmpeqi	r4,r4,512
   821d4:	203fd51e 	bne	r4,zero,8212c <__swsetup_r+0x44>
   821d8:	800b883a 	mov	r5,r16
   821dc:	8809883a 	mov	r4,r17
   821e0:	0082bcc0 	call	82bcc <__smakebuf_r>
   821e4:	8180030b 	ldhu	r6,12(r16)
   821e8:	80c00417 	ldw	r3,16(r16)
   821ec:	3005883a 	mov	r2,r6
   821f0:	003fce06 	br	8212c <__swsetup_r+0x44>
   821f4:	0009883a 	mov	r4,zero
   821f8:	003fd106 	br	82140 <__swsetup_r+0x58>
   821fc:	81400c17 	ldw	r5,48(r16)
   82200:	28000626 	beq	r5,zero,8221c <__swsetup_r+0x134>
   82204:	80801004 	addi	r2,r16,64
   82208:	28800326 	beq	r5,r2,82218 <__swsetup_r+0x130>
   8220c:	8809883a 	mov	r4,r17
   82210:	008286c0 	call	8286c <_free_r>
   82214:	8180030b 	ldhu	r6,12(r16)
   82218:	80000c15 	stw	zero,48(r16)
   8221c:	80c00417 	ldw	r3,16(r16)
   82220:	00bff6c4 	movi	r2,-37
   82224:	118c703a 	and	r6,r2,r6
   82228:	80000115 	stw	zero,4(r16)
   8222c:	80c00015 	stw	r3,0(r16)
   82230:	003fe206 	br	821bc <__swsetup_r+0xd4>
   82234:	00800244 	movi	r2,9
   82238:	88800015 	stw	r2,0(r17)
   8223c:	31801014 	ori	r6,r6,64
   82240:	8180030d 	sth	r6,12(r16)
   82244:	00bfffc4 	movi	r2,-1
   82248:	003fc006 	br	8214c <__swsetup_r+0x64>

0008224c <_close_r>:
   8224c:	defffe04 	addi	sp,sp,-8
   82250:	dc000015 	stw	r16,0(sp)
   82254:	00800274 	movhi	r2,9
   82258:	2021883a 	mov	r16,r4
   8225c:	2809883a 	mov	r4,r5
   82260:	dfc00115 	stw	ra,4(sp)
   82264:	10233f15 	stw	zero,-29444(r2)
   82268:	00831480 	call	83148 <close>
   8226c:	10ffffd8 	cmpnei	r3,r2,-1
   82270:	18000426 	beq	r3,zero,82284 <_close_r+0x38>
   82274:	dfc00117 	ldw	ra,4(sp)
   82278:	dc000017 	ldw	r16,0(sp)
   8227c:	dec00204 	addi	sp,sp,8
   82280:	f800283a 	ret
   82284:	00c00274 	movhi	r3,9
   82288:	18e33f17 	ldw	r3,-29444(r3)
   8228c:	183ff926 	beq	r3,zero,82274 <_close_r+0x28>
   82290:	80c00015 	stw	r3,0(r16)
   82294:	dfc00117 	ldw	ra,4(sp)
   82298:	dc000017 	ldw	r16,0(sp)
   8229c:	dec00204 	addi	sp,sp,8
   822a0:	f800283a 	ret

000822a4 <_fclose_r.part.0>:
   822a4:	defffc04 	addi	sp,sp,-16
   822a8:	dc800215 	stw	r18,8(sp)
   822ac:	dc400115 	stw	r17,4(sp)
   822b0:	dc000015 	stw	r16,0(sp)
   822b4:	dfc00315 	stw	ra,12(sp)
   822b8:	2821883a 	mov	r16,r5
   822bc:	2023883a 	mov	r17,r4
   822c0:	00824440 	call	82444 <__sflush_r>
   822c4:	80c00b17 	ldw	r3,44(r16)
   822c8:	1025883a 	mov	r18,r2
   822cc:	18000426 	beq	r3,zero,822e0 <_fclose_r.part.0+0x3c>
   822d0:	81400717 	ldw	r5,28(r16)
   822d4:	8809883a 	mov	r4,r17
   822d8:	183ee83a 	callr	r3
   822dc:	10001916 	blt	r2,zero,82344 <_fclose_r.part.0+0xa0>
   822e0:	8080030b 	ldhu	r2,12(r16)
   822e4:	1080200c 	andi	r2,r2,128
   822e8:	10001a1e 	bne	r2,zero,82354 <_fclose_r.part.0+0xb0>
   822ec:	81400c17 	ldw	r5,48(r16)
   822f0:	28000526 	beq	r5,zero,82308 <_fclose_r.part.0+0x64>
   822f4:	80801004 	addi	r2,r16,64
   822f8:	28800226 	beq	r5,r2,82304 <_fclose_r.part.0+0x60>
   822fc:	8809883a 	mov	r4,r17
   82300:	008286c0 	call	8286c <_free_r>
   82304:	80000c15 	stw	zero,48(r16)
   82308:	81401117 	ldw	r5,68(r16)
   8230c:	28000326 	beq	r5,zero,8231c <_fclose_r.part.0+0x78>
   82310:	8809883a 	mov	r4,r17
   82314:	008286c0 	call	8286c <_free_r>
   82318:	80001115 	stw	zero,68(r16)
   8231c:	008077c0 	call	8077c <__sfp_lock_acquire>
   82320:	8000030d 	sth	zero,12(r16)
   82324:	00807800 	call	80780 <__sfp_lock_release>
   82328:	9005883a 	mov	r2,r18
   8232c:	dfc00317 	ldw	ra,12(sp)
   82330:	dc800217 	ldw	r18,8(sp)
   82334:	dc400117 	ldw	r17,4(sp)
   82338:	dc000017 	ldw	r16,0(sp)
   8233c:	dec00404 	addi	sp,sp,16
   82340:	f800283a 	ret
   82344:	8080030b 	ldhu	r2,12(r16)
   82348:	04bfffc4 	movi	r18,-1
   8234c:	1080200c 	andi	r2,r2,128
   82350:	103fe626 	beq	r2,zero,822ec <_fclose_r.part.0+0x48>
   82354:	81400417 	ldw	r5,16(r16)
   82358:	8809883a 	mov	r4,r17
   8235c:	008286c0 	call	8286c <_free_r>
   82360:	003fe206 	br	822ec <_fclose_r.part.0+0x48>

00082364 <_fclose_r>:
   82364:	28001926 	beq	r5,zero,823cc <_fclose_r+0x68>
   82368:	defffd04 	addi	sp,sp,-12
   8236c:	dc000115 	stw	r16,4(sp)
   82370:	dfc00215 	stw	ra,8(sp)
   82374:	2021883a 	mov	r16,r4
   82378:	20000226 	beq	r4,zero,82384 <_fclose_r+0x20>
   8237c:	20800e17 	ldw	r2,56(r4)
   82380:	10000c26 	beq	r2,zero,823b4 <_fclose_r+0x50>
   82384:	2880030f 	ldh	r2,12(r5)
   82388:	1000051e 	bne	r2,zero,823a0 <_fclose_r+0x3c>
   8238c:	0005883a 	mov	r2,zero
   82390:	dfc00217 	ldw	ra,8(sp)
   82394:	dc000117 	ldw	r16,4(sp)
   82398:	dec00304 	addi	sp,sp,12
   8239c:	f800283a 	ret
   823a0:	8009883a 	mov	r4,r16
   823a4:	dfc00217 	ldw	ra,8(sp)
   823a8:	dc000117 	ldw	r16,4(sp)
   823ac:	dec00304 	addi	sp,sp,12
   823b0:	00822a41 	jmpi	822a4 <_fclose_r.part.0>
   823b4:	d9400015 	stw	r5,0(sp)
   823b8:	008076c0 	call	8076c <__sinit>
   823bc:	d9400017 	ldw	r5,0(sp)
   823c0:	2880030f 	ldh	r2,12(r5)
   823c4:	103ff126 	beq	r2,zero,8238c <_fclose_r+0x28>
   823c8:	003ff506 	br	823a0 <_fclose_r+0x3c>
   823cc:	0005883a 	mov	r2,zero
   823d0:	f800283a 	ret

000823d4 <fclose>:
   823d4:	20000826 	beq	r4,zero,823f8 <fclose+0x24>
   823d8:	00800234 	movhi	r2,8
   823dc:	200b883a 	mov	r5,r4
   823e0:	111c9417 	ldw	r4,29264(r2)
   823e4:	20000226 	beq	r4,zero,823f0 <fclose+0x1c>
   823e8:	20800e17 	ldw	r2,56(r4)
   823ec:	10000526 	beq	r2,zero,82404 <fclose+0x30>
   823f0:	2880030f 	ldh	r2,12(r5)
   823f4:	1000021e 	bne	r2,zero,82400 <fclose+0x2c>
   823f8:	0005883a 	mov	r2,zero
   823fc:	f800283a 	ret
   82400:	00822a41 	jmpi	822a4 <_fclose_r.part.0>
   82404:	defffd04 	addi	sp,sp,-12
   82408:	d9400115 	stw	r5,4(sp)
   8240c:	d9000015 	stw	r4,0(sp)
   82410:	dfc00215 	stw	ra,8(sp)
   82414:	008076c0 	call	8076c <__sinit>
   82418:	d9400117 	ldw	r5,4(sp)
   8241c:	d9000017 	ldw	r4,0(sp)
   82420:	2880030f 	ldh	r2,12(r5)
   82424:	10000326 	beq	r2,zero,82434 <fclose+0x60>
   82428:	dfc00217 	ldw	ra,8(sp)
   8242c:	dec00304 	addi	sp,sp,12
   82430:	00822a41 	jmpi	822a4 <_fclose_r.part.0>
   82434:	0005883a 	mov	r2,zero
   82438:	dfc00217 	ldw	ra,8(sp)
   8243c:	dec00304 	addi	sp,sp,12
   82440:	f800283a 	ret

00082444 <__sflush_r>:
   82444:	2880030b 	ldhu	r2,12(r5)
   82448:	defffb04 	addi	sp,sp,-20
   8244c:	dcc00315 	stw	r19,12(sp)
   82450:	dc000015 	stw	r16,0(sp)
   82454:	dfc00415 	stw	ra,16(sp)
   82458:	dc800215 	stw	r18,8(sp)
   8245c:	dc400115 	stw	r17,4(sp)
   82460:	10c0020c 	andi	r3,r2,8
   82464:	2821883a 	mov	r16,r5
   82468:	2027883a 	mov	r19,r4
   8246c:	18003f1e 	bne	r3,zero,8256c <__sflush_r+0x128>
   82470:	28c00117 	ldw	r3,4(r5)
   82474:	10820014 	ori	r2,r2,2048
   82478:	2880030d 	sth	r2,12(r5)
   8247c:	00c0550e 	bge	zero,r3,825d4 <__sflush_r+0x190>
   82480:	82000a17 	ldw	r8,40(r16)
   82484:	40003126 	beq	r8,zero,8254c <__sflush_r+0x108>
   82488:	9c400017 	ldw	r17,0(r19)
   8248c:	1104000c 	andi	r4,r2,4096
   82490:	98000015 	stw	zero,0(r19)
   82494:	81400717 	ldw	r5,28(r16)
   82498:	1007883a 	mov	r3,r2
   8249c:	2000521e 	bne	r4,zero,825e8 <__sflush_r+0x1a4>
   824a0:	01c00044 	movi	r7,1
   824a4:	000d883a 	mov	r6,zero
   824a8:	9809883a 	mov	r4,r19
   824ac:	403ee83a 	callr	r8
   824b0:	10ffffd8 	cmpnei	r3,r2,-1
   824b4:	18005826 	beq	r3,zero,82618 <__sflush_r+0x1d4>
   824b8:	80c0030b 	ldhu	r3,12(r16)
   824bc:	82000a17 	ldw	r8,40(r16)
   824c0:	81400717 	ldw	r5,28(r16)
   824c4:	18c0010c 	andi	r3,r3,4
   824c8:	18000626 	beq	r3,zero,824e4 <__sflush_r+0xa0>
   824cc:	81000117 	ldw	r4,4(r16)
   824d0:	80c00c17 	ldw	r3,48(r16)
   824d4:	1105c83a 	sub	r2,r2,r4
   824d8:	18000226 	beq	r3,zero,824e4 <__sflush_r+0xa0>
   824dc:	80c00f17 	ldw	r3,60(r16)
   824e0:	10c5c83a 	sub	r2,r2,r3
   824e4:	100d883a 	mov	r6,r2
   824e8:	000f883a 	mov	r7,zero
   824ec:	9809883a 	mov	r4,r19
   824f0:	403ee83a 	callr	r8
   824f4:	10ffffd8 	cmpnei	r3,r2,-1
   824f8:	18003d1e 	bne	r3,zero,825f0 <__sflush_r+0x1ac>
   824fc:	99000017 	ldw	r4,0(r19)
   82500:	80c0030b 	ldhu	r3,12(r16)
   82504:	20004e26 	beq	r4,zero,82640 <__sflush_r+0x1fc>
   82508:	21400760 	cmpeqi	r5,r4,29
   8250c:	2800021e 	bne	r5,zero,82518 <__sflush_r+0xd4>
   82510:	210005a0 	cmpeqi	r4,r4,22
   82514:	20002c26 	beq	r4,zero,825c8 <__sflush_r+0x184>
   82518:	80800417 	ldw	r2,16(r16)
   8251c:	18fdffcc 	andi	r3,r3,63487
   82520:	80c0030d 	sth	r3,12(r16)
   82524:	80000115 	stw	zero,4(r16)
   82528:	80800015 	stw	r2,0(r16)
   8252c:	81400c17 	ldw	r5,48(r16)
   82530:	9c400015 	stw	r17,0(r19)
   82534:	28000526 	beq	r5,zero,8254c <__sflush_r+0x108>
   82538:	80801004 	addi	r2,r16,64
   8253c:	28800226 	beq	r5,r2,82548 <__sflush_r+0x104>
   82540:	9809883a 	mov	r4,r19
   82544:	008286c0 	call	8286c <_free_r>
   82548:	80000c15 	stw	zero,48(r16)
   8254c:	0005883a 	mov	r2,zero
   82550:	dfc00417 	ldw	ra,16(sp)
   82554:	dcc00317 	ldw	r19,12(sp)
   82558:	dc800217 	ldw	r18,8(sp)
   8255c:	dc400117 	ldw	r17,4(sp)
   82560:	dc000017 	ldw	r16,0(sp)
   82564:	dec00504 	addi	sp,sp,20
   82568:	f800283a 	ret
   8256c:	2c800417 	ldw	r18,16(r5)
   82570:	903ff626 	beq	r18,zero,8254c <__sflush_r+0x108>
   82574:	2c400017 	ldw	r17,0(r5)
   82578:	108000cc 	andi	r2,r2,3
   8257c:	2c800015 	stw	r18,0(r5)
   82580:	8ca3c83a 	sub	r17,r17,r18
   82584:	1000161e 	bne	r2,zero,825e0 <__sflush_r+0x19c>
   82588:	28800517 	ldw	r2,20(r5)
   8258c:	80800215 	stw	r2,8(r16)
   82590:	04400316 	blt	zero,r17,825a0 <__sflush_r+0x15c>
   82594:	003fed06 	br	8254c <__sflush_r+0x108>
   82598:	90a5883a 	add	r18,r18,r2
   8259c:	047feb0e 	bge	zero,r17,8254c <__sflush_r+0x108>
   825a0:	80800917 	ldw	r2,36(r16)
   825a4:	81400717 	ldw	r5,28(r16)
   825a8:	880f883a 	mov	r7,r17
   825ac:	900d883a 	mov	r6,r18
   825b0:	9809883a 	mov	r4,r19
   825b4:	103ee83a 	callr	r2
   825b8:	88a3c83a 	sub	r17,r17,r2
   825bc:	00bff616 	blt	zero,r2,82598 <__sflush_r+0x154>
   825c0:	80c0030b 	ldhu	r3,12(r16)
   825c4:	00bfffc4 	movi	r2,-1
   825c8:	18c01014 	ori	r3,r3,64
   825cc:	80c0030d 	sth	r3,12(r16)
   825d0:	003fdf06 	br	82550 <__sflush_r+0x10c>
   825d4:	28c00f17 	ldw	r3,60(r5)
   825d8:	00ffa916 	blt	zero,r3,82480 <__sflush_r+0x3c>
   825dc:	003fdb06 	br	8254c <__sflush_r+0x108>
   825e0:	0005883a 	mov	r2,zero
   825e4:	003fe906 	br	8258c <__sflush_r+0x148>
   825e8:	80801417 	ldw	r2,80(r16)
   825ec:	003fb506 	br	824c4 <__sflush_r+0x80>
   825f0:	80c0030b 	ldhu	r3,12(r16)
   825f4:	81000417 	ldw	r4,16(r16)
   825f8:	80000115 	stw	zero,4(r16)
   825fc:	197dffcc 	andi	r5,r3,63487
   82600:	8140030d 	sth	r5,12(r16)
   82604:	81000015 	stw	r4,0(r16)
   82608:	18c4000c 	andi	r3,r3,4096
   8260c:	183fc726 	beq	r3,zero,8252c <__sflush_r+0xe8>
   82610:	80801415 	stw	r2,80(r16)
   82614:	003fc506 	br	8252c <__sflush_r+0xe8>
   82618:	98c00017 	ldw	r3,0(r19)
   8261c:	183fa626 	beq	r3,zero,824b8 <__sflush_r+0x74>
   82620:	19000760 	cmpeqi	r4,r3,29
   82624:	20000e1e 	bne	r4,zero,82660 <__sflush_r+0x21c>
   82628:	18c00598 	cmpnei	r3,r3,22
   8262c:	18000c26 	beq	r3,zero,82660 <__sflush_r+0x21c>
   82630:	80c0030b 	ldhu	r3,12(r16)
   82634:	18c01014 	ori	r3,r3,64
   82638:	80c0030d 	sth	r3,12(r16)
   8263c:	003fc406 	br	82550 <__sflush_r+0x10c>
   82640:	81000417 	ldw	r4,16(r16)
   82644:	197dffcc 	andi	r5,r3,63487
   82648:	8140030d 	sth	r5,12(r16)
   8264c:	80000115 	stw	zero,4(r16)
   82650:	81000015 	stw	r4,0(r16)
   82654:	18c4000c 	andi	r3,r3,4096
   82658:	183fb426 	beq	r3,zero,8252c <__sflush_r+0xe8>
   8265c:	003fec06 	br	82610 <__sflush_r+0x1cc>
   82660:	9c400015 	stw	r17,0(r19)
   82664:	0005883a 	mov	r2,zero
   82668:	003fb906 	br	82550 <__sflush_r+0x10c>

0008266c <_fflush_r>:
   8266c:	defffd04 	addi	sp,sp,-12
   82670:	dc000115 	stw	r16,4(sp)
   82674:	dfc00215 	stw	ra,8(sp)
   82678:	2021883a 	mov	r16,r4
   8267c:	20000226 	beq	r4,zero,82688 <_fflush_r+0x1c>
   82680:	20800e17 	ldw	r2,56(r4)
   82684:	10000726 	beq	r2,zero,826a4 <_fflush_r+0x38>
   82688:	2880030f 	ldh	r2,12(r5)
   8268c:	10000a1e 	bne	r2,zero,826b8 <_fflush_r+0x4c>
   82690:	0005883a 	mov	r2,zero
   82694:	dfc00217 	ldw	ra,8(sp)
   82698:	dc000117 	ldw	r16,4(sp)
   8269c:	dec00304 	addi	sp,sp,12
   826a0:	f800283a 	ret
   826a4:	d9400015 	stw	r5,0(sp)
   826a8:	008076c0 	call	8076c <__sinit>
   826ac:	d9400017 	ldw	r5,0(sp)
   826b0:	2880030f 	ldh	r2,12(r5)
   826b4:	103ff626 	beq	r2,zero,82690 <_fflush_r+0x24>
   826b8:	8009883a 	mov	r4,r16
   826bc:	dfc00217 	ldw	ra,8(sp)
   826c0:	dc000117 	ldw	r16,4(sp)
   826c4:	dec00304 	addi	sp,sp,12
   826c8:	00824441 	jmpi	82444 <__sflush_r>

000826cc <fflush>:
   826cc:	20001726 	beq	r4,zero,8272c <fflush+0x60>
   826d0:	00800234 	movhi	r2,8
   826d4:	200b883a 	mov	r5,r4
   826d8:	111c9417 	ldw	r4,29264(r2)
   826dc:	20000226 	beq	r4,zero,826e8 <fflush+0x1c>
   826e0:	20800e17 	ldw	r2,56(r4)
   826e4:	10000526 	beq	r2,zero,826fc <fflush+0x30>
   826e8:	2880030f 	ldh	r2,12(r5)
   826ec:	1000021e 	bne	r2,zero,826f8 <fflush+0x2c>
   826f0:	0005883a 	mov	r2,zero
   826f4:	f800283a 	ret
   826f8:	00824441 	jmpi	82444 <__sflush_r>
   826fc:	defffd04 	addi	sp,sp,-12
   82700:	d9400115 	stw	r5,4(sp)
   82704:	d9000015 	stw	r4,0(sp)
   82708:	dfc00215 	stw	ra,8(sp)
   8270c:	008076c0 	call	8076c <__sinit>
   82710:	d9400117 	ldw	r5,4(sp)
   82714:	d9000017 	ldw	r4,0(sp)
   82718:	2880030f 	ldh	r2,12(r5)
   8271c:	10000826 	beq	r2,zero,82740 <fflush+0x74>
   82720:	dfc00217 	ldw	ra,8(sp)
   82724:	dec00304 	addi	sp,sp,12
   82728:	00824441 	jmpi	82444 <__sflush_r>
   8272c:	00800234 	movhi	r2,8
   82730:	111c9317 	ldw	r4,29260(r2)
   82734:	01400234 	movhi	r5,8
   82738:	29499b04 	addi	r5,r5,9836
   8273c:	0080d141 	jmpi	80d14 <_fwalk_reent>
   82740:	0005883a 	mov	r2,zero
   82744:	dfc00217 	ldw	ra,8(sp)
   82748:	dec00304 	addi	sp,sp,12
   8274c:	f800283a 	ret

00082750 <_malloc_trim_r>:
   82750:	defffb04 	addi	sp,sp,-20
   82754:	dcc00315 	stw	r19,12(sp)
   82758:	04c00234 	movhi	r19,8
   8275c:	dc800215 	stw	r18,8(sp)
   82760:	dc400115 	stw	r17,4(sp)
   82764:	dc000015 	stw	r16,0(sp)
   82768:	dfc00415 	stw	ra,16(sp)
   8276c:	2821883a 	mov	r16,r5
   82770:	9cd70f04 	addi	r19,r19,23612
   82774:	2025883a 	mov	r18,r4
   82778:	00836b80 	call	836b8 <__malloc_lock>
   8277c:	98800217 	ldw	r2,8(r19)
   82780:	14400117 	ldw	r17,4(r2)
   82784:	00bfff04 	movi	r2,-4
   82788:	88a2703a 	and	r17,r17,r2
   8278c:	8c21c83a 	sub	r16,r17,r16
   82790:	8403fbc4 	addi	r16,r16,4079
   82794:	8020d33a 	srli	r16,r16,12
   82798:	843fffc4 	addi	r16,r16,-1
   8279c:	8020933a 	slli	r16,r16,12
   827a0:	80840008 	cmpgei	r2,r16,4096
   827a4:	10000626 	beq	r2,zero,827c0 <_malloc_trim_r+0x70>
   827a8:	000b883a 	mov	r5,zero
   827ac:	9009883a 	mov	r4,r18
   827b0:	0081eec0 	call	81eec <_sbrk_r>
   827b4:	98c00217 	ldw	r3,8(r19)
   827b8:	1c47883a 	add	r3,r3,r17
   827bc:	10c00a26 	beq	r2,r3,827e8 <_malloc_trim_r+0x98>
   827c0:	9009883a 	mov	r4,r18
   827c4:	00836dc0 	call	836dc <__malloc_unlock>
   827c8:	0005883a 	mov	r2,zero
   827cc:	dfc00417 	ldw	ra,16(sp)
   827d0:	dcc00317 	ldw	r19,12(sp)
   827d4:	dc800217 	ldw	r18,8(sp)
   827d8:	dc400117 	ldw	r17,4(sp)
   827dc:	dc000017 	ldw	r16,0(sp)
   827e0:	dec00504 	addi	sp,sp,20
   827e4:	f800283a 	ret
   827e8:	040bc83a 	sub	r5,zero,r16
   827ec:	9009883a 	mov	r4,r18
   827f0:	0081eec0 	call	81eec <_sbrk_r>
   827f4:	10bfffd8 	cmpnei	r2,r2,-1
   827f8:	10000d26 	beq	r2,zero,82830 <_malloc_trim_r+0xe0>
   827fc:	00800274 	movhi	r2,9
   82800:	10a34717 	ldw	r2,-29412(r2)
   82804:	98c00217 	ldw	r3,8(r19)
   82808:	8c23c83a 	sub	r17,r17,r16
   8280c:	8c400054 	ori	r17,r17,1
   82810:	1421c83a 	sub	r16,r2,r16
   82814:	1c400115 	stw	r17,4(r3)
   82818:	00800274 	movhi	r2,9
   8281c:	9009883a 	mov	r4,r18
   82820:	14234715 	stw	r16,-29412(r2)
   82824:	00836dc0 	call	836dc <__malloc_unlock>
   82828:	00800044 	movi	r2,1
   8282c:	003fe706 	br	827cc <_malloc_trim_r+0x7c>
   82830:	000b883a 	mov	r5,zero
   82834:	9009883a 	mov	r4,r18
   82838:	0081eec0 	call	81eec <_sbrk_r>
   8283c:	99000217 	ldw	r4,8(r19)
   82840:	1107c83a 	sub	r3,r2,r4
   82844:	19400410 	cmplti	r5,r3,16
   82848:	283fdd1e 	bne	r5,zero,827c0 <_malloc_trim_r+0x70>
   8284c:	01400234 	movhi	r5,8
   82850:	295c9517 	ldw	r5,29268(r5)
   82854:	18c00054 	ori	r3,r3,1
   82858:	20c00115 	stw	r3,4(r4)
   8285c:	1145c83a 	sub	r2,r2,r5
   82860:	01400274 	movhi	r5,9
   82864:	28a34715 	stw	r2,-29412(r5)
   82868:	003fd506 	br	827c0 <_malloc_trim_r+0x70>

0008286c <_free_r>:
   8286c:	28004f26 	beq	r5,zero,829ac <_free_r+0x140>
   82870:	defffd04 	addi	sp,sp,-12
   82874:	dc400115 	stw	r17,4(sp)
   82878:	dc000015 	stw	r16,0(sp)
   8287c:	2023883a 	mov	r17,r4
   82880:	2821883a 	mov	r16,r5
   82884:	dfc00215 	stw	ra,8(sp)
   82888:	00836b80 	call	836b8 <__malloc_lock>
   8288c:	81ffff17 	ldw	r7,-4(r16)
   82890:	00bfff84 	movi	r2,-2
   82894:	80fffe04 	addi	r3,r16,-8
   82898:	3884703a 	and	r2,r7,r2
   8289c:	01000234 	movhi	r4,8
   828a0:	188d883a 	add	r6,r3,r2
   828a4:	21170f04 	addi	r4,r4,23612
   828a8:	31400117 	ldw	r5,4(r6)
   828ac:	22000217 	ldw	r8,8(r4)
   828b0:	027fff04 	movi	r9,-4
   828b4:	2a4a703a 	and	r5,r5,r9
   828b8:	41806426 	beq	r8,r6,82a4c <_free_r+0x1e0>
   828bc:	31400115 	stw	r5,4(r6)
   828c0:	39c0004c 	andi	r7,r7,1
   828c4:	3151883a 	add	r8,r6,r5
   828c8:	3800281e 	bne	r7,zero,8296c <_free_r+0x100>
   828cc:	82bffe17 	ldw	r10,-8(r16)
   828d0:	42000117 	ldw	r8,4(r8)
   828d4:	01c00234 	movhi	r7,8
   828d8:	1a87c83a 	sub	r3,r3,r10
   828dc:	1a400217 	ldw	r9,8(r3)
   828e0:	39d71104 	addi	r7,r7,23620
   828e4:	1285883a 	add	r2,r2,r10
   828e8:	4200004c 	andi	r8,r8,1
   828ec:	49c04c26 	beq	r9,r7,82a20 <_free_r+0x1b4>
   828f0:	1a800317 	ldw	r10,12(r3)
   828f4:	4a800315 	stw	r10,12(r9)
   828f8:	52400215 	stw	r9,8(r10)
   828fc:	40007126 	beq	r8,zero,82ac4 <_free_r+0x258>
   82900:	11400054 	ori	r5,r2,1
   82904:	19400115 	stw	r5,4(r3)
   82908:	30800015 	stw	r2,0(r6)
   8290c:	11408028 	cmpgeui	r5,r2,512
   82910:	28002c1e 	bne	r5,zero,829c4 <_free_r+0x158>
   82914:	100ad0fa 	srli	r5,r2,3
   82918:	100cd17a 	srli	r6,r2,5
   8291c:	00800044 	movi	r2,1
   82920:	29400044 	addi	r5,r5,1
   82924:	280a90fa 	slli	r5,r5,3
   82928:	21c00117 	ldw	r7,4(r4)
   8292c:	1184983a 	sll	r2,r2,r6
   82930:	214b883a 	add	r5,r4,r5
   82934:	29800017 	ldw	r6,0(r5)
   82938:	11c4b03a 	or	r2,r2,r7
   8293c:	29fffe04 	addi	r7,r5,-8
   82940:	19c00315 	stw	r7,12(r3)
   82944:	19800215 	stw	r6,8(r3)
   82948:	20800115 	stw	r2,4(r4)
   8294c:	28c00015 	stw	r3,0(r5)
   82950:	30c00315 	stw	r3,12(r6)
   82954:	8809883a 	mov	r4,r17
   82958:	dfc00217 	ldw	ra,8(sp)
   8295c:	dc400117 	ldw	r17,4(sp)
   82960:	dc000017 	ldw	r16,0(sp)
   82964:	dec00304 	addi	sp,sp,12
   82968:	00836dc1 	jmpi	836dc <__malloc_unlock>
   8296c:	41c00117 	ldw	r7,4(r8)
   82970:	39c0004c 	andi	r7,r7,1
   82974:	38000e1e 	bne	r7,zero,829b0 <_free_r+0x144>
   82978:	01c00234 	movhi	r7,8
   8297c:	1145883a 	add	r2,r2,r5
   82980:	39d71104 	addi	r7,r7,23620
   82984:	31400217 	ldw	r5,8(r6)
   82988:	12400054 	ori	r9,r2,1
   8298c:	1891883a 	add	r8,r3,r2
   82990:	29c05226 	beq	r5,r7,82adc <_free_r+0x270>
   82994:	31800317 	ldw	r6,12(r6)
   82998:	29800315 	stw	r6,12(r5)
   8299c:	31400215 	stw	r5,8(r6)
   829a0:	1a400115 	stw	r9,4(r3)
   829a4:	40800015 	stw	r2,0(r8)
   829a8:	003fd806 	br	8290c <_free_r+0xa0>
   829ac:	f800283a 	ret
   829b0:	11400054 	ori	r5,r2,1
   829b4:	817fff15 	stw	r5,-4(r16)
   829b8:	30800015 	stw	r2,0(r6)
   829bc:	11408028 	cmpgeui	r5,r2,512
   829c0:	283fd426 	beq	r5,zero,82914 <_free_r+0xa8>
   829c4:	100ad27a 	srli	r5,r2,9
   829c8:	29800168 	cmpgeui	r6,r5,5
   829cc:	3000341e 	bne	r6,zero,82aa0 <_free_r+0x234>
   829d0:	100ad1ba 	srli	r5,r2,6
   829d4:	29800e44 	addi	r6,r5,57
   829d8:	300c90fa 	slli	r6,r6,3
   829dc:	29c00e04 	addi	r7,r5,56
   829e0:	218d883a 	add	r6,r4,r6
   829e4:	31400017 	ldw	r5,0(r6)
   829e8:	31bffe04 	addi	r6,r6,-8
   829ec:	31404226 	beq	r6,r5,82af8 <_free_r+0x28c>
   829f0:	01ffff04 	movi	r7,-4
   829f4:	29000117 	ldw	r4,4(r5)
   829f8:	21c8703a 	and	r4,r4,r7
   829fc:	1100022e 	bgeu	r2,r4,82a08 <_free_r+0x19c>
   82a00:	29400217 	ldw	r5,8(r5)
   82a04:	317ffb1e 	bne	r6,r5,829f4 <_free_r+0x188>
   82a08:	29800317 	ldw	r6,12(r5)
   82a0c:	19800315 	stw	r6,12(r3)
   82a10:	19400215 	stw	r5,8(r3)
   82a14:	30c00215 	stw	r3,8(r6)
   82a18:	28c00315 	stw	r3,12(r5)
   82a1c:	003fcd06 	br	82954 <_free_r+0xe8>
   82a20:	40004d1e 	bne	r8,zero,82b58 <_free_r+0x2ec>
   82a24:	31000317 	ldw	r4,12(r6)
   82a28:	31800217 	ldw	r6,8(r6)
   82a2c:	2885883a 	add	r2,r5,r2
   82a30:	11400054 	ori	r5,r2,1
   82a34:	31000315 	stw	r4,12(r6)
   82a38:	21800215 	stw	r6,8(r4)
   82a3c:	19400115 	stw	r5,4(r3)
   82a40:	1887883a 	add	r3,r3,r2
   82a44:	18800015 	stw	r2,0(r3)
   82a48:	003fc206 	br	82954 <_free_r+0xe8>
   82a4c:	39c0004c 	andi	r7,r7,1
   82a50:	1145883a 	add	r2,r2,r5
   82a54:	3800071e 	bne	r7,zero,82a74 <_free_r+0x208>
   82a58:	81fffe17 	ldw	r7,-8(r16)
   82a5c:	19c7c83a 	sub	r3,r3,r7
   82a60:	19400317 	ldw	r5,12(r3)
   82a64:	19800217 	ldw	r6,8(r3)
   82a68:	11c5883a 	add	r2,r2,r7
   82a6c:	31400315 	stw	r5,12(r6)
   82a70:	29800215 	stw	r6,8(r5)
   82a74:	01400234 	movhi	r5,8
   82a78:	11800054 	ori	r6,r2,1
   82a7c:	295c9617 	ldw	r5,29272(r5)
   82a80:	19800115 	stw	r6,4(r3)
   82a84:	20c00215 	stw	r3,8(r4)
   82a88:	117fb236 	bltu	r2,r5,82954 <_free_r+0xe8>
   82a8c:	00800274 	movhi	r2,9
   82a90:	11633e17 	ldw	r5,-29448(r2)
   82a94:	8809883a 	mov	r4,r17
   82a98:	00827500 	call	82750 <_malloc_trim_r>
   82a9c:	003fad06 	br	82954 <_free_r+0xe8>
   82aa0:	29800568 	cmpgeui	r6,r5,21
   82aa4:	30000926 	beq	r6,zero,82acc <_free_r+0x260>
   82aa8:	29801568 	cmpgeui	r6,r5,85
   82aac:	3000191e 	bne	r6,zero,82b14 <_free_r+0x2a8>
   82ab0:	100ad33a 	srli	r5,r2,12
   82ab4:	29801bc4 	addi	r6,r5,111
   82ab8:	300c90fa 	slli	r6,r6,3
   82abc:	29c01b84 	addi	r7,r5,110
   82ac0:	003fc706 	br	829e0 <_free_r+0x174>
   82ac4:	1145883a 	add	r2,r2,r5
   82ac8:	003fae06 	br	82984 <_free_r+0x118>
   82acc:	29801704 	addi	r6,r5,92
   82ad0:	300c90fa 	slli	r6,r6,3
   82ad4:	29c016c4 	addi	r7,r5,91
   82ad8:	003fc106 	br	829e0 <_free_r+0x174>
   82adc:	20c00515 	stw	r3,20(r4)
   82ae0:	20c00415 	stw	r3,16(r4)
   82ae4:	19c00315 	stw	r7,12(r3)
   82ae8:	19c00215 	stw	r7,8(r3)
   82aec:	1a400115 	stw	r9,4(r3)
   82af0:	40800015 	stw	r2,0(r8)
   82af4:	003f9706 	br	82954 <_free_r+0xe8>
   82af8:	380fd0ba 	srai	r7,r7,2
   82afc:	00800044 	movi	r2,1
   82b00:	22000117 	ldw	r8,4(r4)
   82b04:	11ce983a 	sll	r7,r2,r7
   82b08:	3a0eb03a 	or	r7,r7,r8
   82b0c:	21c00115 	stw	r7,4(r4)
   82b10:	003fbe06 	br	82a0c <_free_r+0x1a0>
   82b14:	29805568 	cmpgeui	r6,r5,341
   82b18:	3000051e 	bne	r6,zero,82b30 <_free_r+0x2c4>
   82b1c:	100ad3fa 	srli	r5,r2,15
   82b20:	29801e04 	addi	r6,r5,120
   82b24:	300c90fa 	slli	r6,r6,3
   82b28:	29c01dc4 	addi	r7,r5,119
   82b2c:	003fac06 	br	829e0 <_free_r+0x174>
   82b30:	29415568 	cmpgeui	r5,r5,1365
   82b34:	2800051e 	bne	r5,zero,82b4c <_free_r+0x2e0>
   82b38:	100ad4ba 	srli	r5,r2,18
   82b3c:	29801f44 	addi	r6,r5,125
   82b40:	300c90fa 	slli	r6,r6,3
   82b44:	29c01f04 	addi	r7,r5,124
   82b48:	003fa506 	br	829e0 <_free_r+0x174>
   82b4c:	0180fe04 	movi	r6,1016
   82b50:	01c01f84 	movi	r7,126
   82b54:	003fa206 	br	829e0 <_free_r+0x174>
   82b58:	11000054 	ori	r4,r2,1
   82b5c:	19000115 	stw	r4,4(r3)
   82b60:	30800015 	stw	r2,0(r6)
   82b64:	003f7b06 	br	82954 <_free_r+0xe8>

00082b68 <_lseek_r>:
   82b68:	2807883a 	mov	r3,r5
   82b6c:	defffe04 	addi	sp,sp,-8
   82b70:	dc000015 	stw	r16,0(sp)
   82b74:	300b883a 	mov	r5,r6
   82b78:	00800274 	movhi	r2,9
   82b7c:	380d883a 	mov	r6,r7
   82b80:	2021883a 	mov	r16,r4
   82b84:	1809883a 	mov	r4,r3
   82b88:	dfc00115 	stw	ra,4(sp)
   82b8c:	10233f15 	stw	zero,-29444(r2)
   82b90:	008355c0 	call	8355c <lseek>
   82b94:	10ffffd8 	cmpnei	r3,r2,-1
   82b98:	18000426 	beq	r3,zero,82bac <_lseek_r+0x44>
   82b9c:	dfc00117 	ldw	ra,4(sp)
   82ba0:	dc000017 	ldw	r16,0(sp)
   82ba4:	dec00204 	addi	sp,sp,8
   82ba8:	f800283a 	ret
   82bac:	00c00274 	movhi	r3,9
   82bb0:	18e33f17 	ldw	r3,-29444(r3)
   82bb4:	183ff926 	beq	r3,zero,82b9c <_lseek_r+0x34>
   82bb8:	80c00015 	stw	r3,0(r16)
   82bbc:	dfc00117 	ldw	ra,4(sp)
   82bc0:	dc000017 	ldw	r16,0(sp)
   82bc4:	dec00204 	addi	sp,sp,8
   82bc8:	f800283a 	ret

00082bcc <__smakebuf_r>:
   82bcc:	2880030b 	ldhu	r2,12(r5)
   82bd0:	deffe804 	addi	sp,sp,-96
   82bd4:	dc001215 	stw	r16,72(sp)
   82bd8:	dfc01715 	stw	ra,92(sp)
   82bdc:	dd001615 	stw	r20,88(sp)
   82be0:	dcc01515 	stw	r19,84(sp)
   82be4:	dc801415 	stw	r18,80(sp)
   82be8:	dc401315 	stw	r17,76(sp)
   82bec:	10c0008c 	andi	r3,r2,2
   82bf0:	2821883a 	mov	r16,r5
   82bf4:	18000d26 	beq	r3,zero,82c2c <__smakebuf_r+0x60>
   82bf8:	288010c4 	addi	r2,r5,67
   82bfc:	28800015 	stw	r2,0(r5)
   82c00:	28800415 	stw	r2,16(r5)
   82c04:	00800044 	movi	r2,1
   82c08:	28800515 	stw	r2,20(r5)
   82c0c:	dfc01717 	ldw	ra,92(sp)
   82c10:	dd001617 	ldw	r20,88(sp)
   82c14:	dcc01517 	ldw	r19,84(sp)
   82c18:	dc801417 	ldw	r18,80(sp)
   82c1c:	dc401317 	ldw	r17,76(sp)
   82c20:	dc001217 	ldw	r16,72(sp)
   82c24:	dec01804 	addi	sp,sp,96
   82c28:	f800283a 	ret
   82c2c:	2940038f 	ldh	r5,14(r5)
   82c30:	2023883a 	mov	r17,r4
   82c34:	28002816 	blt	r5,zero,82cd8 <__smakebuf_r+0x10c>
   82c38:	d80d883a 	mov	r6,sp
   82c3c:	0082e780 	call	82e78 <_fstat_r>
   82c40:	10002416 	blt	r2,zero,82cd4 <__smakebuf_r+0x108>
   82c44:	d8800117 	ldw	r2,4(sp)
   82c48:	10bc000c 	andi	r2,r2,61440
   82c4c:	10880018 	cmpnei	r2,r2,8192
   82c50:	1000461e 	bne	r2,zero,82d6c <__smakebuf_r+0x1a0>
   82c54:	8140038f 	ldh	r5,14(r16)
   82c58:	8809883a 	mov	r4,r17
   82c5c:	0082ed80 	call	82ed8 <_isatty_r>
   82c60:	10003e26 	beq	r2,zero,82d5c <__smakebuf_r+0x190>
   82c64:	8080030b 	ldhu	r2,12(r16)
   82c68:	80c010c4 	addi	r3,r16,67
   82c6c:	80c00015 	stw	r3,0(r16)
   82c70:	10800054 	ori	r2,r2,1
   82c74:	8080030d 	sth	r2,12(r16)
   82c78:	00800044 	movi	r2,1
   82c7c:	80c00415 	stw	r3,16(r16)
   82c80:	80800515 	stw	r2,20(r16)
   82c84:	04c00044 	movi	r19,1
   82c88:	05010004 	movi	r20,1024
   82c8c:	04820004 	movi	r18,2048
   82c90:	a00b883a 	mov	r5,r20
   82c94:	8809883a 	mov	r4,r17
   82c98:	0080dbc0 	call	80dbc <_malloc_r>
   82c9c:	10001726 	beq	r2,zero,82cfc <__smakebuf_r+0x130>
   82ca0:	80c0030b 	ldhu	r3,12(r16)
   82ca4:	01000234 	movhi	r4,8
   82ca8:	21010404 	addi	r4,r4,1040
   82cac:	89000f15 	stw	r4,60(r17)
   82cb0:	18c02014 	ori	r3,r3,128
   82cb4:	80c0030d 	sth	r3,12(r16)
   82cb8:	80800015 	stw	r2,0(r16)
   82cbc:	80800415 	stw	r2,16(r16)
   82cc0:	85000515 	stw	r20,20(r16)
   82cc4:	98001d1e 	bne	r19,zero,82d3c <__smakebuf_r+0x170>
   82cc8:	90c6b03a 	or	r3,r18,r3
   82ccc:	80c0030d 	sth	r3,12(r16)
   82cd0:	003fce06 	br	82c0c <__smakebuf_r+0x40>
   82cd4:	8080030b 	ldhu	r2,12(r16)
   82cd8:	1080200c 	andi	r2,r2,128
   82cdc:	0027883a 	mov	r19,zero
   82ce0:	10001326 	beq	r2,zero,82d30 <__smakebuf_r+0x164>
   82ce4:	05001004 	movi	r20,64
   82ce8:	a00b883a 	mov	r5,r20
   82cec:	8809883a 	mov	r4,r17
   82cf0:	0025883a 	mov	r18,zero
   82cf4:	0080dbc0 	call	80dbc <_malloc_r>
   82cf8:	103fe91e 	bne	r2,zero,82ca0 <__smakebuf_r+0xd4>
   82cfc:	8080030b 	ldhu	r2,12(r16)
   82d00:	10c0800c 	andi	r3,r2,512
   82d04:	183fc11e 	bne	r3,zero,82c0c <__smakebuf_r+0x40>
   82d08:	00ffff04 	movi	r3,-4
   82d0c:	10c4703a 	and	r2,r2,r3
   82d10:	10800094 	ori	r2,r2,2
   82d14:	80c010c4 	addi	r3,r16,67
   82d18:	8080030d 	sth	r2,12(r16)
   82d1c:	00800044 	movi	r2,1
   82d20:	80c00015 	stw	r3,0(r16)
   82d24:	80c00415 	stw	r3,16(r16)
   82d28:	80800515 	stw	r2,20(r16)
   82d2c:	003fb706 	br	82c0c <__smakebuf_r+0x40>
   82d30:	05010004 	movi	r20,1024
   82d34:	0025883a 	mov	r18,zero
   82d38:	003fd506 	br	82c90 <__smakebuf_r+0xc4>
   82d3c:	8140038f 	ldh	r5,14(r16)
   82d40:	8809883a 	mov	r4,r17
   82d44:	0082ed80 	call	82ed8 <_isatty_r>
   82d48:	80c0030b 	ldhu	r3,12(r16)
   82d4c:	103fde26 	beq	r2,zero,82cc8 <__smakebuf_r+0xfc>
   82d50:	18ffff0c 	andi	r3,r3,65532
   82d54:	18c00054 	ori	r3,r3,1
   82d58:	003fdb06 	br	82cc8 <__smakebuf_r+0xfc>
   82d5c:	04c00044 	movi	r19,1
   82d60:	05010004 	movi	r20,1024
   82d64:	04820004 	movi	r18,2048
   82d68:	003fc906 	br	82c90 <__smakebuf_r+0xc4>
   82d6c:	0027883a 	mov	r19,zero
   82d70:	05010004 	movi	r20,1024
   82d74:	04820004 	movi	r18,2048
   82d78:	003fc506 	br	82c90 <__smakebuf_r+0xc4>

00082d7c <__swhatbuf_r>:
   82d7c:	deffea04 	addi	sp,sp,-88
   82d80:	dc001215 	stw	r16,72(sp)
   82d84:	2821883a 	mov	r16,r5
   82d88:	2940038f 	ldh	r5,14(r5)
   82d8c:	dc801415 	stw	r18,80(sp)
   82d90:	dc401315 	stw	r17,76(sp)
   82d94:	dfc01515 	stw	ra,84(sp)
   82d98:	3023883a 	mov	r17,r6
   82d9c:	3825883a 	mov	r18,r7
   82da0:	28001016 	blt	r5,zero,82de4 <__swhatbuf_r+0x68>
   82da4:	d80d883a 	mov	r6,sp
   82da8:	0082e780 	call	82e78 <_fstat_r>
   82dac:	10000d16 	blt	r2,zero,82de4 <__swhatbuf_r+0x68>
   82db0:	d8c00117 	ldw	r3,4(sp)
   82db4:	00820004 	movi	r2,2048
   82db8:	18fc000c 	andi	r3,r3,61440
   82dbc:	18c80020 	cmpeqi	r3,r3,8192
   82dc0:	90c00015 	stw	r3,0(r18)
   82dc4:	00c10004 	movi	r3,1024
   82dc8:	88c00015 	stw	r3,0(r17)
   82dcc:	dfc01517 	ldw	ra,84(sp)
   82dd0:	dc801417 	ldw	r18,80(sp)
   82dd4:	dc401317 	ldw	r17,76(sp)
   82dd8:	dc001217 	ldw	r16,72(sp)
   82ddc:	dec01604 	addi	sp,sp,88
   82de0:	f800283a 	ret
   82de4:	8080030b 	ldhu	r2,12(r16)
   82de8:	90000015 	stw	zero,0(r18)
   82dec:	1080200c 	andi	r2,r2,128
   82df0:	10000426 	beq	r2,zero,82e04 <__swhatbuf_r+0x88>
   82df4:	00801004 	movi	r2,64
   82df8:	88800015 	stw	r2,0(r17)
   82dfc:	0005883a 	mov	r2,zero
   82e00:	003ff206 	br	82dcc <__swhatbuf_r+0x50>
   82e04:	00810004 	movi	r2,1024
   82e08:	88800015 	stw	r2,0(r17)
   82e0c:	0005883a 	mov	r2,zero
   82e10:	003fee06 	br	82dcc <__swhatbuf_r+0x50>

00082e14 <_read_r>:
   82e14:	2807883a 	mov	r3,r5
   82e18:	defffe04 	addi	sp,sp,-8
   82e1c:	dc000015 	stw	r16,0(sp)
   82e20:	300b883a 	mov	r5,r6
   82e24:	00800274 	movhi	r2,9
   82e28:	380d883a 	mov	r6,r7
   82e2c:	2021883a 	mov	r16,r4
   82e30:	1809883a 	mov	r4,r3
   82e34:	dfc00115 	stw	ra,4(sp)
   82e38:	10233f15 	stw	zero,-29444(r2)
   82e3c:	008373c0 	call	8373c <read>
   82e40:	10ffffd8 	cmpnei	r3,r2,-1
   82e44:	18000426 	beq	r3,zero,82e58 <_read_r+0x44>
   82e48:	dfc00117 	ldw	ra,4(sp)
   82e4c:	dc000017 	ldw	r16,0(sp)
   82e50:	dec00204 	addi	sp,sp,8
   82e54:	f800283a 	ret
   82e58:	00c00274 	movhi	r3,9
   82e5c:	18e33f17 	ldw	r3,-29444(r3)
   82e60:	183ff926 	beq	r3,zero,82e48 <_read_r+0x34>
   82e64:	80c00015 	stw	r3,0(r16)
   82e68:	dfc00117 	ldw	ra,4(sp)
   82e6c:	dc000017 	ldw	r16,0(sp)
   82e70:	dec00204 	addi	sp,sp,8
   82e74:	f800283a 	ret

00082e78 <_fstat_r>:
   82e78:	2807883a 	mov	r3,r5
   82e7c:	defffe04 	addi	sp,sp,-8
   82e80:	dc000015 	stw	r16,0(sp)
   82e84:	00800274 	movhi	r2,9
   82e88:	300b883a 	mov	r5,r6
   82e8c:	2021883a 	mov	r16,r4
   82e90:	1809883a 	mov	r4,r3
   82e94:	dfc00115 	stw	ra,4(sp)
   82e98:	10233f15 	stw	zero,-29444(r2)
   82e9c:	008328c0 	call	8328c <fstat>
   82ea0:	10ffffd8 	cmpnei	r3,r2,-1
   82ea4:	18000426 	beq	r3,zero,82eb8 <_fstat_r+0x40>
   82ea8:	dfc00117 	ldw	ra,4(sp)
   82eac:	dc000017 	ldw	r16,0(sp)
   82eb0:	dec00204 	addi	sp,sp,8
   82eb4:	f800283a 	ret
   82eb8:	00c00274 	movhi	r3,9
   82ebc:	18e33f17 	ldw	r3,-29444(r3)
   82ec0:	183ff926 	beq	r3,zero,82ea8 <_fstat_r+0x30>
   82ec4:	80c00015 	stw	r3,0(r16)
   82ec8:	dfc00117 	ldw	ra,4(sp)
   82ecc:	dc000017 	ldw	r16,0(sp)
   82ed0:	dec00204 	addi	sp,sp,8
   82ed4:	f800283a 	ret

00082ed8 <_isatty_r>:
   82ed8:	defffe04 	addi	sp,sp,-8
   82edc:	dc000015 	stw	r16,0(sp)
   82ee0:	00800274 	movhi	r2,9
   82ee4:	2021883a 	mov	r16,r4
   82ee8:	2809883a 	mov	r4,r5
   82eec:	dfc00115 	stw	ra,4(sp)
   82ef0:	10233f15 	stw	zero,-29444(r2)
   82ef4:	00833840 	call	83384 <isatty>
   82ef8:	10ffffd8 	cmpnei	r3,r2,-1
   82efc:	18000426 	beq	r3,zero,82f10 <_isatty_r+0x38>
   82f00:	dfc00117 	ldw	ra,4(sp)
   82f04:	dc000017 	ldw	r16,0(sp)
   82f08:	dec00204 	addi	sp,sp,8
   82f0c:	f800283a 	ret
   82f10:	00c00274 	movhi	r3,9
   82f14:	18e33f17 	ldw	r3,-29444(r3)
   82f18:	183ff926 	beq	r3,zero,82f00 <_isatty_r+0x28>
   82f1c:	80c00015 	stw	r3,0(r16)
   82f20:	dfc00117 	ldw	ra,4(sp)
   82f24:	dc000017 	ldw	r16,0(sp)
   82f28:	dec00204 	addi	sp,sp,8
   82f2c:	f800283a 	ret

00082f30 <__divsi3>:
   82f30:	20001a16 	blt	r4,zero,82f9c <__divsi3+0x6c>
   82f34:	000f883a 	mov	r7,zero
   82f38:	2800020e 	bge	r5,zero,82f44 <__divsi3+0x14>
   82f3c:	014bc83a 	sub	r5,zero,r5
   82f40:	39c0005c 	xori	r7,r7,1
   82f44:	200d883a 	mov	r6,r4
   82f48:	00c00044 	movi	r3,1
   82f4c:	2900092e 	bgeu	r5,r4,82f74 <__divsi3+0x44>
   82f50:	00800804 	movi	r2,32
   82f54:	00c00044 	movi	r3,1
   82f58:	00000106 	br	82f60 <__divsi3+0x30>
   82f5c:	10001226 	beq	r2,zero,82fa8 <__divsi3+0x78>
   82f60:	294b883a 	add	r5,r5,r5
   82f64:	10bfffc4 	addi	r2,r2,-1
   82f68:	18c7883a 	add	r3,r3,r3
   82f6c:	293ffb36 	bltu	r5,r4,82f5c <__divsi3+0x2c>
   82f70:	18000d26 	beq	r3,zero,82fa8 <__divsi3+0x78>
   82f74:	0005883a 	mov	r2,zero
   82f78:	31400236 	bltu	r6,r5,82f84 <__divsi3+0x54>
   82f7c:	314dc83a 	sub	r6,r6,r5
   82f80:	10c4b03a 	or	r2,r2,r3
   82f84:	1806d07a 	srli	r3,r3,1
   82f88:	280ad07a 	srli	r5,r5,1
   82f8c:	183ffa1e 	bne	r3,zero,82f78 <__divsi3+0x48>
   82f90:	38000126 	beq	r7,zero,82f98 <__divsi3+0x68>
   82f94:	0085c83a 	sub	r2,zero,r2
   82f98:	f800283a 	ret
   82f9c:	0109c83a 	sub	r4,zero,r4
   82fa0:	01c00044 	movi	r7,1
   82fa4:	003fe406 	br	82f38 <__divsi3+0x8>
   82fa8:	0005883a 	mov	r2,zero
   82fac:	003ff806 	br	82f90 <__divsi3+0x60>

00082fb0 <__modsi3>:
   82fb0:	20001916 	blt	r4,zero,83018 <__modsi3+0x68>
   82fb4:	000f883a 	mov	r7,zero
   82fb8:	2005883a 	mov	r2,r4
   82fbc:	2800010e 	bge	r5,zero,82fc4 <__modsi3+0x14>
   82fc0:	014bc83a 	sub	r5,zero,r5
   82fc4:	00c00044 	movi	r3,1
   82fc8:	2900092e 	bgeu	r5,r4,82ff0 <__modsi3+0x40>
   82fcc:	01800804 	movi	r6,32
   82fd0:	00c00044 	movi	r3,1
   82fd4:	00000106 	br	82fdc <__modsi3+0x2c>
   82fd8:	30000d26 	beq	r6,zero,83010 <__modsi3+0x60>
   82fdc:	294b883a 	add	r5,r5,r5
   82fe0:	31bfffc4 	addi	r6,r6,-1
   82fe4:	18c7883a 	add	r3,r3,r3
   82fe8:	293ffb36 	bltu	r5,r4,82fd8 <__modsi3+0x28>
   82fec:	18000826 	beq	r3,zero,83010 <__modsi3+0x60>
   82ff0:	1806d07a 	srli	r3,r3,1
   82ff4:	11400136 	bltu	r2,r5,82ffc <__modsi3+0x4c>
   82ff8:	1145c83a 	sub	r2,r2,r5
   82ffc:	280ad07a 	srli	r5,r5,1
   83000:	183ffb1e 	bne	r3,zero,82ff0 <__modsi3+0x40>
   83004:	38000126 	beq	r7,zero,8300c <__modsi3+0x5c>
   83008:	0085c83a 	sub	r2,zero,r2
   8300c:	f800283a 	ret
   83010:	2005883a 	mov	r2,r4
   83014:	003ffb06 	br	83004 <__modsi3+0x54>
   83018:	0109c83a 	sub	r4,zero,r4
   8301c:	01c00044 	movi	r7,1
   83020:	003fe506 	br	82fb8 <__modsi3+0x8>

00083024 <__udivsi3>:
   83024:	200d883a 	mov	r6,r4
   83028:	2900152e 	bgeu	r5,r4,83080 <__udivsi3+0x5c>
   8302c:	28001416 	blt	r5,zero,83080 <__udivsi3+0x5c>
   83030:	00800804 	movi	r2,32
   83034:	00c00044 	movi	r3,1
   83038:	00000206 	br	83044 <__udivsi3+0x20>
   8303c:	10000e26 	beq	r2,zero,83078 <__udivsi3+0x54>
   83040:	28000516 	blt	r5,zero,83058 <__udivsi3+0x34>
   83044:	294b883a 	add	r5,r5,r5
   83048:	10bfffc4 	addi	r2,r2,-1
   8304c:	18c7883a 	add	r3,r3,r3
   83050:	293ffa36 	bltu	r5,r4,8303c <__udivsi3+0x18>
   83054:	18000826 	beq	r3,zero,83078 <__udivsi3+0x54>
   83058:	0005883a 	mov	r2,zero
   8305c:	31400236 	bltu	r6,r5,83068 <__udivsi3+0x44>
   83060:	314dc83a 	sub	r6,r6,r5
   83064:	10c4b03a 	or	r2,r2,r3
   83068:	1806d07a 	srli	r3,r3,1
   8306c:	280ad07a 	srli	r5,r5,1
   83070:	183ffa1e 	bne	r3,zero,8305c <__udivsi3+0x38>
   83074:	f800283a 	ret
   83078:	0005883a 	mov	r2,zero
   8307c:	f800283a 	ret
   83080:	00c00044 	movi	r3,1
   83084:	003ff406 	br	83058 <__udivsi3+0x34>

00083088 <__umodsi3>:
   83088:	2005883a 	mov	r2,r4
   8308c:	2900132e 	bgeu	r5,r4,830dc <__umodsi3+0x54>
   83090:	28001216 	blt	r5,zero,830dc <__umodsi3+0x54>
   83094:	01800804 	movi	r6,32
   83098:	00c00044 	movi	r3,1
   8309c:	00000206 	br	830a8 <__umodsi3+0x20>
   830a0:	30000c26 	beq	r6,zero,830d4 <__umodsi3+0x4c>
   830a4:	28000516 	blt	r5,zero,830bc <__umodsi3+0x34>
   830a8:	294b883a 	add	r5,r5,r5
   830ac:	31bfffc4 	addi	r6,r6,-1
   830b0:	18c7883a 	add	r3,r3,r3
   830b4:	293ffa36 	bltu	r5,r4,830a0 <__umodsi3+0x18>
   830b8:	18000626 	beq	r3,zero,830d4 <__umodsi3+0x4c>
   830bc:	1806d07a 	srli	r3,r3,1
   830c0:	11400136 	bltu	r2,r5,830c8 <__umodsi3+0x40>
   830c4:	1145c83a 	sub	r2,r2,r5
   830c8:	280ad07a 	srli	r5,r5,1
   830cc:	183ffb1e 	bne	r3,zero,830bc <__umodsi3+0x34>
   830d0:	f800283a 	ret
   830d4:	2005883a 	mov	r2,r4
   830d8:	f800283a 	ret
   830dc:	00c00044 	movi	r3,1
   830e0:	003ff606 	br	830bc <__umodsi3+0x34>

000830e4 <__mulsi3>:
   830e4:	0005883a 	mov	r2,zero
   830e8:	20000726 	beq	r4,zero,83108 <__mulsi3+0x24>
   830ec:	20c0004c 	andi	r3,r4,1
   830f0:	2008d07a 	srli	r4,r4,1
   830f4:	18000126 	beq	r3,zero,830fc <__mulsi3+0x18>
   830f8:	1145883a 	add	r2,r2,r5
   830fc:	294b883a 	add	r5,r5,r5
   83100:	203ffa1e 	bne	r4,zero,830ec <__mulsi3+0x8>
   83104:	f800283a 	ret
   83108:	f800283a 	ret

0008310c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8310c:	defffe04 	addi	sp,sp,-8
   83110:	dfc00115 	stw	ra,4(sp)
   83114:	df000015 	stw	fp,0(sp)
   83118:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8311c:	d0a00917 	ldw	r2,-32732(gp)
   83120:	10000326 	beq	r2,zero,83130 <alt_get_errno+0x24>
   83124:	d0a00917 	ldw	r2,-32732(gp)
   83128:	103ee83a 	callr	r2
   8312c:	00000106 	br	83134 <alt_get_errno+0x28>
   83130:	d0a6ac04 	addi	r2,gp,-25936
}
   83134:	e037883a 	mov	sp,fp
   83138:	dfc00117 	ldw	ra,4(sp)
   8313c:	df000017 	ldw	fp,0(sp)
   83140:	dec00204 	addi	sp,sp,8
   83144:	f800283a 	ret

00083148 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   83148:	defffb04 	addi	sp,sp,-20
   8314c:	dfc00415 	stw	ra,16(sp)
   83150:	df000315 	stw	fp,12(sp)
   83154:	df000304 	addi	fp,sp,12
   83158:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8315c:	e0bffd17 	ldw	r2,-12(fp)
   83160:	10000916 	blt	r2,zero,83188 <close+0x40>
   83164:	e0fffd17 	ldw	r3,-12(fp)
   83168:	1805883a 	mov	r2,r3
   8316c:	1085883a 	add	r2,r2,r2
   83170:	10c5883a 	add	r2,r2,r3
   83174:	100490ba 	slli	r2,r2,2
   83178:	00c00234 	movhi	r3,8
   8317c:	18d81b04 	addi	r3,r3,24684
   83180:	10c5883a 	add	r2,r2,r3
   83184:	00000106 	br	8318c <close+0x44>
   83188:	0005883a 	mov	r2,zero
   8318c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   83190:	e0bfff17 	ldw	r2,-4(fp)
   83194:	10001926 	beq	r2,zero,831fc <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   83198:	e0bfff17 	ldw	r2,-4(fp)
   8319c:	10800017 	ldw	r2,0(r2)
   831a0:	10800417 	ldw	r2,16(r2)
   831a4:	10000626 	beq	r2,zero,831c0 <close+0x78>
   831a8:	e0bfff17 	ldw	r2,-4(fp)
   831ac:	10800017 	ldw	r2,0(r2)
   831b0:	10800417 	ldw	r2,16(r2)
   831b4:	e13fff17 	ldw	r4,-4(fp)
   831b8:	103ee83a 	callr	r2
   831bc:	00000106 	br	831c4 <close+0x7c>
   831c0:	0005883a 	mov	r2,zero
   831c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   831c8:	e13ffd17 	ldw	r4,-12(fp)
   831cc:	00838440 	call	83844 <alt_release_fd>
    if (rval < 0)
   831d0:	e0bffe17 	ldw	r2,-8(fp)
   831d4:	1000070e 	bge	r2,zero,831f4 <close+0xac>
    {
      ALT_ERRNO = -rval;
   831d8:	008310c0 	call	8310c <alt_get_errno>
   831dc:	1007883a 	mov	r3,r2
   831e0:	e0bffe17 	ldw	r2,-8(fp)
   831e4:	0085c83a 	sub	r2,zero,r2
   831e8:	18800015 	stw	r2,0(r3)
      return -1;
   831ec:	00bfffc4 	movi	r2,-1
   831f0:	00000706 	br	83210 <close+0xc8>
    }
    return 0;
   831f4:	0005883a 	mov	r2,zero
   831f8:	00000506 	br	83210 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   831fc:	008310c0 	call	8310c <alt_get_errno>
   83200:	1007883a 	mov	r3,r2
   83204:	00801444 	movi	r2,81
   83208:	18800015 	stw	r2,0(r3)
    return -1;
   8320c:	00bfffc4 	movi	r2,-1
  }
}
   83210:	e037883a 	mov	sp,fp
   83214:	dfc00117 	ldw	ra,4(sp)
   83218:	df000017 	ldw	fp,0(sp)
   8321c:	dec00204 	addi	sp,sp,8
   83220:	f800283a 	ret

00083224 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   83224:	defffc04 	addi	sp,sp,-16
   83228:	df000315 	stw	fp,12(sp)
   8322c:	df000304 	addi	fp,sp,12
   83230:	e13fff15 	stw	r4,-4(fp)
   83234:	e17ffe15 	stw	r5,-8(fp)
   83238:	e1bffd15 	stw	r6,-12(fp)
  return len;
   8323c:	e0bffd17 	ldw	r2,-12(fp)
}
   83240:	e037883a 	mov	sp,fp
   83244:	df000017 	ldw	fp,0(sp)
   83248:	dec00104 	addi	sp,sp,4
   8324c:	f800283a 	ret

00083250 <alt_get_errno>:
{
   83250:	defffe04 	addi	sp,sp,-8
   83254:	dfc00115 	stw	ra,4(sp)
   83258:	df000015 	stw	fp,0(sp)
   8325c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83260:	d0a00917 	ldw	r2,-32732(gp)
   83264:	10000326 	beq	r2,zero,83274 <alt_get_errno+0x24>
   83268:	d0a00917 	ldw	r2,-32732(gp)
   8326c:	103ee83a 	callr	r2
   83270:	00000106 	br	83278 <alt_get_errno+0x28>
   83274:	d0a6ac04 	addi	r2,gp,-25936
}
   83278:	e037883a 	mov	sp,fp
   8327c:	dfc00117 	ldw	ra,4(sp)
   83280:	df000017 	ldw	fp,0(sp)
   83284:	dec00204 	addi	sp,sp,8
   83288:	f800283a 	ret

0008328c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8328c:	defffb04 	addi	sp,sp,-20
   83290:	dfc00415 	stw	ra,16(sp)
   83294:	df000315 	stw	fp,12(sp)
   83298:	df000304 	addi	fp,sp,12
   8329c:	e13ffe15 	stw	r4,-8(fp)
   832a0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   832a4:	e0bffe17 	ldw	r2,-8(fp)
   832a8:	10000916 	blt	r2,zero,832d0 <fstat+0x44>
   832ac:	e0fffe17 	ldw	r3,-8(fp)
   832b0:	1805883a 	mov	r2,r3
   832b4:	1085883a 	add	r2,r2,r2
   832b8:	10c5883a 	add	r2,r2,r3
   832bc:	100490ba 	slli	r2,r2,2
   832c0:	00c00234 	movhi	r3,8
   832c4:	18d81b04 	addi	r3,r3,24684
   832c8:	10c5883a 	add	r2,r2,r3
   832cc:	00000106 	br	832d4 <fstat+0x48>
   832d0:	0005883a 	mov	r2,zero
   832d4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   832d8:	e0bfff17 	ldw	r2,-4(fp)
   832dc:	10001026 	beq	r2,zero,83320 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   832e0:	e0bfff17 	ldw	r2,-4(fp)
   832e4:	10800017 	ldw	r2,0(r2)
   832e8:	10800817 	ldw	r2,32(r2)
   832ec:	10000726 	beq	r2,zero,8330c <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   832f0:	e0bfff17 	ldw	r2,-4(fp)
   832f4:	10800017 	ldw	r2,0(r2)
   832f8:	10800817 	ldw	r2,32(r2)
   832fc:	e17ffd17 	ldw	r5,-12(fp)
   83300:	e13fff17 	ldw	r4,-4(fp)
   83304:	103ee83a 	callr	r2
   83308:	00000a06 	br	83334 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8330c:	e0bffd17 	ldw	r2,-12(fp)
   83310:	00c80004 	movi	r3,8192
   83314:	10c00115 	stw	r3,4(r2)
      return 0;
   83318:	0005883a 	mov	r2,zero
   8331c:	00000506 	br	83334 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83320:	00832500 	call	83250 <alt_get_errno>
   83324:	1007883a 	mov	r3,r2
   83328:	00801444 	movi	r2,81
   8332c:	18800015 	stw	r2,0(r3)
    return -1;
   83330:	00bfffc4 	movi	r2,-1
  }
}
   83334:	e037883a 	mov	sp,fp
   83338:	dfc00117 	ldw	ra,4(sp)
   8333c:	df000017 	ldw	fp,0(sp)
   83340:	dec00204 	addi	sp,sp,8
   83344:	f800283a 	ret

00083348 <alt_get_errno>:
{
   83348:	defffe04 	addi	sp,sp,-8
   8334c:	dfc00115 	stw	ra,4(sp)
   83350:	df000015 	stw	fp,0(sp)
   83354:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83358:	d0a00917 	ldw	r2,-32732(gp)
   8335c:	10000326 	beq	r2,zero,8336c <alt_get_errno+0x24>
   83360:	d0a00917 	ldw	r2,-32732(gp)
   83364:	103ee83a 	callr	r2
   83368:	00000106 	br	83370 <alt_get_errno+0x28>
   8336c:	d0a6ac04 	addi	r2,gp,-25936
}
   83370:	e037883a 	mov	sp,fp
   83374:	dfc00117 	ldw	ra,4(sp)
   83378:	df000017 	ldw	fp,0(sp)
   8337c:	dec00204 	addi	sp,sp,8
   83380:	f800283a 	ret

00083384 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   83384:	deffea04 	addi	sp,sp,-88
   83388:	dfc01515 	stw	ra,84(sp)
   8338c:	df001415 	stw	fp,80(sp)
   83390:	df001404 	addi	fp,sp,80
   83394:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83398:	e0bfec17 	ldw	r2,-80(fp)
   8339c:	10000916 	blt	r2,zero,833c4 <isatty+0x40>
   833a0:	e0ffec17 	ldw	r3,-80(fp)
   833a4:	1805883a 	mov	r2,r3
   833a8:	1085883a 	add	r2,r2,r2
   833ac:	10c5883a 	add	r2,r2,r3
   833b0:	100490ba 	slli	r2,r2,2
   833b4:	00c00234 	movhi	r3,8
   833b8:	18d81b04 	addi	r3,r3,24684
   833bc:	10c5883a 	add	r2,r2,r3
   833c0:	00000106 	br	833c8 <isatty+0x44>
   833c4:	0005883a 	mov	r2,zero
   833c8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   833cc:	e0bfff17 	ldw	r2,-4(fp)
   833d0:	10000e26 	beq	r2,zero,8340c <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   833d4:	e0bfff17 	ldw	r2,-4(fp)
   833d8:	10800017 	ldw	r2,0(r2)
   833dc:	10800817 	ldw	r2,32(r2)
   833e0:	1000021e 	bne	r2,zero,833ec <isatty+0x68>
    {
      return 1;
   833e4:	00800044 	movi	r2,1
   833e8:	00000d06 	br	83420 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   833ec:	e0bfed04 	addi	r2,fp,-76
   833f0:	100b883a 	mov	r5,r2
   833f4:	e13fec17 	ldw	r4,-80(fp)
   833f8:	008328c0 	call	8328c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   833fc:	e0bfee17 	ldw	r2,-72(fp)
   83400:	10880020 	cmpeqi	r2,r2,8192
   83404:	10803fcc 	andi	r2,r2,255
   83408:	00000506 	br	83420 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8340c:	00833480 	call	83348 <alt_get_errno>
   83410:	1007883a 	mov	r3,r2
   83414:	00801444 	movi	r2,81
   83418:	18800015 	stw	r2,0(r3)
    return 0;
   8341c:	0005883a 	mov	r2,zero
  }
}
   83420:	e037883a 	mov	sp,fp
   83424:	dfc00117 	ldw	ra,4(sp)
   83428:	df000017 	ldw	fp,0(sp)
   8342c:	dec00204 	addi	sp,sp,8
   83430:	f800283a 	ret

00083434 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   83434:	defffc04 	addi	sp,sp,-16
   83438:	df000315 	stw	fp,12(sp)
   8343c:	df000304 	addi	fp,sp,12
   83440:	e13fff15 	stw	r4,-4(fp)
   83444:	e17ffe15 	stw	r5,-8(fp)
   83448:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   8344c:	e0fffe17 	ldw	r3,-8(fp)
   83450:	e0bfff17 	ldw	r2,-4(fp)
   83454:	18800c26 	beq	r3,r2,83488 <alt_load_section+0x54>
  {
    while( to != end )
   83458:	00000806 	br	8347c <alt_load_section+0x48>
    {
      *to++ = *from++;
   8345c:	e0ffff17 	ldw	r3,-4(fp)
   83460:	18800104 	addi	r2,r3,4
   83464:	e0bfff15 	stw	r2,-4(fp)
   83468:	e0bffe17 	ldw	r2,-8(fp)
   8346c:	11000104 	addi	r4,r2,4
   83470:	e13ffe15 	stw	r4,-8(fp)
   83474:	18c00017 	ldw	r3,0(r3)
   83478:	10c00015 	stw	r3,0(r2)
    while( to != end )
   8347c:	e0fffe17 	ldw	r3,-8(fp)
   83480:	e0bffd17 	ldw	r2,-12(fp)
   83484:	18bff51e 	bne	r3,r2,8345c <alt_load_section+0x28>
    }
  }
}
   83488:	0001883a 	nop
   8348c:	e037883a 	mov	sp,fp
   83490:	df000017 	ldw	fp,0(sp)
   83494:	dec00104 	addi	sp,sp,4
   83498:	f800283a 	ret

0008349c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8349c:	defffe04 	addi	sp,sp,-8
   834a0:	dfc00115 	stw	ra,4(sp)
   834a4:	df000015 	stw	fp,0(sp)
   834a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   834ac:	01800234 	movhi	r6,8
   834b0:	319ca104 	addi	r6,r6,29316
   834b4:	01400234 	movhi	r5,8
   834b8:	29560604 	addi	r5,r5,22552
   834bc:	01000234 	movhi	r4,8
   834c0:	211ca104 	addi	r4,r4,29316
   834c4:	00834340 	call	83434 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   834c8:	01800234 	movhi	r6,8
   834cc:	31808904 	addi	r6,r6,548
   834d0:	01400234 	movhi	r5,8
   834d4:	29400804 	addi	r5,r5,32
   834d8:	01000234 	movhi	r4,8
   834dc:	21000804 	addi	r4,r4,32
   834e0:	00834340 	call	83434 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   834e4:	01800234 	movhi	r6,8
   834e8:	31960604 	addi	r6,r6,22552
   834ec:	01400234 	movhi	r5,8
   834f0:	2955f504 	addi	r5,r5,22484
   834f4:	01000234 	movhi	r4,8
   834f8:	2115f504 	addi	r4,r4,22484
   834fc:	00834340 	call	83434 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   83500:	00848280 	call	84828 <alt_dcache_flush_all>
  alt_icache_flush_all();
   83504:	00849f40 	call	849f4 <alt_icache_flush_all>
}
   83508:	0001883a 	nop
   8350c:	e037883a 	mov	sp,fp
   83510:	dfc00117 	ldw	ra,4(sp)
   83514:	df000017 	ldw	fp,0(sp)
   83518:	dec00204 	addi	sp,sp,8
   8351c:	f800283a 	ret

00083520 <alt_get_errno>:
{
   83520:	defffe04 	addi	sp,sp,-8
   83524:	dfc00115 	stw	ra,4(sp)
   83528:	df000015 	stw	fp,0(sp)
   8352c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83530:	d0a00917 	ldw	r2,-32732(gp)
   83534:	10000326 	beq	r2,zero,83544 <alt_get_errno+0x24>
   83538:	d0a00917 	ldw	r2,-32732(gp)
   8353c:	103ee83a 	callr	r2
   83540:	00000106 	br	83548 <alt_get_errno+0x28>
   83544:	d0a6ac04 	addi	r2,gp,-25936
}
   83548:	e037883a 	mov	sp,fp
   8354c:	dfc00117 	ldw	ra,4(sp)
   83550:	df000017 	ldw	fp,0(sp)
   83554:	dec00204 	addi	sp,sp,8
   83558:	f800283a 	ret

0008355c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8355c:	defff904 	addi	sp,sp,-28
   83560:	dfc00615 	stw	ra,24(sp)
   83564:	df000515 	stw	fp,20(sp)
   83568:	df000504 	addi	fp,sp,20
   8356c:	e13ffd15 	stw	r4,-12(fp)
   83570:	e17ffc15 	stw	r5,-16(fp)
   83574:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   83578:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8357c:	e0bffd17 	ldw	r2,-12(fp)
   83580:	10000916 	blt	r2,zero,835a8 <lseek+0x4c>
   83584:	e0fffd17 	ldw	r3,-12(fp)
   83588:	1805883a 	mov	r2,r3
   8358c:	1085883a 	add	r2,r2,r2
   83590:	10c5883a 	add	r2,r2,r3
   83594:	100490ba 	slli	r2,r2,2
   83598:	00c00234 	movhi	r3,8
   8359c:	18d81b04 	addi	r3,r3,24684
   835a0:	10c5883a 	add	r2,r2,r3
   835a4:	00000106 	br	835ac <lseek+0x50>
   835a8:	0005883a 	mov	r2,zero
   835ac:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   835b0:	e0bffe17 	ldw	r2,-8(fp)
   835b4:	10001026 	beq	r2,zero,835f8 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   835b8:	e0bffe17 	ldw	r2,-8(fp)
   835bc:	10800017 	ldw	r2,0(r2)
   835c0:	10800717 	ldw	r2,28(r2)
   835c4:	10000926 	beq	r2,zero,835ec <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   835c8:	e0bffe17 	ldw	r2,-8(fp)
   835cc:	10800017 	ldw	r2,0(r2)
   835d0:	10800717 	ldw	r2,28(r2)
   835d4:	e1bffb17 	ldw	r6,-20(fp)
   835d8:	e17ffc17 	ldw	r5,-16(fp)
   835dc:	e13ffe17 	ldw	r4,-8(fp)
   835e0:	103ee83a 	callr	r2
   835e4:	e0bfff15 	stw	r2,-4(fp)
   835e8:	00000506 	br	83600 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   835ec:	00bfde84 	movi	r2,-134
   835f0:	e0bfff15 	stw	r2,-4(fp)
   835f4:	00000206 	br	83600 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   835f8:	00bfebc4 	movi	r2,-81
   835fc:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   83600:	e0bfff17 	ldw	r2,-4(fp)
   83604:	1000070e 	bge	r2,zero,83624 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   83608:	00835200 	call	83520 <alt_get_errno>
   8360c:	1007883a 	mov	r3,r2
   83610:	e0bfff17 	ldw	r2,-4(fp)
   83614:	0085c83a 	sub	r2,zero,r2
   83618:	18800015 	stw	r2,0(r3)
    rc = -1;
   8361c:	00bfffc4 	movi	r2,-1
   83620:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   83624:	e0bfff17 	ldw	r2,-4(fp)
}
   83628:	e037883a 	mov	sp,fp
   8362c:	dfc00117 	ldw	ra,4(sp)
   83630:	df000017 	ldw	fp,0(sp)
   83634:	dec00204 	addi	sp,sp,8
   83638:	f800283a 	ret

0008363c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8363c:	defffd04 	addi	sp,sp,-12
   83640:	dfc00215 	stw	ra,8(sp)
   83644:	df000115 	stw	fp,4(sp)
   83648:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8364c:	0009883a 	mov	r4,zero
   83650:	0083ae00 	call	83ae0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   83654:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   83658:	0083b1c0 	call	83b1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8365c:	01800234 	movhi	r6,8
   83660:	3195fe04 	addi	r6,r6,22520
   83664:	01400234 	movhi	r5,8
   83668:	2955fe04 	addi	r5,r5,22520
   8366c:	01000234 	movhi	r4,8
   83670:	2115fe04 	addi	r4,r4,22520
   83674:	0084d800 	call	84d80 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   83678:	008492c0 	call	8492c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8367c:	01000234 	movhi	r4,8
   83680:	21126404 	addi	r4,r4,18832
   83684:	008552c0 	call	8552c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   83688:	d0a6ad17 	ldw	r2,-25932(gp)
   8368c:	d0e6ae17 	ldw	r3,-25928(gp)
   83690:	d126af17 	ldw	r4,-25924(gp)
   83694:	200d883a 	mov	r6,r4
   83698:	180b883a 	mov	r5,r3
   8369c:	1009883a 	mov	r4,r2
   836a0:	00802600 	call	80260 <main>
   836a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   836a8:	01000044 	movi	r4,1
   836ac:	00831480 	call	83148 <close>
  exit (result);
   836b0:	e13fff17 	ldw	r4,-4(fp)
   836b4:	00855400 	call	85540 <exit>

000836b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   836b8:	defffe04 	addi	sp,sp,-8
   836bc:	df000115 	stw	fp,4(sp)
   836c0:	df000104 	addi	fp,sp,4
   836c4:	e13fff15 	stw	r4,-4(fp)
}
   836c8:	0001883a 	nop
   836cc:	e037883a 	mov	sp,fp
   836d0:	df000017 	ldw	fp,0(sp)
   836d4:	dec00104 	addi	sp,sp,4
   836d8:	f800283a 	ret

000836dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   836dc:	defffe04 	addi	sp,sp,-8
   836e0:	df000115 	stw	fp,4(sp)
   836e4:	df000104 	addi	fp,sp,4
   836e8:	e13fff15 	stw	r4,-4(fp)
}
   836ec:	0001883a 	nop
   836f0:	e037883a 	mov	sp,fp
   836f4:	df000017 	ldw	fp,0(sp)
   836f8:	dec00104 	addi	sp,sp,4
   836fc:	f800283a 	ret

00083700 <alt_get_errno>:
{
   83700:	defffe04 	addi	sp,sp,-8
   83704:	dfc00115 	stw	ra,4(sp)
   83708:	df000015 	stw	fp,0(sp)
   8370c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83710:	d0a00917 	ldw	r2,-32732(gp)
   83714:	10000326 	beq	r2,zero,83724 <alt_get_errno+0x24>
   83718:	d0a00917 	ldw	r2,-32732(gp)
   8371c:	103ee83a 	callr	r2
   83720:	00000106 	br	83728 <alt_get_errno+0x28>
   83724:	d0a6ac04 	addi	r2,gp,-25936
}
   83728:	e037883a 	mov	sp,fp
   8372c:	dfc00117 	ldw	ra,4(sp)
   83730:	df000017 	ldw	fp,0(sp)
   83734:	dec00204 	addi	sp,sp,8
   83738:	f800283a 	ret

0008373c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8373c:	defff904 	addi	sp,sp,-28
   83740:	dfc00615 	stw	ra,24(sp)
   83744:	df000515 	stw	fp,20(sp)
   83748:	df000504 	addi	fp,sp,20
   8374c:	e13ffd15 	stw	r4,-12(fp)
   83750:	e17ffc15 	stw	r5,-16(fp)
   83754:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83758:	e0bffd17 	ldw	r2,-12(fp)
   8375c:	10000916 	blt	r2,zero,83784 <read+0x48>
   83760:	e0fffd17 	ldw	r3,-12(fp)
   83764:	1805883a 	mov	r2,r3
   83768:	1085883a 	add	r2,r2,r2
   8376c:	10c5883a 	add	r2,r2,r3
   83770:	100490ba 	slli	r2,r2,2
   83774:	00c00234 	movhi	r3,8
   83778:	18d81b04 	addi	r3,r3,24684
   8377c:	10c5883a 	add	r2,r2,r3
   83780:	00000106 	br	83788 <read+0x4c>
   83784:	0005883a 	mov	r2,zero
   83788:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   8378c:	e0bfff17 	ldw	r2,-4(fp)
   83790:	10002226 	beq	r2,zero,8381c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   83794:	e0bfff17 	ldw	r2,-4(fp)
   83798:	10800217 	ldw	r2,8(r2)
   8379c:	108000cc 	andi	r2,r2,3
   837a0:	10800060 	cmpeqi	r2,r2,1
   837a4:	1000181e 	bne	r2,zero,83808 <read+0xcc>
        (fd->dev->read))
   837a8:	e0bfff17 	ldw	r2,-4(fp)
   837ac:	10800017 	ldw	r2,0(r2)
   837b0:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   837b4:	10001426 	beq	r2,zero,83808 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   837b8:	e0bfff17 	ldw	r2,-4(fp)
   837bc:	10800017 	ldw	r2,0(r2)
   837c0:	10800517 	ldw	r2,20(r2)
   837c4:	e0fffb17 	ldw	r3,-20(fp)
   837c8:	180d883a 	mov	r6,r3
   837cc:	e17ffc17 	ldw	r5,-16(fp)
   837d0:	e13fff17 	ldw	r4,-4(fp)
   837d4:	103ee83a 	callr	r2
   837d8:	e0bffe15 	stw	r2,-8(fp)
   837dc:	e0bffe17 	ldw	r2,-8(fp)
   837e0:	1000070e 	bge	r2,zero,83800 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   837e4:	00837000 	call	83700 <alt_get_errno>
   837e8:	1007883a 	mov	r3,r2
   837ec:	e0bffe17 	ldw	r2,-8(fp)
   837f0:	0085c83a 	sub	r2,zero,r2
   837f4:	18800015 	stw	r2,0(r3)
          return -1;
   837f8:	00bfffc4 	movi	r2,-1
   837fc:	00000c06 	br	83830 <read+0xf4>
        }
        return rval;
   83800:	e0bffe17 	ldw	r2,-8(fp)
   83804:	00000a06 	br	83830 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   83808:	00837000 	call	83700 <alt_get_errno>
   8380c:	1007883a 	mov	r3,r2
   83810:	00800344 	movi	r2,13
   83814:	18800015 	stw	r2,0(r3)
   83818:	00000406 	br	8382c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8381c:	00837000 	call	83700 <alt_get_errno>
   83820:	1007883a 	mov	r3,r2
   83824:	00801444 	movi	r2,81
   83828:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8382c:	00bfffc4 	movi	r2,-1
}
   83830:	e037883a 	mov	sp,fp
   83834:	dfc00117 	ldw	ra,4(sp)
   83838:	df000017 	ldw	fp,0(sp)
   8383c:	dec00204 	addi	sp,sp,8
   83840:	f800283a 	ret

00083844 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   83844:	defffe04 	addi	sp,sp,-8
   83848:	df000115 	stw	fp,4(sp)
   8384c:	df000104 	addi	fp,sp,4
   83850:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   83854:	e0bfff17 	ldw	r2,-4(fp)
   83858:	108000d0 	cmplti	r2,r2,3
   8385c:	1000101e 	bne	r2,zero,838a0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   83860:	e0ffff17 	ldw	r3,-4(fp)
   83864:	1805883a 	mov	r2,r3
   83868:	1085883a 	add	r2,r2,r2
   8386c:	10c5883a 	add	r2,r2,r3
   83870:	100490ba 	slli	r2,r2,2
   83874:	00c00234 	movhi	r3,8
   83878:	10c7883a 	add	r3,r2,r3
   8387c:	18181d15 	stw	zero,24692(r3)
    alt_fd_list[fd].dev      = 0;
   83880:	e0ffff17 	ldw	r3,-4(fp)
   83884:	1805883a 	mov	r2,r3
   83888:	1085883a 	add	r2,r2,r2
   8388c:	10c5883a 	add	r2,r2,r3
   83890:	100490ba 	slli	r2,r2,2
   83894:	00c00234 	movhi	r3,8
   83898:	10c7883a 	add	r3,r2,r3
   8389c:	18181b15 	stw	zero,24684(r3)
  }
}
   838a0:	0001883a 	nop
   838a4:	e037883a 	mov	sp,fp
   838a8:	df000017 	ldw	fp,0(sp)
   838ac:	dec00104 	addi	sp,sp,4
   838b0:	f800283a 	ret

000838b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   838b4:	defff904 	addi	sp,sp,-28
   838b8:	df000615 	stw	fp,24(sp)
   838bc:	df000604 	addi	fp,sp,24
   838c0:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   838c4:	0005303a 	rdctl	r2,status
   838c8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   838cc:	e0fffd17 	ldw	r3,-12(fp)
   838d0:	00bfff84 	movi	r2,-2
   838d4:	1884703a 	and	r2,r3,r2
   838d8:	1001703a 	wrctl	status,r2
  return context;
   838dc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   838e0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   838e4:	d0a00a17 	ldw	r2,-32728(gp)
   838e8:	10c000c4 	addi	r3,r2,3
   838ec:	00bfff04 	movi	r2,-4
   838f0:	1884703a 	and	r2,r3,r2
   838f4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   838f8:	d0e00a17 	ldw	r3,-32728(gp)
   838fc:	e0bffa17 	ldw	r2,-24(fp)
   83900:	1887883a 	add	r3,r3,r2
   83904:	008003b4 	movhi	r2,14
   83908:	1086a004 	addi	r2,r2,6784
   8390c:	10c0072e 	bgeu	r2,r3,8392c <sbrk+0x78>
   83910:	e0bfff17 	ldw	r2,-4(fp)
   83914:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   83918:	e0bffc17 	ldw	r2,-16(fp)
   8391c:	1001703a 	wrctl	status,r2
}
   83920:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   83924:	00bfffc4 	movi	r2,-1
   83928:	00000c06 	br	8395c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8392c:	d0a00a17 	ldw	r2,-32728(gp)
   83930:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   83934:	d0e00a17 	ldw	r3,-32728(gp)
   83938:	e0bffa17 	ldw	r2,-24(fp)
   8393c:	1885883a 	add	r2,r3,r2
   83940:	d0a00a15 	stw	r2,-32728(gp)
   83944:	e0bfff17 	ldw	r2,-4(fp)
   83948:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   8394c:	e0bffb17 	ldw	r2,-20(fp)
   83950:	1001703a 	wrctl	status,r2
}
   83954:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   83958:	e0bffe17 	ldw	r2,-8(fp)
} 
   8395c:	e037883a 	mov	sp,fp
   83960:	df000017 	ldw	fp,0(sp)
   83964:	dec00104 	addi	sp,sp,4
   83968:	f800283a 	ret

0008396c <alt_get_errno>:
{
   8396c:	defffe04 	addi	sp,sp,-8
   83970:	dfc00115 	stw	ra,4(sp)
   83974:	df000015 	stw	fp,0(sp)
   83978:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8397c:	d0a00917 	ldw	r2,-32732(gp)
   83980:	10000326 	beq	r2,zero,83990 <alt_get_errno+0x24>
   83984:	d0a00917 	ldw	r2,-32732(gp)
   83988:	103ee83a 	callr	r2
   8398c:	00000106 	br	83994 <alt_get_errno+0x28>
   83990:	d0a6ac04 	addi	r2,gp,-25936
}
   83994:	e037883a 	mov	sp,fp
   83998:	dfc00117 	ldw	ra,4(sp)
   8399c:	df000017 	ldw	fp,0(sp)
   839a0:	dec00204 	addi	sp,sp,8
   839a4:	f800283a 	ret

000839a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   839a8:	defff904 	addi	sp,sp,-28
   839ac:	dfc00615 	stw	ra,24(sp)
   839b0:	df000515 	stw	fp,20(sp)
   839b4:	df000504 	addi	fp,sp,20
   839b8:	e13ffd15 	stw	r4,-12(fp)
   839bc:	e17ffc15 	stw	r5,-16(fp)
   839c0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   839c4:	e0bffd17 	ldw	r2,-12(fp)
   839c8:	10000916 	blt	r2,zero,839f0 <write+0x48>
   839cc:	e0fffd17 	ldw	r3,-12(fp)
   839d0:	1805883a 	mov	r2,r3
   839d4:	1085883a 	add	r2,r2,r2
   839d8:	10c5883a 	add	r2,r2,r3
   839dc:	100490ba 	slli	r2,r2,2
   839e0:	00c00234 	movhi	r3,8
   839e4:	18d81b04 	addi	r3,r3,24684
   839e8:	10c5883a 	add	r2,r2,r3
   839ec:	00000106 	br	839f4 <write+0x4c>
   839f0:	0005883a 	mov	r2,zero
   839f4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   839f8:	e0bfff17 	ldw	r2,-4(fp)
   839fc:	10002126 	beq	r2,zero,83a84 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83a00:	e0bfff17 	ldw	r2,-4(fp)
   83a04:	10800217 	ldw	r2,8(r2)
   83a08:	108000cc 	andi	r2,r2,3
   83a0c:	10001826 	beq	r2,zero,83a70 <write+0xc8>
   83a10:	e0bfff17 	ldw	r2,-4(fp)
   83a14:	10800017 	ldw	r2,0(r2)
   83a18:	10800617 	ldw	r2,24(r2)
   83a1c:	10001426 	beq	r2,zero,83a70 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83a20:	e0bfff17 	ldw	r2,-4(fp)
   83a24:	10800017 	ldw	r2,0(r2)
   83a28:	10800617 	ldw	r2,24(r2)
   83a2c:	e0fffb17 	ldw	r3,-20(fp)
   83a30:	180d883a 	mov	r6,r3
   83a34:	e17ffc17 	ldw	r5,-16(fp)
   83a38:	e13fff17 	ldw	r4,-4(fp)
   83a3c:	103ee83a 	callr	r2
   83a40:	e0bffe15 	stw	r2,-8(fp)
   83a44:	e0bffe17 	ldw	r2,-8(fp)
   83a48:	1000070e 	bge	r2,zero,83a68 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   83a4c:	008396c0 	call	8396c <alt_get_errno>
   83a50:	1007883a 	mov	r3,r2
   83a54:	e0bffe17 	ldw	r2,-8(fp)
   83a58:	0085c83a 	sub	r2,zero,r2
   83a5c:	18800015 	stw	r2,0(r3)
        return -1;
   83a60:	00bfffc4 	movi	r2,-1
   83a64:	00000c06 	br	83a98 <write+0xf0>
      }
      return rval;
   83a68:	e0bffe17 	ldw	r2,-8(fp)
   83a6c:	00000a06 	br	83a98 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   83a70:	008396c0 	call	8396c <alt_get_errno>
   83a74:	1007883a 	mov	r3,r2
   83a78:	00800344 	movi	r2,13
   83a7c:	18800015 	stw	r2,0(r3)
   83a80:	00000406 	br	83a94 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   83a84:	008396c0 	call	8396c <alt_get_errno>
   83a88:	1007883a 	mov	r3,r2
   83a8c:	00801444 	movi	r2,81
   83a90:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83a94:	00bfffc4 	movi	r2,-1
}
   83a98:	e037883a 	mov	sp,fp
   83a9c:	dfc00117 	ldw	ra,4(sp)
   83aa0:	df000017 	ldw	fp,0(sp)
   83aa4:	dec00204 	addi	sp,sp,8
   83aa8:	f800283a 	ret

00083aac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83aac:	defffd04 	addi	sp,sp,-12
   83ab0:	dfc00215 	stw	ra,8(sp)
   83ab4:	df000115 	stw	fp,4(sp)
   83ab8:	df000104 	addi	fp,sp,4
   83abc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83ac0:	d1600604 	addi	r5,gp,-32744
   83ac4:	e13fff17 	ldw	r4,-4(fp)
   83ac8:	00848840 	call	84884 <alt_dev_llist_insert>
}
   83acc:	e037883a 	mov	sp,fp
   83ad0:	dfc00117 	ldw	ra,4(sp)
   83ad4:	df000017 	ldw	fp,0(sp)
   83ad8:	dec00204 	addi	sp,sp,8
   83adc:	f800283a 	ret

00083ae0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   83ae0:	defffd04 	addi	sp,sp,-12
   83ae4:	dfc00215 	stw	ra,8(sp)
   83ae8:	df000115 	stw	fp,4(sp)
   83aec:	df000104 	addi	fp,sp,4
   83af0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   83af4:	00852200 	call	85220 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   83af8:	00800044 	movi	r2,1
   83afc:	1001703a 	wrctl	status,r2
}
   83b00:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   83b04:	0001883a 	nop
   83b08:	e037883a 	mov	sp,fp
   83b0c:	dfc00117 	ldw	ra,4(sp)
   83b10:	df000017 	ldw	fp,0(sp)
   83b14:	dec00204 	addi	sp,sp,8
   83b18:	f800283a 	ret

00083b1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   83b1c:	defffe04 	addi	sp,sp,-8
   83b20:	dfc00115 	stw	ra,4(sp)
   83b24:	df000015 	stw	fp,0(sp)
   83b28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
   83b2c:	01c0fa04 	movi	r7,1000
   83b30:	01800044 	movi	r6,1
   83b34:	000b883a 	mov	r5,zero
   83b38:	01000434 	movhi	r4,16
   83b3c:	21040004 	addi	r4,r4,4096
   83b40:	00846700 	call	84670 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   83b44:	000d883a 	mov	r6,zero
   83b48:	000b883a 	mov	r5,zero
   83b4c:	01000234 	movhi	r4,8
   83b50:	21188504 	addi	r4,r4,25108
   83b54:	0083ce40 	call	83ce4 <altera_avalon_jtag_uart_init>
   83b58:	01000234 	movhi	r4,8
   83b5c:	21187b04 	addi	r4,r4,25068
   83b60:	0083aac0 	call	83aac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   83b64:	0001883a 	nop
}
   83b68:	0001883a 	nop
   83b6c:	e037883a 	mov	sp,fp
   83b70:	dfc00117 	ldw	ra,4(sp)
   83b74:	df000017 	ldw	fp,0(sp)
   83b78:	dec00204 	addi	sp,sp,8
   83b7c:	f800283a 	ret

00083b80 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   83b80:	defffa04 	addi	sp,sp,-24
   83b84:	dfc00515 	stw	ra,20(sp)
   83b88:	df000415 	stw	fp,16(sp)
   83b8c:	df000404 	addi	fp,sp,16
   83b90:	e13ffe15 	stw	r4,-8(fp)
   83b94:	e17ffd15 	stw	r5,-12(fp)
   83b98:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83b9c:	e0bffe17 	ldw	r2,-8(fp)
   83ba0:	10800017 	ldw	r2,0(r2)
   83ba4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83ba8:	e0bfff17 	ldw	r2,-4(fp)
   83bac:	10c00a04 	addi	r3,r2,40
   83bb0:	e0bffe17 	ldw	r2,-8(fp)
   83bb4:	10800217 	ldw	r2,8(r2)
   83bb8:	100f883a 	mov	r7,r2
   83bbc:	e1bffc17 	ldw	r6,-16(fp)
   83bc0:	e17ffd17 	ldw	r5,-12(fp)
   83bc4:	1809883a 	mov	r4,r3
   83bc8:	00841ac0 	call	841ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83bcc:	e037883a 	mov	sp,fp
   83bd0:	dfc00117 	ldw	ra,4(sp)
   83bd4:	df000017 	ldw	fp,0(sp)
   83bd8:	dec00204 	addi	sp,sp,8
   83bdc:	f800283a 	ret

00083be0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83be0:	defffa04 	addi	sp,sp,-24
   83be4:	dfc00515 	stw	ra,20(sp)
   83be8:	df000415 	stw	fp,16(sp)
   83bec:	df000404 	addi	fp,sp,16
   83bf0:	e13ffe15 	stw	r4,-8(fp)
   83bf4:	e17ffd15 	stw	r5,-12(fp)
   83bf8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83bfc:	e0bffe17 	ldw	r2,-8(fp)
   83c00:	10800017 	ldw	r2,0(r2)
   83c04:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83c08:	e0bfff17 	ldw	r2,-4(fp)
   83c0c:	10c00a04 	addi	r3,r2,40
   83c10:	e0bffe17 	ldw	r2,-8(fp)
   83c14:	10800217 	ldw	r2,8(r2)
   83c18:	100f883a 	mov	r7,r2
   83c1c:	e1bffc17 	ldw	r6,-16(fp)
   83c20:	e17ffd17 	ldw	r5,-12(fp)
   83c24:	1809883a 	mov	r4,r3
   83c28:	00843cc0 	call	843cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83c2c:	e037883a 	mov	sp,fp
   83c30:	dfc00117 	ldw	ra,4(sp)
   83c34:	df000017 	ldw	fp,0(sp)
   83c38:	dec00204 	addi	sp,sp,8
   83c3c:	f800283a 	ret

00083c40 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   83c40:	defffc04 	addi	sp,sp,-16
   83c44:	dfc00315 	stw	ra,12(sp)
   83c48:	df000215 	stw	fp,8(sp)
   83c4c:	df000204 	addi	fp,sp,8
   83c50:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83c54:	e0bffe17 	ldw	r2,-8(fp)
   83c58:	10800017 	ldw	r2,0(r2)
   83c5c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   83c60:	e0bfff17 	ldw	r2,-4(fp)
   83c64:	10c00a04 	addi	r3,r2,40
   83c68:	e0bffe17 	ldw	r2,-8(fp)
   83c6c:	10800217 	ldw	r2,8(r2)
   83c70:	100b883a 	mov	r5,r2
   83c74:	1809883a 	mov	r4,r3
   83c78:	00840500 	call	84050 <altera_avalon_jtag_uart_close>
}
   83c7c:	e037883a 	mov	sp,fp
   83c80:	dfc00117 	ldw	ra,4(sp)
   83c84:	df000017 	ldw	fp,0(sp)
   83c88:	dec00204 	addi	sp,sp,8
   83c8c:	f800283a 	ret

00083c90 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   83c90:	defffa04 	addi	sp,sp,-24
   83c94:	dfc00515 	stw	ra,20(sp)
   83c98:	df000415 	stw	fp,16(sp)
   83c9c:	df000404 	addi	fp,sp,16
   83ca0:	e13ffe15 	stw	r4,-8(fp)
   83ca4:	e17ffd15 	stw	r5,-12(fp)
   83ca8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83cac:	e0bffe17 	ldw	r2,-8(fp)
   83cb0:	10800017 	ldw	r2,0(r2)
   83cb4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83cb8:	e0bfff17 	ldw	r2,-4(fp)
   83cbc:	10800a04 	addi	r2,r2,40
   83cc0:	e1bffc17 	ldw	r6,-16(fp)
   83cc4:	e17ffd17 	ldw	r5,-12(fp)
   83cc8:	1009883a 	mov	r4,r2
   83ccc:	00840b80 	call	840b8 <altera_avalon_jtag_uart_ioctl>
}
   83cd0:	e037883a 	mov	sp,fp
   83cd4:	dfc00117 	ldw	ra,4(sp)
   83cd8:	df000017 	ldw	fp,0(sp)
   83cdc:	dec00204 	addi	sp,sp,8
   83ce0:	f800283a 	ret

00083ce4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83ce4:	defffa04 	addi	sp,sp,-24
   83ce8:	dfc00515 	stw	ra,20(sp)
   83cec:	df000415 	stw	fp,16(sp)
   83cf0:	df000404 	addi	fp,sp,16
   83cf4:	e13fff15 	stw	r4,-4(fp)
   83cf8:	e17ffe15 	stw	r5,-8(fp)
   83cfc:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83d00:	e0bfff17 	ldw	r2,-4(fp)
   83d04:	00c00044 	movi	r3,1
   83d08:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83d0c:	e0bfff17 	ldw	r2,-4(fp)
   83d10:	10800017 	ldw	r2,0(r2)
   83d14:	10800104 	addi	r2,r2,4
   83d18:	1007883a 	mov	r3,r2
   83d1c:	e0bfff17 	ldw	r2,-4(fp)
   83d20:	10800817 	ldw	r2,32(r2)
   83d24:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83d28:	e0bffe17 	ldw	r2,-8(fp)
   83d2c:	e0fffd17 	ldw	r3,-12(fp)
   83d30:	d8000015 	stw	zero,0(sp)
   83d34:	e1ffff17 	ldw	r7,-4(fp)
   83d38:	01800234 	movhi	r6,8
   83d3c:	318f6904 	addi	r6,r6,15780
   83d40:	180b883a 	mov	r5,r3
   83d44:	1009883a 	mov	r4,r2
   83d48:	0084a140 	call	84a14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   83d4c:	e0bfff17 	ldw	r2,-4(fp)
   83d50:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   83d54:	e0bfff17 	ldw	r2,-4(fp)
   83d58:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   83d5c:	d0e6b117 	ldw	r3,-25916(gp)
   83d60:	e1ffff17 	ldw	r7,-4(fp)
   83d64:	01800234 	movhi	r6,8
   83d68:	318fec04 	addi	r6,r6,16304
   83d6c:	180b883a 	mov	r5,r3
   83d70:	1009883a 	mov	r4,r2
   83d74:	00846f40 	call	846f4 <alt_alarm_start>
   83d78:	1000040e 	bge	r2,zero,83d8c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   83d7c:	e0ffff17 	ldw	r3,-4(fp)
   83d80:	00a00034 	movhi	r2,32768
   83d84:	10bfffc4 	addi	r2,r2,-1
   83d88:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   83d8c:	0001883a 	nop
   83d90:	e037883a 	mov	sp,fp
   83d94:	dfc00117 	ldw	ra,4(sp)
   83d98:	df000017 	ldw	fp,0(sp)
   83d9c:	dec00204 	addi	sp,sp,8
   83da0:	f800283a 	ret

00083da4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83da4:	defff804 	addi	sp,sp,-32
   83da8:	df000715 	stw	fp,28(sp)
   83dac:	df000704 	addi	fp,sp,28
   83db0:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83db4:	e0bff917 	ldw	r2,-28(fp)
   83db8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   83dbc:	e0bffd17 	ldw	r2,-12(fp)
   83dc0:	10800017 	ldw	r2,0(r2)
   83dc4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83dc8:	e0bffc17 	ldw	r2,-16(fp)
   83dcc:	10800104 	addi	r2,r2,4
   83dd0:	10800037 	ldwio	r2,0(r2)
   83dd4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83dd8:	e0bffb17 	ldw	r2,-20(fp)
   83ddc:	1080c00c 	andi	r2,r2,768
   83de0:	10006d26 	beq	r2,zero,83f98 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83de4:	e0bffb17 	ldw	r2,-20(fp)
   83de8:	1080400c 	andi	r2,r2,256
   83dec:	10003526 	beq	r2,zero,83ec4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83df0:	00800074 	movhi	r2,1
   83df4:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83df8:	e0bffd17 	ldw	r2,-12(fp)
   83dfc:	10800a17 	ldw	r2,40(r2)
   83e00:	10800044 	addi	r2,r2,1
   83e04:	1081ffcc 	andi	r2,r2,2047
   83e08:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   83e0c:	e0bffd17 	ldw	r2,-12(fp)
   83e10:	10800b17 	ldw	r2,44(r2)
   83e14:	e0fffa17 	ldw	r3,-24(fp)
   83e18:	18801526 	beq	r3,r2,83e70 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83e1c:	e0bffc17 	ldw	r2,-16(fp)
   83e20:	10800037 	ldwio	r2,0(r2)
   83e24:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83e28:	e0bfff17 	ldw	r2,-4(fp)
   83e2c:	10a0000c 	andi	r2,r2,32768
   83e30:	10001126 	beq	r2,zero,83e78 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83e34:	e0bffd17 	ldw	r2,-12(fp)
   83e38:	10800a17 	ldw	r2,40(r2)
   83e3c:	e0ffff17 	ldw	r3,-4(fp)
   83e40:	1809883a 	mov	r4,r3
   83e44:	e0fffd17 	ldw	r3,-12(fp)
   83e48:	1885883a 	add	r2,r3,r2
   83e4c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83e50:	e0bffd17 	ldw	r2,-12(fp)
   83e54:	10800a17 	ldw	r2,40(r2)
   83e58:	10800044 	addi	r2,r2,1
   83e5c:	10c1ffcc 	andi	r3,r2,2047
   83e60:	e0bffd17 	ldw	r2,-12(fp)
   83e64:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   83e68:	0001883a 	nop
      {
   83e6c:	003fe206 	br	83df8 <altera_avalon_jtag_uart_irq+0x54>
          break;
   83e70:	0001883a 	nop
   83e74:	00000106 	br	83e7c <altera_avalon_jtag_uart_irq+0xd8>
          break;
   83e78:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   83e7c:	e0bfff17 	ldw	r2,-4(fp)
   83e80:	10bfffec 	andhi	r2,r2,65535
   83e84:	10000f26 	beq	r2,zero,83ec4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83e88:	e0bffd17 	ldw	r2,-12(fp)
   83e8c:	10c00817 	ldw	r3,32(r2)
   83e90:	00bfff84 	movi	r2,-2
   83e94:	1886703a 	and	r3,r3,r2
   83e98:	e0bffd17 	ldw	r2,-12(fp)
   83e9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   83ea0:	e0bffc17 	ldw	r2,-16(fp)
   83ea4:	10800104 	addi	r2,r2,4
   83ea8:	1007883a 	mov	r3,r2
   83eac:	e0bffd17 	ldw	r2,-12(fp)
   83eb0:	10800817 	ldw	r2,32(r2)
   83eb4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83eb8:	e0bffc17 	ldw	r2,-16(fp)
   83ebc:	10800104 	addi	r2,r2,4
   83ec0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   83ec4:	e0bffb17 	ldw	r2,-20(fp)
   83ec8:	1080800c 	andi	r2,r2,512
   83ecc:	103fbe26 	beq	r2,zero,83dc8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   83ed0:	e0bffb17 	ldw	r2,-20(fp)
   83ed4:	1004d43a 	srli	r2,r2,16
   83ed8:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   83edc:	00001406 	br	83f30 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   83ee0:	e0bffc17 	ldw	r2,-16(fp)
   83ee4:	e0fffd17 	ldw	r3,-12(fp)
   83ee8:	18c00d17 	ldw	r3,52(r3)
   83eec:	e13ffd17 	ldw	r4,-12(fp)
   83ef0:	20c7883a 	add	r3,r4,r3
   83ef4:	18c20e03 	ldbu	r3,2104(r3)
   83ef8:	18c03fcc 	andi	r3,r3,255
   83efc:	18c0201c 	xori	r3,r3,128
   83f00:	18ffe004 	addi	r3,r3,-128
   83f04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83f08:	e0bffd17 	ldw	r2,-12(fp)
   83f0c:	10800d17 	ldw	r2,52(r2)
   83f10:	10800044 	addi	r2,r2,1
   83f14:	10c1ffcc 	andi	r3,r2,2047
   83f18:	e0bffd17 	ldw	r2,-12(fp)
   83f1c:	10c00d15 	stw	r3,52(r2)
   83f20:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   83f24:	e0bffe17 	ldw	r2,-8(fp)
   83f28:	10bfffc4 	addi	r2,r2,-1
   83f2c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   83f30:	e0bffe17 	ldw	r2,-8(fp)
   83f34:	10000526 	beq	r2,zero,83f4c <altera_avalon_jtag_uart_irq+0x1a8>
   83f38:	e0bffd17 	ldw	r2,-12(fp)
   83f3c:	10c00d17 	ldw	r3,52(r2)
   83f40:	e0bffd17 	ldw	r2,-12(fp)
   83f44:	10800c17 	ldw	r2,48(r2)
   83f48:	18bfe51e 	bne	r3,r2,83ee0 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
   83f4c:	e0bffe17 	ldw	r2,-8(fp)
   83f50:	103f9d26 	beq	r2,zero,83dc8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   83f54:	e0bffd17 	ldw	r2,-12(fp)
   83f58:	10c00817 	ldw	r3,32(r2)
   83f5c:	00bfff44 	movi	r2,-3
   83f60:	1886703a 	and	r3,r3,r2
   83f64:	e0bffd17 	ldw	r2,-12(fp)
   83f68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83f6c:	e0bffd17 	ldw	r2,-12(fp)
   83f70:	10800017 	ldw	r2,0(r2)
   83f74:	10800104 	addi	r2,r2,4
   83f78:	1007883a 	mov	r3,r2
   83f7c:	e0bffd17 	ldw	r2,-12(fp)
   83f80:	10800817 	ldw	r2,32(r2)
   83f84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83f88:	e0bffc17 	ldw	r2,-16(fp)
   83f8c:	10800104 	addi	r2,r2,4
   83f90:	10800037 	ldwio	r2,0(r2)
  {
   83f94:	003f8c06 	br	83dc8 <altera_avalon_jtag_uart_irq+0x24>
      break;
   83f98:	0001883a 	nop
      }
    }
  }
}
   83f9c:	0001883a 	nop
   83fa0:	e037883a 	mov	sp,fp
   83fa4:	df000017 	ldw	fp,0(sp)
   83fa8:	dec00104 	addi	sp,sp,4
   83fac:	f800283a 	ret

00083fb0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   83fb0:	defffc04 	addi	sp,sp,-16
   83fb4:	df000315 	stw	fp,12(sp)
   83fb8:	df000304 	addi	fp,sp,12
   83fbc:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   83fc0:	e0bffd17 	ldw	r2,-12(fp)
   83fc4:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   83fc8:	e0bfff17 	ldw	r2,-4(fp)
   83fcc:	10800017 	ldw	r2,0(r2)
   83fd0:	10800104 	addi	r2,r2,4
   83fd4:	10800037 	ldwio	r2,0(r2)
   83fd8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   83fdc:	e0bffe17 	ldw	r2,-8(fp)
   83fe0:	1081000c 	andi	r2,r2,1024
   83fe4:	10000b26 	beq	r2,zero,84014 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   83fe8:	e0bfff17 	ldw	r2,-4(fp)
   83fec:	10800017 	ldw	r2,0(r2)
   83ff0:	10800104 	addi	r2,r2,4
   83ff4:	1007883a 	mov	r3,r2
   83ff8:	e0bfff17 	ldw	r2,-4(fp)
   83ffc:	10800817 	ldw	r2,32(r2)
   84000:	10810014 	ori	r2,r2,1024
   84004:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   84008:	e0bfff17 	ldw	r2,-4(fp)
   8400c:	10000915 	stw	zero,36(r2)
   84010:	00000a06 	br	8403c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   84014:	e0bfff17 	ldw	r2,-4(fp)
   84018:	10c00917 	ldw	r3,36(r2)
   8401c:	00a00034 	movhi	r2,32768
   84020:	10bfff04 	addi	r2,r2,-4
   84024:	10c00536 	bltu	r2,r3,8403c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   84028:	e0bfff17 	ldw	r2,-4(fp)
   8402c:	10800917 	ldw	r2,36(r2)
   84030:	10c00044 	addi	r3,r2,1
   84034:	e0bfff17 	ldw	r2,-4(fp)
   84038:	10c00915 	stw	r3,36(r2)
   8403c:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   84040:	e037883a 	mov	sp,fp
   84044:	df000017 	ldw	fp,0(sp)
   84048:	dec00104 	addi	sp,sp,4
   8404c:	f800283a 	ret

00084050 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   84050:	defffd04 	addi	sp,sp,-12
   84054:	df000215 	stw	fp,8(sp)
   84058:	df000204 	addi	fp,sp,8
   8405c:	e13fff15 	stw	r4,-4(fp)
   84060:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   84064:	00000506 	br	8407c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   84068:	e0bffe17 	ldw	r2,-8(fp)
   8406c:	1090000c 	andi	r2,r2,16384
   84070:	10000226 	beq	r2,zero,8407c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   84074:	00bffd44 	movi	r2,-11
   84078:	00000b06 	br	840a8 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8407c:	e0bfff17 	ldw	r2,-4(fp)
   84080:	10c00d17 	ldw	r3,52(r2)
   84084:	e0bfff17 	ldw	r2,-4(fp)
   84088:	10800c17 	ldw	r2,48(r2)
   8408c:	18800526 	beq	r3,r2,840a4 <altera_avalon_jtag_uart_close+0x54>
   84090:	e0bfff17 	ldw	r2,-4(fp)
   84094:	10c00917 	ldw	r3,36(r2)
   84098:	e0bfff17 	ldw	r2,-4(fp)
   8409c:	10800117 	ldw	r2,4(r2)
   840a0:	18bff136 	bltu	r3,r2,84068 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   840a4:	0005883a 	mov	r2,zero
}
   840a8:	e037883a 	mov	sp,fp
   840ac:	df000017 	ldw	fp,0(sp)
   840b0:	dec00104 	addi	sp,sp,4
   840b4:	f800283a 	ret

000840b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   840b8:	defffa04 	addi	sp,sp,-24
   840bc:	df000515 	stw	fp,20(sp)
   840c0:	df000504 	addi	fp,sp,20
   840c4:	e13ffd15 	stw	r4,-12(fp)
   840c8:	e17ffc15 	stw	r5,-16(fp)
   840cc:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   840d0:	00bff9c4 	movi	r2,-25
   840d4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   840d8:	e0bffc17 	ldw	r2,-16(fp)
   840dc:	109a8060 	cmpeqi	r2,r2,27137
   840e0:	1000041e 	bne	r2,zero,840f4 <altera_avalon_jtag_uart_ioctl+0x3c>
   840e4:	e0bffc17 	ldw	r2,-16(fp)
   840e8:	109a80a0 	cmpeqi	r2,r2,27138
   840ec:	1000181e 	bne	r2,zero,84150 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   840f0:	00002906 	br	84198 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   840f4:	e0bffd17 	ldw	r2,-12(fp)
   840f8:	10c00117 	ldw	r3,4(r2)
   840fc:	00a00034 	movhi	r2,32768
   84100:	10bfffc4 	addi	r2,r2,-1
   84104:	18802126 	beq	r3,r2,8418c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   84108:	e0bffb17 	ldw	r2,-20(fp)
   8410c:	10800017 	ldw	r2,0(r2)
   84110:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   84114:	e0bffe17 	ldw	r2,-8(fp)
   84118:	10800090 	cmplti	r2,r2,2
   8411c:	1000061e 	bne	r2,zero,84138 <altera_avalon_jtag_uart_ioctl+0x80>
   84120:	e0fffe17 	ldw	r3,-8(fp)
   84124:	00a00034 	movhi	r2,32768
   84128:	10bfffc4 	addi	r2,r2,-1
   8412c:	18800226 	beq	r3,r2,84138 <altera_avalon_jtag_uart_ioctl+0x80>
   84130:	e0bffe17 	ldw	r2,-8(fp)
   84134:	00000206 	br	84140 <altera_avalon_jtag_uart_ioctl+0x88>
   84138:	00a00034 	movhi	r2,32768
   8413c:	10bfff84 	addi	r2,r2,-2
   84140:	e0fffd17 	ldw	r3,-12(fp)
   84144:	18800115 	stw	r2,4(r3)
      rc = 0;
   84148:	e03fff15 	stw	zero,-4(fp)
    break;
   8414c:	00000f06 	br	8418c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   84150:	e0bffd17 	ldw	r2,-12(fp)
   84154:	10c00117 	ldw	r3,4(r2)
   84158:	00a00034 	movhi	r2,32768
   8415c:	10bfffc4 	addi	r2,r2,-1
   84160:	18800c26 	beq	r3,r2,84194 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   84164:	e0bffd17 	ldw	r2,-12(fp)
   84168:	10c00917 	ldw	r3,36(r2)
   8416c:	e0bffd17 	ldw	r2,-12(fp)
   84170:	10800117 	ldw	r2,4(r2)
   84174:	1885803a 	cmpltu	r2,r3,r2
   84178:	10c03fcc 	andi	r3,r2,255
   8417c:	e0bffb17 	ldw	r2,-20(fp)
   84180:	10c00015 	stw	r3,0(r2)
      rc = 0;
   84184:	e03fff15 	stw	zero,-4(fp)
    break;
   84188:	00000206 	br	84194 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   8418c:	0001883a 	nop
   84190:	00000106 	br	84198 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   84194:	0001883a 	nop
  }

  return rc;
   84198:	e0bfff17 	ldw	r2,-4(fp)
}
   8419c:	e037883a 	mov	sp,fp
   841a0:	df000017 	ldw	fp,0(sp)
   841a4:	dec00104 	addi	sp,sp,4
   841a8:	f800283a 	ret

000841ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   841ac:	defff304 	addi	sp,sp,-52
   841b0:	dfc00c15 	stw	ra,48(sp)
   841b4:	df000b15 	stw	fp,44(sp)
   841b8:	df000b04 	addi	fp,sp,44
   841bc:	e13ff815 	stw	r4,-32(fp)
   841c0:	e17ff715 	stw	r5,-36(fp)
   841c4:	e1bff615 	stw	r6,-40(fp)
   841c8:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   841cc:	e0bff717 	ldw	r2,-36(fp)
   841d0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   841d4:	00004706 	br	842f4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   841d8:	e0bff817 	ldw	r2,-32(fp)
   841dc:	10800a17 	ldw	r2,40(r2)
   841e0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   841e4:	e0bff817 	ldw	r2,-32(fp)
   841e8:	10800b17 	ldw	r2,44(r2)
   841ec:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   841f0:	e0fffd17 	ldw	r3,-12(fp)
   841f4:	e0bffc17 	ldw	r2,-16(fp)
   841f8:	18800536 	bltu	r3,r2,84210 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   841fc:	e0fffd17 	ldw	r3,-12(fp)
   84200:	e0bffc17 	ldw	r2,-16(fp)
   84204:	1885c83a 	sub	r2,r3,r2
   84208:	e0bffe15 	stw	r2,-8(fp)
   8420c:	00000406 	br	84220 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   84210:	00c20004 	movi	r3,2048
   84214:	e0bffc17 	ldw	r2,-16(fp)
   84218:	1885c83a 	sub	r2,r3,r2
   8421c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   84220:	e0bffe17 	ldw	r2,-8(fp)
   84224:	10001e26 	beq	r2,zero,842a0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   84228:	e0fff617 	ldw	r3,-40(fp)
   8422c:	e0bffe17 	ldw	r2,-8(fp)
   84230:	1880022e 	bgeu	r3,r2,8423c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   84234:	e0bff617 	ldw	r2,-40(fp)
   84238:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8423c:	e0bff817 	ldw	r2,-32(fp)
   84240:	10c00e04 	addi	r3,r2,56
   84244:	e0bffc17 	ldw	r2,-16(fp)
   84248:	1885883a 	add	r2,r3,r2
   8424c:	e1bffe17 	ldw	r6,-8(fp)
   84250:	100b883a 	mov	r5,r2
   84254:	e13fff17 	ldw	r4,-4(fp)
   84258:	008166c0 	call	8166c <memcpy>
      ptr   += n;
   8425c:	e0ffff17 	ldw	r3,-4(fp)
   84260:	e0bffe17 	ldw	r2,-8(fp)
   84264:	1885883a 	add	r2,r3,r2
   84268:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   8426c:	e0fff617 	ldw	r3,-40(fp)
   84270:	e0bffe17 	ldw	r2,-8(fp)
   84274:	1885c83a 	sub	r2,r3,r2
   84278:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8427c:	e0fffc17 	ldw	r3,-16(fp)
   84280:	e0bffe17 	ldw	r2,-8(fp)
   84284:	1885883a 	add	r2,r3,r2
   84288:	10c1ffcc 	andi	r3,r2,2047
   8428c:	e0bff817 	ldw	r2,-32(fp)
   84290:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   84294:	e0bff617 	ldw	r2,-40(fp)
   84298:	00bfcf16 	blt	zero,r2,841d8 <altera_avalon_jtag_uart_read+0x2c>
   8429c:	00000106 	br	842a4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   842a0:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   842a4:	e0ffff17 	ldw	r3,-4(fp)
   842a8:	e0bff717 	ldw	r2,-36(fp)
   842ac:	1880141e 	bne	r3,r2,84300 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   842b0:	e0bff517 	ldw	r2,-44(fp)
   842b4:	1090000c 	andi	r2,r2,16384
   842b8:	1000131e 	bne	r2,zero,84308 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   842bc:	0001883a 	nop
   842c0:	e0bff817 	ldw	r2,-32(fp)
   842c4:	10800a17 	ldw	r2,40(r2)
   842c8:	e0fffd17 	ldw	r3,-12(fp)
   842cc:	1880051e 	bne	r3,r2,842e4 <altera_avalon_jtag_uart_read+0x138>
   842d0:	e0bff817 	ldw	r2,-32(fp)
   842d4:	10c00917 	ldw	r3,36(r2)
   842d8:	e0bff817 	ldw	r2,-32(fp)
   842dc:	10800117 	ldw	r2,4(r2)
   842e0:	18bff736 	bltu	r3,r2,842c0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   842e4:	e0bff817 	ldw	r2,-32(fp)
   842e8:	10800a17 	ldw	r2,40(r2)
   842ec:	e0fffd17 	ldw	r3,-12(fp)
   842f0:	18800726 	beq	r3,r2,84310 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   842f4:	e0bff617 	ldw	r2,-40(fp)
   842f8:	00bfb716 	blt	zero,r2,841d8 <altera_avalon_jtag_uart_read+0x2c>
   842fc:	00000506 	br	84314 <altera_avalon_jtag_uart_read+0x168>
      break;
   84300:	0001883a 	nop
   84304:	00000306 	br	84314 <altera_avalon_jtag_uart_read+0x168>
      break;
   84308:	0001883a 	nop
   8430c:	00000106 	br	84314 <altera_avalon_jtag_uart_read+0x168>
      break;
   84310:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   84314:	e0ffff17 	ldw	r3,-4(fp)
   84318:	e0bff717 	ldw	r2,-36(fp)
   8431c:	18801926 	beq	r3,r2,84384 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   84320:	0005303a 	rdctl	r2,status
   84324:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84328:	e0fff917 	ldw	r3,-28(fp)
   8432c:	00bfff84 	movi	r2,-2
   84330:	1884703a 	and	r2,r3,r2
   84334:	1001703a 	wrctl	status,r2
  return context;
   84338:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8433c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   84340:	e0bff817 	ldw	r2,-32(fp)
   84344:	10800817 	ldw	r2,32(r2)
   84348:	10c00054 	ori	r3,r2,1
   8434c:	e0bff817 	ldw	r2,-32(fp)
   84350:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84354:	e0bff817 	ldw	r2,-32(fp)
   84358:	10800017 	ldw	r2,0(r2)
   8435c:	10800104 	addi	r2,r2,4
   84360:	1007883a 	mov	r3,r2
   84364:	e0bff817 	ldw	r2,-32(fp)
   84368:	10800817 	ldw	r2,32(r2)
   8436c:	18800035 	stwio	r2,0(r3)
   84370:	e0bffb17 	ldw	r2,-20(fp)
   84374:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   84378:	e0bffa17 	ldw	r2,-24(fp)
   8437c:	1001703a 	wrctl	status,r2
}
   84380:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   84384:	e0ffff17 	ldw	r3,-4(fp)
   84388:	e0bff717 	ldw	r2,-36(fp)
   8438c:	18800426 	beq	r3,r2,843a0 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   84390:	e0ffff17 	ldw	r3,-4(fp)
   84394:	e0bff717 	ldw	r2,-36(fp)
   84398:	1885c83a 	sub	r2,r3,r2
   8439c:	00000606 	br	843b8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   843a0:	e0bff517 	ldw	r2,-44(fp)
   843a4:	1090000c 	andi	r2,r2,16384
   843a8:	10000226 	beq	r2,zero,843b4 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   843ac:	00bffd44 	movi	r2,-11
   843b0:	00000106 	br	843b8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   843b4:	00bffec4 	movi	r2,-5
}
   843b8:	e037883a 	mov	sp,fp
   843bc:	dfc00117 	ldw	ra,4(sp)
   843c0:	df000017 	ldw	fp,0(sp)
   843c4:	dec00204 	addi	sp,sp,8
   843c8:	f800283a 	ret

000843cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   843cc:	defff304 	addi	sp,sp,-52
   843d0:	dfc00c15 	stw	ra,48(sp)
   843d4:	df000b15 	stw	fp,44(sp)
   843d8:	df000b04 	addi	fp,sp,44
   843dc:	e13ff815 	stw	r4,-32(fp)
   843e0:	e17ff715 	stw	r5,-36(fp)
   843e4:	e1bff615 	stw	r6,-40(fp)
   843e8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   843ec:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   843f0:	e0bff717 	ldw	r2,-36(fp)
   843f4:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   843f8:	00003706 	br	844d8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   843fc:	e0bff817 	ldw	r2,-32(fp)
   84400:	10800c17 	ldw	r2,48(r2)
   84404:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   84408:	e0bff817 	ldw	r2,-32(fp)
   8440c:	10800d17 	ldw	r2,52(r2)
   84410:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   84414:	e0fffc17 	ldw	r3,-16(fp)
   84418:	e0bfff17 	ldw	r2,-4(fp)
   8441c:	1880062e 	bgeu	r3,r2,84438 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   84420:	e0ffff17 	ldw	r3,-4(fp)
   84424:	e0bffc17 	ldw	r2,-16(fp)
   84428:	1885c83a 	sub	r2,r3,r2
   8442c:	10bfffc4 	addi	r2,r2,-1
   84430:	e0bffe15 	stw	r2,-8(fp)
   84434:	00000b06 	br	84464 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   84438:	e0bfff17 	ldw	r2,-4(fp)
   8443c:	10000526 	beq	r2,zero,84454 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   84440:	00c20004 	movi	r3,2048
   84444:	e0bffc17 	ldw	r2,-16(fp)
   84448:	1885c83a 	sub	r2,r3,r2
   8444c:	e0bffe15 	stw	r2,-8(fp)
   84450:	00000406 	br	84464 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   84454:	00c1ffc4 	movi	r3,2047
   84458:	e0bffc17 	ldw	r2,-16(fp)
   8445c:	1885c83a 	sub	r2,r3,r2
   84460:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   84464:	e0bffe17 	ldw	r2,-8(fp)
   84468:	10001e26 	beq	r2,zero,844e4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8446c:	e0fff617 	ldw	r3,-40(fp)
   84470:	e0bffe17 	ldw	r2,-8(fp)
   84474:	1880022e 	bgeu	r3,r2,84480 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   84478:	e0bff617 	ldw	r2,-40(fp)
   8447c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   84480:	e0bff817 	ldw	r2,-32(fp)
   84484:	10c20e04 	addi	r3,r2,2104
   84488:	e0bffc17 	ldw	r2,-16(fp)
   8448c:	1885883a 	add	r2,r3,r2
   84490:	e1bffe17 	ldw	r6,-8(fp)
   84494:	e17ff717 	ldw	r5,-36(fp)
   84498:	1009883a 	mov	r4,r2
   8449c:	008166c0 	call	8166c <memcpy>
      ptr   += n;
   844a0:	e0fff717 	ldw	r3,-36(fp)
   844a4:	e0bffe17 	ldw	r2,-8(fp)
   844a8:	1885883a 	add	r2,r3,r2
   844ac:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   844b0:	e0fff617 	ldw	r3,-40(fp)
   844b4:	e0bffe17 	ldw	r2,-8(fp)
   844b8:	1885c83a 	sub	r2,r3,r2
   844bc:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   844c0:	e0fffc17 	ldw	r3,-16(fp)
   844c4:	e0bffe17 	ldw	r2,-8(fp)
   844c8:	1885883a 	add	r2,r3,r2
   844cc:	10c1ffcc 	andi	r3,r2,2047
   844d0:	e0bff817 	ldw	r2,-32(fp)
   844d4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   844d8:	e0bff617 	ldw	r2,-40(fp)
   844dc:	00bfc716 	blt	zero,r2,843fc <altera_avalon_jtag_uart_write+0x30>
   844e0:	00000106 	br	844e8 <altera_avalon_jtag_uart_write+0x11c>
        break;
   844e4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   844e8:	0005303a 	rdctl	r2,status
   844ec:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   844f0:	e0fff917 	ldw	r3,-28(fp)
   844f4:	00bfff84 	movi	r2,-2
   844f8:	1884703a 	and	r2,r3,r2
   844fc:	1001703a 	wrctl	status,r2
  return context;
   84500:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   84504:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   84508:	e0bff817 	ldw	r2,-32(fp)
   8450c:	10800817 	ldw	r2,32(r2)
   84510:	10c00094 	ori	r3,r2,2
   84514:	e0bff817 	ldw	r2,-32(fp)
   84518:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8451c:	e0bff817 	ldw	r2,-32(fp)
   84520:	10800017 	ldw	r2,0(r2)
   84524:	10800104 	addi	r2,r2,4
   84528:	1007883a 	mov	r3,r2
   8452c:	e0bff817 	ldw	r2,-32(fp)
   84530:	10800817 	ldw	r2,32(r2)
   84534:	18800035 	stwio	r2,0(r3)
   84538:	e0bffb17 	ldw	r2,-20(fp)
   8453c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   84540:	e0bffa17 	ldw	r2,-24(fp)
   84544:	1001703a 	wrctl	status,r2
}
   84548:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8454c:	e0bff617 	ldw	r2,-40(fp)
   84550:	0080100e 	bge	zero,r2,84594 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   84554:	e0bff517 	ldw	r2,-44(fp)
   84558:	1090000c 	andi	r2,r2,16384
   8455c:	1000101e 	bne	r2,zero,845a0 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   84560:	0001883a 	nop
   84564:	e0bff817 	ldw	r2,-32(fp)
   84568:	10800d17 	ldw	r2,52(r2)
   8456c:	e0ffff17 	ldw	r3,-4(fp)
   84570:	1880051e 	bne	r3,r2,84588 <altera_avalon_jtag_uart_write+0x1bc>
   84574:	e0bff817 	ldw	r2,-32(fp)
   84578:	10c00917 	ldw	r3,36(r2)
   8457c:	e0bff817 	ldw	r2,-32(fp)
   84580:	10800117 	ldw	r2,4(r2)
   84584:	18bff736 	bltu	r3,r2,84564 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   84588:	e0bff817 	ldw	r2,-32(fp)
   8458c:	10800917 	ldw	r2,36(r2)
   84590:	1000051e 	bne	r2,zero,845a8 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   84594:	e0bff617 	ldw	r2,-40(fp)
   84598:	00bfcf16 	blt	zero,r2,844d8 <altera_avalon_jtag_uart_write+0x10c>
   8459c:	00000306 	br	845ac <altera_avalon_jtag_uart_write+0x1e0>
        break;
   845a0:	0001883a 	nop
   845a4:	00000106 	br	845ac <altera_avalon_jtag_uart_write+0x1e0>
         break;
   845a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   845ac:	e0fff717 	ldw	r3,-36(fp)
   845b0:	e0bffd17 	ldw	r2,-12(fp)
   845b4:	18800426 	beq	r3,r2,845c8 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   845b8:	e0fff717 	ldw	r3,-36(fp)
   845bc:	e0bffd17 	ldw	r2,-12(fp)
   845c0:	1885c83a 	sub	r2,r3,r2
   845c4:	00000606 	br	845e0 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   845c8:	e0bff517 	ldw	r2,-44(fp)
   845cc:	1090000c 	andi	r2,r2,16384
   845d0:	10000226 	beq	r2,zero,845dc <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   845d4:	00bffd44 	movi	r2,-11
   845d8:	00000106 	br	845e0 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   845dc:	00bffec4 	movi	r2,-5
}
   845e0:	e037883a 	mov	sp,fp
   845e4:	dfc00117 	ldw	ra,4(sp)
   845e8:	df000017 	ldw	fp,0(sp)
   845ec:	dec00204 	addi	sp,sp,8
   845f0:	f800283a 	ret

000845f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   845f4:	defffa04 	addi	sp,sp,-24
   845f8:	dfc00515 	stw	ra,20(sp)
   845fc:	df000415 	stw	fp,16(sp)
   84600:	df000404 	addi	fp,sp,16
   84604:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   84608:	0007883a 	mov	r3,zero
   8460c:	e0bffc17 	ldw	r2,-16(fp)
   84610:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   84614:	e0bffc17 	ldw	r2,-16(fp)
   84618:	10800104 	addi	r2,r2,4
   8461c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   84620:	0005303a 	rdctl	r2,status
   84624:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84628:	e0fffd17 	ldw	r3,-12(fp)
   8462c:	00bfff84 	movi	r2,-2
   84630:	1884703a 	and	r2,r3,r2
   84634:	1001703a 	wrctl	status,r2
  return context;
   84638:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8463c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   84640:	00851180 	call	85118 <alt_tick>
   84644:	e0bfff17 	ldw	r2,-4(fp)
   84648:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   8464c:	e0bffe17 	ldw	r2,-8(fp)
   84650:	1001703a 	wrctl	status,r2
}
   84654:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   84658:	0001883a 	nop
   8465c:	e037883a 	mov	sp,fp
   84660:	dfc00117 	ldw	ra,4(sp)
   84664:	df000017 	ldw	fp,0(sp)
   84668:	dec00204 	addi	sp,sp,8
   8466c:	f800283a 	ret

00084670 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   84670:	defff804 	addi	sp,sp,-32
   84674:	dfc00715 	stw	ra,28(sp)
   84678:	df000615 	stw	fp,24(sp)
   8467c:	df000604 	addi	fp,sp,24
   84680:	e13ffe15 	stw	r4,-8(fp)
   84684:	e17ffd15 	stw	r5,-12(fp)
   84688:	e1bffc15 	stw	r6,-16(fp)
   8468c:	e1fffb15 	stw	r7,-20(fp)
   84690:	e0bffb17 	ldw	r2,-20(fp)
   84694:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   84698:	d0a6b117 	ldw	r2,-25916(gp)
   8469c:	1000031e 	bne	r2,zero,846ac <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   846a0:	e0bfff17 	ldw	r2,-4(fp)
   846a4:	d0a6b115 	stw	r2,-25916(gp)
    return 0;
   846a8:	00000106 	br	846b0 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   846ac:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   846b0:	e0bffe17 	ldw	r2,-8(fp)
   846b4:	10800104 	addi	r2,r2,4
   846b8:	00c001c4 	movi	r3,7
   846bc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   846c0:	d8000015 	stw	zero,0(sp)
   846c4:	e1fffe17 	ldw	r7,-8(fp)
   846c8:	01800234 	movhi	r6,8
   846cc:	31917d04 	addi	r6,r6,17908
   846d0:	e17ffc17 	ldw	r5,-16(fp)
   846d4:	e13ffd17 	ldw	r4,-12(fp)
   846d8:	0084a140 	call	84a14 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   846dc:	0001883a 	nop
   846e0:	e037883a 	mov	sp,fp
   846e4:	dfc00117 	ldw	ra,4(sp)
   846e8:	df000017 	ldw	fp,0(sp)
   846ec:	dec00204 	addi	sp,sp,8
   846f0:	f800283a 	ret

000846f4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   846f4:	defff504 	addi	sp,sp,-44
   846f8:	df000a15 	stw	fp,40(sp)
   846fc:	df000a04 	addi	fp,sp,40
   84700:	e13ff915 	stw	r4,-28(fp)
   84704:	e17ff815 	stw	r5,-32(fp)
   84708:	e1bff715 	stw	r6,-36(fp)
   8470c:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   84710:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   84714:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   84718:	10003e26 	beq	r2,zero,84814 <alt_alarm_start+0x120>
  {
    if (alarm)
   8471c:	e0bff917 	ldw	r2,-28(fp)
   84720:	10003a26 	beq	r2,zero,8480c <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
   84724:	e0bff917 	ldw	r2,-28(fp)
   84728:	e0fff717 	ldw	r3,-36(fp)
   8472c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   84730:	e0bff917 	ldw	r2,-28(fp)
   84734:	e0fff617 	ldw	r3,-40(fp)
   84738:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   8473c:	0005303a 	rdctl	r2,status
   84740:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84744:	e0fffd17 	ldw	r3,-12(fp)
   84748:	00bfff84 	movi	r2,-2
   8474c:	1884703a 	and	r2,r3,r2
   84750:	1001703a 	wrctl	status,r2
  return context;
   84754:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
   84758:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8475c:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
   84760:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   84764:	e0fff817 	ldw	r3,-32(fp)
   84768:	e0bfff17 	ldw	r2,-4(fp)
   8476c:	1885883a 	add	r2,r3,r2
   84770:	10c00044 	addi	r3,r2,1
   84774:	e0bff917 	ldw	r2,-28(fp)
   84778:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8477c:	e0bff917 	ldw	r2,-28(fp)
   84780:	10c00217 	ldw	r3,8(r2)
   84784:	e0bfff17 	ldw	r2,-4(fp)
   84788:	1880042e 	bgeu	r3,r2,8479c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   8478c:	e0bff917 	ldw	r2,-28(fp)
   84790:	00c00044 	movi	r3,1
   84794:	10c00405 	stb	r3,16(r2)
   84798:	00000206 	br	847a4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   8479c:	e0bff917 	ldw	r2,-28(fp)
   847a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   847a4:	e0bff917 	ldw	r2,-28(fp)
   847a8:	d0e00c04 	addi	r3,gp,-32720
   847ac:	e0fffb15 	stw	r3,-20(fp)
   847b0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   847b4:	e0bffa17 	ldw	r2,-24(fp)
   847b8:	e0fffb17 	ldw	r3,-20(fp)
   847bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   847c0:	e0bffb17 	ldw	r2,-20(fp)
   847c4:	10c00017 	ldw	r3,0(r2)
   847c8:	e0bffa17 	ldw	r2,-24(fp)
   847cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   847d0:	e0bffb17 	ldw	r2,-20(fp)
   847d4:	10800017 	ldw	r2,0(r2)
   847d8:	e0fffa17 	ldw	r3,-24(fp)
   847dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   847e0:	e0bffb17 	ldw	r2,-20(fp)
   847e4:	e0fffa17 	ldw	r3,-24(fp)
   847e8:	10c00015 	stw	r3,0(r2)
}
   847ec:	0001883a 	nop
   847f0:	e0bffe17 	ldw	r2,-8(fp)
   847f4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   847f8:	e0bffc17 	ldw	r2,-16(fp)
   847fc:	1001703a 	wrctl	status,r2
}
   84800:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   84804:	0005883a 	mov	r2,zero
   84808:	00000306 	br	84818 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
   8480c:	00bffa84 	movi	r2,-22
   84810:	00000106 	br	84818 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
   84814:	00bfde84 	movi	r2,-134
  }
}
   84818:	e037883a 	mov	sp,fp
   8481c:	df000017 	ldw	fp,0(sp)
   84820:	dec00104 	addi	sp,sp,4
   84824:	f800283a 	ret

00084828 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   84828:	deffff04 	addi	sp,sp,-4
   8482c:	df000015 	stw	fp,0(sp)
   84830:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   84834:	0001883a 	nop
   84838:	e037883a 	mov	sp,fp
   8483c:	df000017 	ldw	fp,0(sp)
   84840:	dec00104 	addi	sp,sp,4
   84844:	f800283a 	ret

00084848 <alt_get_errno>:
{
   84848:	defffe04 	addi	sp,sp,-8
   8484c:	dfc00115 	stw	ra,4(sp)
   84850:	df000015 	stw	fp,0(sp)
   84854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84858:	d0a00917 	ldw	r2,-32732(gp)
   8485c:	10000326 	beq	r2,zero,8486c <alt_get_errno+0x24>
   84860:	d0a00917 	ldw	r2,-32732(gp)
   84864:	103ee83a 	callr	r2
   84868:	00000106 	br	84870 <alt_get_errno+0x28>
   8486c:	d0a6ac04 	addi	r2,gp,-25936
}
   84870:	e037883a 	mov	sp,fp
   84874:	dfc00117 	ldw	ra,4(sp)
   84878:	df000017 	ldw	fp,0(sp)
   8487c:	dec00204 	addi	sp,sp,8
   84880:	f800283a 	ret

00084884 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   84884:	defffa04 	addi	sp,sp,-24
   84888:	dfc00515 	stw	ra,20(sp)
   8488c:	df000415 	stw	fp,16(sp)
   84890:	df000404 	addi	fp,sp,16
   84894:	e13ffd15 	stw	r4,-12(fp)
   84898:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8489c:	e0bffd17 	ldw	r2,-12(fp)
   848a0:	10000326 	beq	r2,zero,848b0 <alt_dev_llist_insert+0x2c>
   848a4:	e0bffd17 	ldw	r2,-12(fp)
   848a8:	10800217 	ldw	r2,8(r2)
   848ac:	1000061e 	bne	r2,zero,848c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   848b0:	00848480 	call	84848 <alt_get_errno>
   848b4:	1007883a 	mov	r3,r2
   848b8:	00800584 	movi	r2,22
   848bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   848c0:	00bffa84 	movi	r2,-22
   848c4:	00001406 	br	84918 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   848c8:	e0bffd17 	ldw	r2,-12(fp)
   848cc:	e0fffc17 	ldw	r3,-16(fp)
   848d0:	e0ffff15 	stw	r3,-4(fp)
   848d4:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   848d8:	e0bffe17 	ldw	r2,-8(fp)
   848dc:	e0ffff17 	ldw	r3,-4(fp)
   848e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   848e4:	e0bfff17 	ldw	r2,-4(fp)
   848e8:	10c00017 	ldw	r3,0(r2)
   848ec:	e0bffe17 	ldw	r2,-8(fp)
   848f0:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   848f4:	e0bfff17 	ldw	r2,-4(fp)
   848f8:	10800017 	ldw	r2,0(r2)
   848fc:	e0fffe17 	ldw	r3,-8(fp)
   84900:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   84904:	e0bfff17 	ldw	r2,-4(fp)
   84908:	e0fffe17 	ldw	r3,-8(fp)
   8490c:	10c00015 	stw	r3,0(r2)
}
   84910:	0001883a 	nop

  return 0;  
   84914:	0005883a 	mov	r2,zero
}
   84918:	e037883a 	mov	sp,fp
   8491c:	dfc00117 	ldw	ra,4(sp)
   84920:	df000017 	ldw	fp,0(sp)
   84924:	dec00204 	addi	sp,sp,8
   84928:	f800283a 	ret

0008492c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8492c:	defffd04 	addi	sp,sp,-12
   84930:	dfc00215 	stw	ra,8(sp)
   84934:	df000115 	stw	fp,4(sp)
   84938:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8493c:	00800234 	movhi	r2,8
   84940:	1095f404 	addi	r2,r2,22480
   84944:	e0bfff15 	stw	r2,-4(fp)
   84948:	00000606 	br	84964 <_do_ctors+0x38>
        (*ctor) (); 
   8494c:	e0bfff17 	ldw	r2,-4(fp)
   84950:	10800017 	ldw	r2,0(r2)
   84954:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84958:	e0bfff17 	ldw	r2,-4(fp)
   8495c:	10bfff04 	addi	r2,r2,-4
   84960:	e0bfff15 	stw	r2,-4(fp)
   84964:	e0ffff17 	ldw	r3,-4(fp)
   84968:	00800234 	movhi	r2,8
   8496c:	1095f504 	addi	r2,r2,22484
   84970:	18bff62e 	bgeu	r3,r2,8494c <_do_ctors+0x20>
}
   84974:	0001883a 	nop
   84978:	0001883a 	nop
   8497c:	e037883a 	mov	sp,fp
   84980:	dfc00117 	ldw	ra,4(sp)
   84984:	df000017 	ldw	fp,0(sp)
   84988:	dec00204 	addi	sp,sp,8
   8498c:	f800283a 	ret

00084990 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   84990:	defffd04 	addi	sp,sp,-12
   84994:	dfc00215 	stw	ra,8(sp)
   84998:	df000115 	stw	fp,4(sp)
   8499c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   849a0:	00800234 	movhi	r2,8
   849a4:	1095f404 	addi	r2,r2,22480
   849a8:	e0bfff15 	stw	r2,-4(fp)
   849ac:	00000606 	br	849c8 <_do_dtors+0x38>
        (*dtor) (); 
   849b0:	e0bfff17 	ldw	r2,-4(fp)
   849b4:	10800017 	ldw	r2,0(r2)
   849b8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   849bc:	e0bfff17 	ldw	r2,-4(fp)
   849c0:	10bfff04 	addi	r2,r2,-4
   849c4:	e0bfff15 	stw	r2,-4(fp)
   849c8:	e0ffff17 	ldw	r3,-4(fp)
   849cc:	00800234 	movhi	r2,8
   849d0:	1095f504 	addi	r2,r2,22484
   849d4:	18bff62e 	bgeu	r3,r2,849b0 <_do_dtors+0x20>
}
   849d8:	0001883a 	nop
   849dc:	0001883a 	nop
   849e0:	e037883a 	mov	sp,fp
   849e4:	dfc00117 	ldw	ra,4(sp)
   849e8:	df000017 	ldw	fp,0(sp)
   849ec:	dec00204 	addi	sp,sp,8
   849f0:	f800283a 	ret

000849f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   849f4:	deffff04 	addi	sp,sp,-4
   849f8:	df000015 	stw	fp,0(sp)
   849fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   84a00:	0001883a 	nop
   84a04:	e037883a 	mov	sp,fp
   84a08:	df000017 	ldw	fp,0(sp)
   84a0c:	dec00104 	addi	sp,sp,4
   84a10:	f800283a 	ret

00084a14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84a14:	defff904 	addi	sp,sp,-28
   84a18:	dfc00615 	stw	ra,24(sp)
   84a1c:	df000515 	stw	fp,20(sp)
   84a20:	df000504 	addi	fp,sp,20
   84a24:	e13fff15 	stw	r4,-4(fp)
   84a28:	e17ffe15 	stw	r5,-8(fp)
   84a2c:	e1bffd15 	stw	r6,-12(fp)
   84a30:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   84a34:	e0800217 	ldw	r2,8(fp)
   84a38:	d8800015 	stw	r2,0(sp)
   84a3c:	e1fffc17 	ldw	r7,-16(fp)
   84a40:	e1bffd17 	ldw	r6,-12(fp)
   84a44:	e17ffe17 	ldw	r5,-8(fp)
   84a48:	e13fff17 	ldw	r4,-4(fp)
   84a4c:	0084bc40 	call	84bc4 <alt_iic_isr_register>
}  
   84a50:	e037883a 	mov	sp,fp
   84a54:	dfc00117 	ldw	ra,4(sp)
   84a58:	df000017 	ldw	fp,0(sp)
   84a5c:	dec00204 	addi	sp,sp,8
   84a60:	f800283a 	ret

00084a64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   84a64:	defff904 	addi	sp,sp,-28
   84a68:	df000615 	stw	fp,24(sp)
   84a6c:	df000604 	addi	fp,sp,24
   84a70:	e13ffb15 	stw	r4,-20(fp)
   84a74:	e17ffa15 	stw	r5,-24(fp)
   84a78:	e0bffa17 	ldw	r2,-24(fp)
   84a7c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   84a80:	0005303a 	rdctl	r2,status
   84a84:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84a88:	e0fffe17 	ldw	r3,-8(fp)
   84a8c:	00bfff84 	movi	r2,-2
   84a90:	1884703a 	and	r2,r3,r2
   84a94:	1001703a 	wrctl	status,r2
  return context;
   84a98:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84a9c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   84aa0:	00c00044 	movi	r3,1
   84aa4:	e0bfff17 	ldw	r2,-4(fp)
   84aa8:	1884983a 	sll	r2,r3,r2
   84aac:	1007883a 	mov	r3,r2
   84ab0:	d0a6b017 	ldw	r2,-25920(gp)
   84ab4:	1884b03a 	or	r2,r3,r2
   84ab8:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84abc:	d0a6b017 	ldw	r2,-25920(gp)
   84ac0:	100170fa 	wrctl	ienable,r2
   84ac4:	e0bffd17 	ldw	r2,-12(fp)
   84ac8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   84acc:	e0bffc17 	ldw	r2,-16(fp)
   84ad0:	1001703a 	wrctl	status,r2
}
   84ad4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   84ad8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   84adc:	e037883a 	mov	sp,fp
   84ae0:	df000017 	ldw	fp,0(sp)
   84ae4:	dec00104 	addi	sp,sp,4
   84ae8:	f800283a 	ret

00084aec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   84aec:	defff904 	addi	sp,sp,-28
   84af0:	df000615 	stw	fp,24(sp)
   84af4:	df000604 	addi	fp,sp,24
   84af8:	e13ffb15 	stw	r4,-20(fp)
   84afc:	e17ffa15 	stw	r5,-24(fp)
   84b00:	e0bffa17 	ldw	r2,-24(fp)
   84b04:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   84b08:	0005303a 	rdctl	r2,status
   84b0c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84b10:	e0fffe17 	ldw	r3,-8(fp)
   84b14:	00bfff84 	movi	r2,-2
   84b18:	1884703a 	and	r2,r3,r2
   84b1c:	1001703a 	wrctl	status,r2
  return context;
   84b20:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   84b24:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   84b28:	00c00044 	movi	r3,1
   84b2c:	e0bfff17 	ldw	r2,-4(fp)
   84b30:	1884983a 	sll	r2,r3,r2
   84b34:	0084303a 	nor	r2,zero,r2
   84b38:	1007883a 	mov	r3,r2
   84b3c:	d0a6b017 	ldw	r2,-25920(gp)
   84b40:	1884703a 	and	r2,r3,r2
   84b44:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84b48:	d0a6b017 	ldw	r2,-25920(gp)
   84b4c:	100170fa 	wrctl	ienable,r2
   84b50:	e0bffd17 	ldw	r2,-12(fp)
   84b54:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   84b58:	e0bffc17 	ldw	r2,-16(fp)
   84b5c:	1001703a 	wrctl	status,r2
}
   84b60:	0001883a 	nop
  return 0;
   84b64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   84b68:	e037883a 	mov	sp,fp
   84b6c:	df000017 	ldw	fp,0(sp)
   84b70:	dec00104 	addi	sp,sp,4
   84b74:	f800283a 	ret

00084b78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   84b78:	defffc04 	addi	sp,sp,-16
   84b7c:	df000315 	stw	fp,12(sp)
   84b80:	df000304 	addi	fp,sp,12
   84b84:	e13ffe15 	stw	r4,-8(fp)
   84b88:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   84b8c:	000530fa 	rdctl	r2,ienable
   84b90:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   84b94:	00c00044 	movi	r3,1
   84b98:	e0bffd17 	ldw	r2,-12(fp)
   84b9c:	1884983a 	sll	r2,r3,r2
   84ba0:	1007883a 	mov	r3,r2
   84ba4:	e0bfff17 	ldw	r2,-4(fp)
   84ba8:	1884703a 	and	r2,r3,r2
   84bac:	1004c03a 	cmpne	r2,r2,zero
   84bb0:	10803fcc 	andi	r2,r2,255
}
   84bb4:	e037883a 	mov	sp,fp
   84bb8:	df000017 	ldw	fp,0(sp)
   84bbc:	dec00104 	addi	sp,sp,4
   84bc0:	f800283a 	ret

00084bc4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84bc4:	defff504 	addi	sp,sp,-44
   84bc8:	dfc00a15 	stw	ra,40(sp)
   84bcc:	df000915 	stw	fp,36(sp)
   84bd0:	df000904 	addi	fp,sp,36
   84bd4:	e13ffa15 	stw	r4,-24(fp)
   84bd8:	e17ff915 	stw	r5,-28(fp)
   84bdc:	e1bff815 	stw	r6,-32(fp)
   84be0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   84be4:	00bffa84 	movi	r2,-22
   84be8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   84bec:	e0bff917 	ldw	r2,-28(fp)
   84bf0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   84bf4:	e0bffe17 	ldw	r2,-8(fp)
   84bf8:	10800808 	cmpgei	r2,r2,32
   84bfc:	1000251e 	bne	r2,zero,84c94 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   84c00:	0005303a 	rdctl	r2,status
   84c04:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84c08:	e0fffc17 	ldw	r3,-16(fp)
   84c0c:	00bfff84 	movi	r2,-2
   84c10:	1884703a 	and	r2,r3,r2
   84c14:	1001703a 	wrctl	status,r2
  return context;
   84c18:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   84c1c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   84c20:	e0bffe17 	ldw	r2,-8(fp)
   84c24:	100890fa 	slli	r4,r2,3
   84c28:	e0fff817 	ldw	r3,-32(fp)
   84c2c:	00800274 	movhi	r2,9
   84c30:	2085883a 	add	r2,r4,r2
   84c34:	10e35115 	stw	r3,-29372(r2)
    alt_irq[id].context = isr_context;
   84c38:	e0bffe17 	ldw	r2,-8(fp)
   84c3c:	100890fa 	slli	r4,r2,3
   84c40:	e0fff717 	ldw	r3,-36(fp)
   84c44:	00800274 	movhi	r2,9
   84c48:	2085883a 	add	r2,r4,r2
   84c4c:	10e35215 	stw	r3,-29368(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   84c50:	e0bff817 	ldw	r2,-32(fp)
   84c54:	10000526 	beq	r2,zero,84c6c <alt_iic_isr_register+0xa8>
   84c58:	e0bffe17 	ldw	r2,-8(fp)
   84c5c:	100b883a 	mov	r5,r2
   84c60:	e13ffa17 	ldw	r4,-24(fp)
   84c64:	0084a640 	call	84a64 <alt_ic_irq_enable>
   84c68:	00000406 	br	84c7c <alt_iic_isr_register+0xb8>
   84c6c:	e0bffe17 	ldw	r2,-8(fp)
   84c70:	100b883a 	mov	r5,r2
   84c74:	e13ffa17 	ldw	r4,-24(fp)
   84c78:	0084aec0 	call	84aec <alt_ic_irq_disable>
   84c7c:	e0bfff15 	stw	r2,-4(fp)
   84c80:	e0bffd17 	ldw	r2,-12(fp)
   84c84:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   84c88:	e0bffb17 	ldw	r2,-20(fp)
   84c8c:	1001703a 	wrctl	status,r2
}
   84c90:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   84c94:	e0bfff17 	ldw	r2,-4(fp)
}
   84c98:	e037883a 	mov	sp,fp
   84c9c:	dfc00117 	ldw	ra,4(sp)
   84ca0:	df000017 	ldw	fp,0(sp)
   84ca4:	dec00204 	addi	sp,sp,8
   84ca8:	f800283a 	ret

00084cac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   84cac:	defff904 	addi	sp,sp,-28
   84cb0:	dfc00615 	stw	ra,24(sp)
   84cb4:	df000515 	stw	fp,20(sp)
   84cb8:	df000504 	addi	fp,sp,20
   84cbc:	e13ffe15 	stw	r4,-8(fp)
   84cc0:	e17ffd15 	stw	r5,-12(fp)
   84cc4:	e1bffc15 	stw	r6,-16(fp)
   84cc8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   84ccc:	e1bffb17 	ldw	r6,-20(fp)
   84cd0:	e17ffc17 	ldw	r5,-16(fp)
   84cd4:	e13ffd17 	ldw	r4,-12(fp)
   84cd8:	0084f140 	call	84f14 <open>
   84cdc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   84ce0:	e0bfff17 	ldw	r2,-4(fp)
   84ce4:	10002016 	blt	r2,zero,84d68 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   84ce8:	e0ffff17 	ldw	r3,-4(fp)
   84cec:	1805883a 	mov	r2,r3
   84cf0:	1085883a 	add	r2,r2,r2
   84cf4:	10c5883a 	add	r2,r2,r3
   84cf8:	100490ba 	slli	r2,r2,2
   84cfc:	00c00234 	movhi	r3,8
   84d00:	10c7883a 	add	r3,r2,r3
   84d04:	18d81b17 	ldw	r3,24684(r3)
   84d08:	e0bffe17 	ldw	r2,-8(fp)
   84d0c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   84d10:	e0ffff17 	ldw	r3,-4(fp)
   84d14:	1805883a 	mov	r2,r3
   84d18:	1085883a 	add	r2,r2,r2
   84d1c:	10c5883a 	add	r2,r2,r3
   84d20:	100490ba 	slli	r2,r2,2
   84d24:	00c00234 	movhi	r3,8
   84d28:	10c7883a 	add	r3,r2,r3
   84d2c:	18d81c17 	ldw	r3,24688(r3)
   84d30:	e0bffe17 	ldw	r2,-8(fp)
   84d34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   84d38:	e0ffff17 	ldw	r3,-4(fp)
   84d3c:	1805883a 	mov	r2,r3
   84d40:	1085883a 	add	r2,r2,r2
   84d44:	10c5883a 	add	r2,r2,r3
   84d48:	100490ba 	slli	r2,r2,2
   84d4c:	00c00234 	movhi	r3,8
   84d50:	10c7883a 	add	r3,r2,r3
   84d54:	18d81d17 	ldw	r3,24692(r3)
   84d58:	e0bffe17 	ldw	r2,-8(fp)
   84d5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   84d60:	e13fff17 	ldw	r4,-4(fp)
   84d64:	00838440 	call	83844 <alt_release_fd>
  }
} 
   84d68:	0001883a 	nop
   84d6c:	e037883a 	mov	sp,fp
   84d70:	dfc00117 	ldw	ra,4(sp)
   84d74:	df000017 	ldw	fp,0(sp)
   84d78:	dec00204 	addi	sp,sp,8
   84d7c:	f800283a 	ret

00084d80 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   84d80:	defffb04 	addi	sp,sp,-20
   84d84:	dfc00415 	stw	ra,16(sp)
   84d88:	df000315 	stw	fp,12(sp)
   84d8c:	df000304 	addi	fp,sp,12
   84d90:	e13fff15 	stw	r4,-4(fp)
   84d94:	e17ffe15 	stw	r5,-8(fp)
   84d98:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   84d9c:	01c07fc4 	movi	r7,511
   84da0:	01800044 	movi	r6,1
   84da4:	e17fff17 	ldw	r5,-4(fp)
   84da8:	01000234 	movhi	r4,8
   84dac:	21181e04 	addi	r4,r4,24696
   84db0:	0084cac0 	call	84cac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   84db4:	01c07fc4 	movi	r7,511
   84db8:	000d883a 	mov	r6,zero
   84dbc:	e17ffe17 	ldw	r5,-8(fp)
   84dc0:	01000234 	movhi	r4,8
   84dc4:	21181b04 	addi	r4,r4,24684
   84dc8:	0084cac0 	call	84cac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   84dcc:	01c07fc4 	movi	r7,511
   84dd0:	01800044 	movi	r6,1
   84dd4:	e17ffd17 	ldw	r5,-12(fp)
   84dd8:	01000234 	movhi	r4,8
   84ddc:	21182104 	addi	r4,r4,24708
   84de0:	0084cac0 	call	84cac <alt_open_fd>
}  
   84de4:	0001883a 	nop
   84de8:	e037883a 	mov	sp,fp
   84dec:	dfc00117 	ldw	ra,4(sp)
   84df0:	df000017 	ldw	fp,0(sp)
   84df4:	dec00204 	addi	sp,sp,8
   84df8:	f800283a 	ret

00084dfc <alt_get_errno>:
{
   84dfc:	defffe04 	addi	sp,sp,-8
   84e00:	dfc00115 	stw	ra,4(sp)
   84e04:	df000015 	stw	fp,0(sp)
   84e08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84e0c:	d0a00917 	ldw	r2,-32732(gp)
   84e10:	10000326 	beq	r2,zero,84e20 <alt_get_errno+0x24>
   84e14:	d0a00917 	ldw	r2,-32732(gp)
   84e18:	103ee83a 	callr	r2
   84e1c:	00000106 	br	84e24 <alt_get_errno+0x28>
   84e20:	d0a6ac04 	addi	r2,gp,-25936
}
   84e24:	e037883a 	mov	sp,fp
   84e28:	dfc00117 	ldw	ra,4(sp)
   84e2c:	df000017 	ldw	fp,0(sp)
   84e30:	dec00204 	addi	sp,sp,8
   84e34:	f800283a 	ret

00084e38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   84e38:	defffd04 	addi	sp,sp,-12
   84e3c:	df000215 	stw	fp,8(sp)
   84e40:	df000204 	addi	fp,sp,8
   84e44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   84e48:	e0bffe17 	ldw	r2,-8(fp)
   84e4c:	10800217 	ldw	r2,8(r2)
   84e50:	10d00034 	orhi	r3,r2,16384
   84e54:	e0bffe17 	ldw	r2,-8(fp)
   84e58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84e5c:	e03fff15 	stw	zero,-4(fp)
   84e60:	00002306 	br	84ef0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84e64:	e0ffff17 	ldw	r3,-4(fp)
   84e68:	1805883a 	mov	r2,r3
   84e6c:	1085883a 	add	r2,r2,r2
   84e70:	10c5883a 	add	r2,r2,r3
   84e74:	100490ba 	slli	r2,r2,2
   84e78:	00c00234 	movhi	r3,8
   84e7c:	10c7883a 	add	r3,r2,r3
   84e80:	18d81b17 	ldw	r3,24684(r3)
   84e84:	e0bffe17 	ldw	r2,-8(fp)
   84e88:	10800017 	ldw	r2,0(r2)
   84e8c:	1880151e 	bne	r3,r2,84ee4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84e90:	e0ffff17 	ldw	r3,-4(fp)
   84e94:	1805883a 	mov	r2,r3
   84e98:	1085883a 	add	r2,r2,r2
   84e9c:	10c5883a 	add	r2,r2,r3
   84ea0:	100490ba 	slli	r2,r2,2
   84ea4:	00c00234 	movhi	r3,8
   84ea8:	10c7883a 	add	r3,r2,r3
   84eac:	18981d17 	ldw	r2,24692(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   84eb0:	10000c0e 	bge	r2,zero,84ee4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   84eb4:	e0ffff17 	ldw	r3,-4(fp)
   84eb8:	1805883a 	mov	r2,r3
   84ebc:	1085883a 	add	r2,r2,r2
   84ec0:	10c5883a 	add	r2,r2,r3
   84ec4:	100490ba 	slli	r2,r2,2
   84ec8:	00c00234 	movhi	r3,8
   84ecc:	18d81b04 	addi	r3,r3,24684
   84ed0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84ed4:	e0fffe17 	ldw	r3,-8(fp)
   84ed8:	18800226 	beq	r3,r2,84ee4 <alt_file_locked+0xac>
    {
      return -EACCES;
   84edc:	00bffcc4 	movi	r2,-13
   84ee0:	00000806 	br	84f04 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   84ee4:	e0bfff17 	ldw	r2,-4(fp)
   84ee8:	10800044 	addi	r2,r2,1
   84eec:	e0bfff15 	stw	r2,-4(fp)
   84ef0:	d0a00817 	ldw	r2,-32736(gp)
   84ef4:	1007883a 	mov	r3,r2
   84ef8:	e0bfff17 	ldw	r2,-4(fp)
   84efc:	18bfd92e 	bgeu	r3,r2,84e64 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   84f00:	0005883a 	mov	r2,zero
}
   84f04:	e037883a 	mov	sp,fp
   84f08:	df000017 	ldw	fp,0(sp)
   84f0c:	dec00104 	addi	sp,sp,4
   84f10:	f800283a 	ret

00084f14 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   84f14:	defff604 	addi	sp,sp,-40
   84f18:	dfc00915 	stw	ra,36(sp)
   84f1c:	df000815 	stw	fp,32(sp)
   84f20:	df000804 	addi	fp,sp,32
   84f24:	e13ffa15 	stw	r4,-24(fp)
   84f28:	e17ff915 	stw	r5,-28(fp)
   84f2c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   84f30:	00bfffc4 	movi	r2,-1
   84f34:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   84f38:	00bffb44 	movi	r2,-19
   84f3c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   84f40:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   84f44:	d1600604 	addi	r5,gp,-32744
   84f48:	e13ffa17 	ldw	r4,-24(fp)
   84f4c:	00852440 	call	85244 <alt_find_dev>
   84f50:	e0bfff15 	stw	r2,-4(fp)
   84f54:	e0bfff17 	ldw	r2,-4(fp)
   84f58:	1000051e 	bne	r2,zero,84f70 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   84f5c:	e13ffa17 	ldw	r4,-24(fp)
   84f60:	00852d40 	call	852d4 <alt_find_file>
   84f64:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   84f68:	00800044 	movi	r2,1
   84f6c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   84f70:	e0bfff17 	ldw	r2,-4(fp)
   84f74:	10002c26 	beq	r2,zero,85028 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   84f78:	e13fff17 	ldw	r4,-4(fp)
   84f7c:	00853dc0 	call	853dc <alt_get_fd>
   84f80:	e0bffe15 	stw	r2,-8(fp)
   84f84:	e0bffe17 	ldw	r2,-8(fp)
   84f88:	1000030e 	bge	r2,zero,84f98 <open+0x84>
    {
      status = index;
   84f8c:	e0bffe17 	ldw	r2,-8(fp)
   84f90:	e0bffd15 	stw	r2,-12(fp)
   84f94:	00002606 	br	85030 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   84f98:	e0fffe17 	ldw	r3,-8(fp)
   84f9c:	1805883a 	mov	r2,r3
   84fa0:	1085883a 	add	r2,r2,r2
   84fa4:	10c5883a 	add	r2,r2,r3
   84fa8:	100490ba 	slli	r2,r2,2
   84fac:	00c00234 	movhi	r3,8
   84fb0:	18d81b04 	addi	r3,r3,24684
   84fb4:	10c5883a 	add	r2,r2,r3
   84fb8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   84fbc:	e0fff917 	ldw	r3,-28(fp)
   84fc0:	00900034 	movhi	r2,16384
   84fc4:	10bfffc4 	addi	r2,r2,-1
   84fc8:	1886703a 	and	r3,r3,r2
   84fcc:	e0bffb17 	ldw	r2,-20(fp)
   84fd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   84fd4:	e0bffc17 	ldw	r2,-16(fp)
   84fd8:	1000051e 	bne	r2,zero,84ff0 <open+0xdc>
   84fdc:	e13ffb17 	ldw	r4,-20(fp)
   84fe0:	0084e380 	call	84e38 <alt_file_locked>
   84fe4:	e0bffd15 	stw	r2,-12(fp)
   84fe8:	e0bffd17 	ldw	r2,-12(fp)
   84fec:	10001016 	blt	r2,zero,85030 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   84ff0:	e0bfff17 	ldw	r2,-4(fp)
   84ff4:	10800317 	ldw	r2,12(r2)
   84ff8:	10000826 	beq	r2,zero,8501c <open+0x108>
   84ffc:	e0bfff17 	ldw	r2,-4(fp)
   85000:	10800317 	ldw	r2,12(r2)
   85004:	e1fff817 	ldw	r7,-32(fp)
   85008:	e1bff917 	ldw	r6,-28(fp)
   8500c:	e17ffa17 	ldw	r5,-24(fp)
   85010:	e13ffb17 	ldw	r4,-20(fp)
   85014:	103ee83a 	callr	r2
   85018:	00000106 	br	85020 <open+0x10c>
   8501c:	0005883a 	mov	r2,zero
   85020:	e0bffd15 	stw	r2,-12(fp)
   85024:	00000206 	br	85030 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   85028:	00bffb44 	movi	r2,-19
   8502c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   85030:	e0bffd17 	ldw	r2,-12(fp)
   85034:	1000090e 	bge	r2,zero,8505c <open+0x148>
  {
    alt_release_fd (index);  
   85038:	e13ffe17 	ldw	r4,-8(fp)
   8503c:	00838440 	call	83844 <alt_release_fd>
    ALT_ERRNO = -status;
   85040:	0084dfc0 	call	84dfc <alt_get_errno>
   85044:	1007883a 	mov	r3,r2
   85048:	e0bffd17 	ldw	r2,-12(fp)
   8504c:	0085c83a 	sub	r2,zero,r2
   85050:	18800015 	stw	r2,0(r3)
    return -1;
   85054:	00bfffc4 	movi	r2,-1
   85058:	00000106 	br	85060 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   8505c:	e0bffe17 	ldw	r2,-8(fp)
}
   85060:	e037883a 	mov	sp,fp
   85064:	dfc00117 	ldw	ra,4(sp)
   85068:	df000017 	ldw	fp,0(sp)
   8506c:	dec00204 	addi	sp,sp,8
   85070:	f800283a 	ret

00085074 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   85074:	defffa04 	addi	sp,sp,-24
   85078:	df000515 	stw	fp,20(sp)
   8507c:	df000504 	addi	fp,sp,20
   85080:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   85084:	0005303a 	rdctl	r2,status
   85088:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8508c:	e0fffc17 	ldw	r3,-16(fp)
   85090:	00bfff84 	movi	r2,-2
   85094:	1884703a 	and	r2,r3,r2
   85098:	1001703a 	wrctl	status,r2
  return context;
   8509c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   850a0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   850a4:	e0bffb17 	ldw	r2,-20(fp)
   850a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   850ac:	e0bffd17 	ldw	r2,-12(fp)
   850b0:	10800017 	ldw	r2,0(r2)
   850b4:	e0fffd17 	ldw	r3,-12(fp)
   850b8:	18c00117 	ldw	r3,4(r3)
   850bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   850c0:	e0bffd17 	ldw	r2,-12(fp)
   850c4:	10800117 	ldw	r2,4(r2)
   850c8:	e0fffd17 	ldw	r3,-12(fp)
   850cc:	18c00017 	ldw	r3,0(r3)
   850d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   850d4:	e0bffd17 	ldw	r2,-12(fp)
   850d8:	e0fffd17 	ldw	r3,-12(fp)
   850dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   850e0:	e0bffd17 	ldw	r2,-12(fp)
   850e4:	e0fffd17 	ldw	r3,-12(fp)
   850e8:	10c00015 	stw	r3,0(r2)
} 
   850ec:	0001883a 	nop
   850f0:	e0bfff17 	ldw	r2,-4(fp)
   850f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   850f8:	e0bffe17 	ldw	r2,-8(fp)
   850fc:	1001703a 	wrctl	status,r2
}
   85100:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   85104:	0001883a 	nop
   85108:	e037883a 	mov	sp,fp
   8510c:	df000017 	ldw	fp,0(sp)
   85110:	dec00104 	addi	sp,sp,4
   85114:	f800283a 	ret

00085118 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   85118:	defffb04 	addi	sp,sp,-20
   8511c:	dfc00415 	stw	ra,16(sp)
   85120:	df000315 	stw	fp,12(sp)
   85124:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   85128:	d0a00c17 	ldw	r2,-32720(gp)
   8512c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   85130:	d0a6b217 	ldw	r2,-25912(gp)
   85134:	10800044 	addi	r2,r2,1
   85138:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8513c:	00002e06 	br	851f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   85140:	e0bfff17 	ldw	r2,-4(fp)
   85144:	10800017 	ldw	r2,0(r2)
   85148:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8514c:	e0bfff17 	ldw	r2,-4(fp)
   85150:	10800403 	ldbu	r2,16(r2)
   85154:	10803fcc 	andi	r2,r2,255
   85158:	10000426 	beq	r2,zero,8516c <alt_tick+0x54>
   8515c:	d0a6b217 	ldw	r2,-25912(gp)
   85160:	1000021e 	bne	r2,zero,8516c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   85164:	e0bfff17 	ldw	r2,-4(fp)
   85168:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8516c:	e0bfff17 	ldw	r2,-4(fp)
   85170:	10800217 	ldw	r2,8(r2)
   85174:	d0e6b217 	ldw	r3,-25912(gp)
   85178:	18801d36 	bltu	r3,r2,851f0 <alt_tick+0xd8>
   8517c:	e0bfff17 	ldw	r2,-4(fp)
   85180:	10800403 	ldbu	r2,16(r2)
   85184:	10803fcc 	andi	r2,r2,255
   85188:	1000191e 	bne	r2,zero,851f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8518c:	e0bfff17 	ldw	r2,-4(fp)
   85190:	10800317 	ldw	r2,12(r2)
   85194:	e0ffff17 	ldw	r3,-4(fp)
   85198:	18c00517 	ldw	r3,20(r3)
   8519c:	1809883a 	mov	r4,r3
   851a0:	103ee83a 	callr	r2
   851a4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   851a8:	e0bffd17 	ldw	r2,-12(fp)
   851ac:	1000031e 	bne	r2,zero,851bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   851b0:	e13fff17 	ldw	r4,-4(fp)
   851b4:	00850740 	call	85074 <alt_alarm_stop>
   851b8:	00000d06 	br	851f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   851bc:	e0bfff17 	ldw	r2,-4(fp)
   851c0:	10c00217 	ldw	r3,8(r2)
   851c4:	e0bffd17 	ldw	r2,-12(fp)
   851c8:	1887883a 	add	r3,r3,r2
   851cc:	e0bfff17 	ldw	r2,-4(fp)
   851d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   851d4:	e0bfff17 	ldw	r2,-4(fp)
   851d8:	10c00217 	ldw	r3,8(r2)
   851dc:	d0a6b217 	ldw	r2,-25912(gp)
   851e0:	1880032e 	bgeu	r3,r2,851f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   851e4:	e0bfff17 	ldw	r2,-4(fp)
   851e8:	00c00044 	movi	r3,1
   851ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   851f0:	e0bffe17 	ldw	r2,-8(fp)
   851f4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   851f8:	e0ffff17 	ldw	r3,-4(fp)
   851fc:	d0a00c04 	addi	r2,gp,-32720
   85200:	18bfcf1e 	bne	r3,r2,85140 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   85204:	0001883a 	nop
}
   85208:	0001883a 	nop
   8520c:	e037883a 	mov	sp,fp
   85210:	dfc00117 	ldw	ra,4(sp)
   85214:	df000017 	ldw	fp,0(sp)
   85218:	dec00204 	addi	sp,sp,8
   8521c:	f800283a 	ret

00085220 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   85220:	deffff04 	addi	sp,sp,-4
   85224:	df000015 	stw	fp,0(sp)
   85228:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8522c:	000170fa 	wrctl	ienable,zero
}
   85230:	0001883a 	nop
   85234:	e037883a 	mov	sp,fp
   85238:	df000017 	ldw	fp,0(sp)
   8523c:	dec00104 	addi	sp,sp,4
   85240:	f800283a 	ret

00085244 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   85244:	defffa04 	addi	sp,sp,-24
   85248:	dfc00515 	stw	ra,20(sp)
   8524c:	df000415 	stw	fp,16(sp)
   85250:	df000404 	addi	fp,sp,16
   85254:	e13ffd15 	stw	r4,-12(fp)
   85258:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8525c:	e0bffc17 	ldw	r2,-16(fp)
   85260:	10800017 	ldw	r2,0(r2)
   85264:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   85268:	e13ffd17 	ldw	r4,-12(fp)
   8526c:	00803700 	call	80370 <strlen>
   85270:	10800044 	addi	r2,r2,1
   85274:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   85278:	00000d06 	br	852b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8527c:	e0bfff17 	ldw	r2,-4(fp)
   85280:	10800217 	ldw	r2,8(r2)
   85284:	e0fffe17 	ldw	r3,-8(fp)
   85288:	180d883a 	mov	r6,r3
   8528c:	e17ffd17 	ldw	r5,-12(fp)
   85290:	1009883a 	mov	r4,r2
   85294:	00855740 	call	85574 <memcmp>
   85298:	1000021e 	bne	r2,zero,852a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8529c:	e0bfff17 	ldw	r2,-4(fp)
   852a0:	00000706 	br	852c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   852a4:	e0bfff17 	ldw	r2,-4(fp)
   852a8:	10800017 	ldw	r2,0(r2)
   852ac:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   852b0:	e0ffff17 	ldw	r3,-4(fp)
   852b4:	e0bffc17 	ldw	r2,-16(fp)
   852b8:	18bff01e 	bne	r3,r2,8527c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   852bc:	0005883a 	mov	r2,zero
}
   852c0:	e037883a 	mov	sp,fp
   852c4:	dfc00117 	ldw	ra,4(sp)
   852c8:	df000017 	ldw	fp,0(sp)
   852cc:	dec00204 	addi	sp,sp,8
   852d0:	f800283a 	ret

000852d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   852d4:	defffb04 	addi	sp,sp,-20
   852d8:	dfc00415 	stw	ra,16(sp)
   852dc:	df000315 	stw	fp,12(sp)
   852e0:	df000304 	addi	fp,sp,12
   852e4:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   852e8:	d0a00417 	ldw	r2,-32752(gp)
   852ec:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   852f0:	00003106 	br	853b8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   852f4:	e0bfff17 	ldw	r2,-4(fp)
   852f8:	10800217 	ldw	r2,8(r2)
   852fc:	1009883a 	mov	r4,r2
   85300:	00803700 	call	80370 <strlen>
   85304:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   85308:	e0bfff17 	ldw	r2,-4(fp)
   8530c:	10c00217 	ldw	r3,8(r2)
   85310:	e0bffe17 	ldw	r2,-8(fp)
   85314:	10bfffc4 	addi	r2,r2,-1
   85318:	1885883a 	add	r2,r3,r2
   8531c:	10800003 	ldbu	r2,0(r2)
   85320:	10803fcc 	andi	r2,r2,255
   85324:	1080201c 	xori	r2,r2,128
   85328:	10bfe004 	addi	r2,r2,-128
   8532c:	10800bd8 	cmpnei	r2,r2,47
   85330:	1000031e 	bne	r2,zero,85340 <alt_find_file+0x6c>
    {
      len -= 1;
   85334:	e0bffe17 	ldw	r2,-8(fp)
   85338:	10bfffc4 	addi	r2,r2,-1
   8533c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   85340:	e0bffe17 	ldw	r2,-8(fp)
   85344:	e0fffd17 	ldw	r3,-12(fp)
   85348:	1885883a 	add	r2,r3,r2
   8534c:	10800003 	ldbu	r2,0(r2)
   85350:	10803fcc 	andi	r2,r2,255
   85354:	1080201c 	xori	r2,r2,128
   85358:	10bfe004 	addi	r2,r2,-128
   8535c:	10800be0 	cmpeqi	r2,r2,47
   85360:	1000081e 	bne	r2,zero,85384 <alt_find_file+0xb0>
   85364:	e0bffe17 	ldw	r2,-8(fp)
   85368:	e0fffd17 	ldw	r3,-12(fp)
   8536c:	1885883a 	add	r2,r3,r2
   85370:	10800003 	ldbu	r2,0(r2)
   85374:	10803fcc 	andi	r2,r2,255
   85378:	1080201c 	xori	r2,r2,128
   8537c:	10bfe004 	addi	r2,r2,-128
   85380:	10000a1e 	bne	r2,zero,853ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   85384:	e0bfff17 	ldw	r2,-4(fp)
   85388:	10800217 	ldw	r2,8(r2)
   8538c:	e0fffe17 	ldw	r3,-8(fp)
   85390:	180d883a 	mov	r6,r3
   85394:	e17ffd17 	ldw	r5,-12(fp)
   85398:	1009883a 	mov	r4,r2
   8539c:	00855740 	call	85574 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   853a0:	1000021e 	bne	r2,zero,853ac <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   853a4:	e0bfff17 	ldw	r2,-4(fp)
   853a8:	00000706 	br	853c8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   853ac:	e0bfff17 	ldw	r2,-4(fp)
   853b0:	10800017 	ldw	r2,0(r2)
   853b4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   853b8:	e0ffff17 	ldw	r3,-4(fp)
   853bc:	d0a00404 	addi	r2,gp,-32752
   853c0:	18bfcc1e 	bne	r3,r2,852f4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   853c4:	0005883a 	mov	r2,zero
}
   853c8:	e037883a 	mov	sp,fp
   853cc:	dfc00117 	ldw	ra,4(sp)
   853d0:	df000017 	ldw	fp,0(sp)
   853d4:	dec00204 	addi	sp,sp,8
   853d8:	f800283a 	ret

000853dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   853dc:	defffc04 	addi	sp,sp,-16
   853e0:	df000315 	stw	fp,12(sp)
   853e4:	df000304 	addi	fp,sp,12
   853e8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   853ec:	00bffa04 	movi	r2,-24
   853f0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   853f4:	e03fff15 	stw	zero,-4(fp)
   853f8:	00001d06 	br	85470 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   853fc:	e0ffff17 	ldw	r3,-4(fp)
   85400:	1805883a 	mov	r2,r3
   85404:	1085883a 	add	r2,r2,r2
   85408:	10c5883a 	add	r2,r2,r3
   8540c:	100490ba 	slli	r2,r2,2
   85410:	00c00234 	movhi	r3,8
   85414:	10c7883a 	add	r3,r2,r3
   85418:	18981b17 	ldw	r2,24684(r3)
   8541c:	1000111e 	bne	r2,zero,85464 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   85420:	e0ffff17 	ldw	r3,-4(fp)
   85424:	1805883a 	mov	r2,r3
   85428:	1085883a 	add	r2,r2,r2
   8542c:	10c5883a 	add	r2,r2,r3
   85430:	100490ba 	slli	r2,r2,2
   85434:	e13ffd17 	ldw	r4,-12(fp)
   85438:	00c00234 	movhi	r3,8
   8543c:	10c7883a 	add	r3,r2,r3
   85440:	19181b15 	stw	r4,24684(r3)
      if (i > alt_max_fd)
   85444:	d0e00817 	ldw	r3,-32736(gp)
   85448:	e0bfff17 	ldw	r2,-4(fp)
   8544c:	1880020e 	bge	r3,r2,85458 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   85450:	e0bfff17 	ldw	r2,-4(fp)
   85454:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   85458:	e0bfff17 	ldw	r2,-4(fp)
   8545c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   85460:	00000706 	br	85480 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   85464:	e0bfff17 	ldw	r2,-4(fp)
   85468:	10800044 	addi	r2,r2,1
   8546c:	e0bfff15 	stw	r2,-4(fp)
   85470:	e0bfff17 	ldw	r2,-4(fp)
   85474:	10800810 	cmplti	r2,r2,32
   85478:	103fe01e 	bne	r2,zero,853fc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   8547c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   85480:	e0bffe17 	ldw	r2,-8(fp)
}
   85484:	e037883a 	mov	sp,fp
   85488:	df000017 	ldw	fp,0(sp)
   8548c:	dec00104 	addi	sp,sp,4
   85490:	f800283a 	ret

00085494 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   85494:	defffe04 	addi	sp,sp,-8
   85498:	df000115 	stw	fp,4(sp)
   8549c:	df000104 	addi	fp,sp,4
   854a0:	e13fff15 	stw	r4,-4(fp)
   854a4:	e0bfff17 	ldw	r2,-4(fp)
   854a8:	10bffe84 	addi	r2,r2,-6
   854ac:	10c00428 	cmpgeui	r3,r2,16
   854b0:	1800191e 	bne	r3,zero,85518 <alt_exception_cause_generated_bad_addr+0x84>
   854b4:	100690ba 	slli	r3,r2,2
   854b8:	00800234 	movhi	r2,8
   854bc:	1885883a 	add	r2,r3,r2
   854c0:	10953217 	ldw	r2,21704(r2)
   854c4:	1000683a 	jmp	r2
   854c8:	00085508 	cmpgei	zero,zero,8532
   854cc:	00085508 	cmpgei	zero,zero,8532
   854d0:	00085518 	cmpnei	zero,zero,8532
   854d4:	00085518 	cmpnei	zero,zero,8532
   854d8:	00085518 	cmpnei	zero,zero,8532
   854dc:	00085508 	cmpgei	zero,zero,8532
   854e0:	00085510 	cmplti	zero,zero,8532
   854e4:	00085518 	cmpnei	zero,zero,8532
   854e8:	00085508 	cmpgei	zero,zero,8532
   854ec:	00085508 	cmpgei	zero,zero,8532
   854f0:	00085518 	cmpnei	zero,zero,8532
   854f4:	00085508 	cmpgei	zero,zero,8532
   854f8:	00085510 	cmplti	zero,zero,8532
   854fc:	00085518 	cmpnei	zero,zero,8532
   85500:	00085518 	cmpnei	zero,zero,8532
   85504:	00085508 	cmpgei	zero,zero,8532
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   85508:	00800044 	movi	r2,1
   8550c:	00000306 	br	8551c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   85510:	0005883a 	mov	r2,zero
   85514:	00000106 	br	8551c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   85518:	0005883a 	mov	r2,zero
  }
}
   8551c:	e037883a 	mov	sp,fp
   85520:	df000017 	ldw	fp,0(sp)
   85524:	dec00104 	addi	sp,sp,4
   85528:	f800283a 	ret

0008552c <atexit>:
   8552c:	200b883a 	mov	r5,r4
   85530:	000f883a 	mov	r7,zero
   85534:	000d883a 	mov	r6,zero
   85538:	0009883a 	mov	r4,zero
   8553c:	00855ec1 	jmpi	855ec <__register_exitproc>

00085540 <exit>:
   85540:	defffe04 	addi	sp,sp,-8
   85544:	000b883a 	mov	r5,zero
   85548:	dc000015 	stw	r16,0(sp)
   8554c:	dfc00115 	stw	ra,4(sp)
   85550:	2021883a 	mov	r16,r4
   85554:	008567c0 	call	8567c <__call_exitprocs>
   85558:	00800234 	movhi	r2,8
   8555c:	111c9317 	ldw	r4,29260(r2)
   85560:	20800f17 	ldw	r2,60(r4)
   85564:	10000126 	beq	r2,zero,8556c <exit+0x2c>
   85568:	103ee83a 	callr	r2
   8556c:	8009883a 	mov	r4,r16
   85570:	008579c0 	call	8579c <_exit>

00085574 <memcmp>:
   85574:	30800130 	cmpltui	r2,r6,4
   85578:	10000b1e 	bne	r2,zero,855a8 <memcmp+0x34>
   8557c:	2144b03a 	or	r2,r4,r5
   85580:	108000cc 	andi	r2,r2,3
   85584:	1000171e 	bne	r2,zero,855e4 <memcmp+0x70>
   85588:	20c00017 	ldw	r3,0(r4)
   8558c:	28800017 	ldw	r2,0(r5)
   85590:	1880141e 	bne	r3,r2,855e4 <memcmp+0x70>
   85594:	31bfff04 	addi	r6,r6,-4
   85598:	30800128 	cmpgeui	r2,r6,4
   8559c:	21000104 	addi	r4,r4,4
   855a0:	29400104 	addi	r5,r5,4
   855a4:	103ff81e 	bne	r2,zero,85588 <memcmp+0x14>
   855a8:	30bfffc4 	addi	r2,r6,-1
   855ac:	30000b26 	beq	r6,zero,855dc <memcmp+0x68>
   855b0:	11800044 	addi	r6,r2,1
   855b4:	218d883a 	add	r6,r4,r6
   855b8:	00000106 	br	855c0 <memcmp+0x4c>
   855bc:	21800726 	beq	r4,r6,855dc <memcmp+0x68>
   855c0:	20800003 	ldbu	r2,0(r4)
   855c4:	28c00003 	ldbu	r3,0(r5)
   855c8:	21000044 	addi	r4,r4,1
   855cc:	29400044 	addi	r5,r5,1
   855d0:	10fffa26 	beq	r2,r3,855bc <memcmp+0x48>
   855d4:	10c5c83a 	sub	r2,r2,r3
   855d8:	f800283a 	ret
   855dc:	0005883a 	mov	r2,zero
   855e0:	f800283a 	ret
   855e4:	30bfffc4 	addi	r2,r6,-1
   855e8:	003ff106 	br	855b0 <memcmp+0x3c>

000855ec <__register_exitproc>:
   855ec:	00800234 	movhi	r2,8
   855f0:	10dc9317 	ldw	r3,29260(r2)
   855f4:	18805217 	ldw	r2,328(r3)
   855f8:	10001726 	beq	r2,zero,85658 <__register_exitproc+0x6c>
   855fc:	10c00117 	ldw	r3,4(r2)
   85600:	1a000808 	cmpgei	r8,r3,32
   85604:	40001b1e 	bne	r8,zero,85674 <__register_exitproc+0x88>
   85608:	20000b26 	beq	r4,zero,85638 <__register_exitproc+0x4c>
   8560c:	181090ba 	slli	r8,r3,2
   85610:	02400044 	movi	r9,1
   85614:	48d2983a 	sll	r9,r9,r3
   85618:	1211883a 	add	r8,r2,r8
   8561c:	41802215 	stw	r6,136(r8)
   85620:	11806217 	ldw	r6,392(r2)
   85624:	21000098 	cmpnei	r4,r4,2
   85628:	324cb03a 	or	r6,r6,r9
   8562c:	11806215 	stw	r6,392(r2)
   85630:	41c04215 	stw	r7,264(r8)
   85634:	20000b26 	beq	r4,zero,85664 <__register_exitproc+0x78>
   85638:	19000084 	addi	r4,r3,2
   8563c:	200890ba 	slli	r4,r4,2
   85640:	18c00044 	addi	r3,r3,1
   85644:	10c00115 	stw	r3,4(r2)
   85648:	1105883a 	add	r2,r2,r4
   8564c:	11400015 	stw	r5,0(r2)
   85650:	0005883a 	mov	r2,zero
   85654:	f800283a 	ret
   85658:	18805304 	addi	r2,r3,332
   8565c:	18805215 	stw	r2,328(r3)
   85660:	003fe606 	br	855fc <__register_exitproc+0x10>
   85664:	11006317 	ldw	r4,396(r2)
   85668:	2252b03a 	or	r9,r4,r9
   8566c:	12406315 	stw	r9,396(r2)
   85670:	003ff106 	br	85638 <__register_exitproc+0x4c>
   85674:	00bfffc4 	movi	r2,-1
   85678:	f800283a 	ret

0008567c <__call_exitprocs>:
   8567c:	defff704 	addi	sp,sp,-36
   85680:	00800234 	movhi	r2,8
   85684:	dcc00315 	stw	r19,12(sp)
   85688:	14dc9317 	ldw	r19,29260(r2)
   8568c:	dc800215 	stw	r18,8(sp)
   85690:	dfc00815 	stw	ra,32(sp)
   85694:	9c805217 	ldw	r18,328(r19)
   85698:	ddc00715 	stw	r23,28(sp)
   8569c:	dd800615 	stw	r22,24(sp)
   856a0:	dd400515 	stw	r21,20(sp)
   856a4:	dd000415 	stw	r20,16(sp)
   856a8:	dc400115 	stw	r17,4(sp)
   856ac:	dc000015 	stw	r16,0(sp)
   856b0:	90001026 	beq	r18,zero,856f4 <__call_exitprocs+0x78>
   856b4:	202b883a 	mov	r21,r4
   856b8:	282d883a 	mov	r22,r5
   856bc:	05000044 	movi	r20,1
   856c0:	94000117 	ldw	r16,4(r18)
   856c4:	847fffc4 	addi	r17,r16,-1
   856c8:	88000a16 	blt	r17,zero,856f4 <__call_exitprocs+0x78>
   856cc:	84000044 	addi	r16,r16,1
   856d0:	802090ba 	slli	r16,r16,2
   856d4:	9421883a 	add	r16,r18,r16
   856d8:	b0001126 	beq	r22,zero,85720 <__call_exitprocs+0xa4>
   856dc:	80804017 	ldw	r2,256(r16)
   856e0:	15800f26 	beq	r2,r22,85720 <__call_exitprocs+0xa4>
   856e4:	8c7fffc4 	addi	r17,r17,-1
   856e8:	88bfffd8 	cmpnei	r2,r17,-1
   856ec:	843fff04 	addi	r16,r16,-4
   856f0:	103ff91e 	bne	r2,zero,856d8 <__call_exitprocs+0x5c>
   856f4:	dfc00817 	ldw	ra,32(sp)
   856f8:	ddc00717 	ldw	r23,28(sp)
   856fc:	dd800617 	ldw	r22,24(sp)
   85700:	dd400517 	ldw	r21,20(sp)
   85704:	dd000417 	ldw	r20,16(sp)
   85708:	dcc00317 	ldw	r19,12(sp)
   8570c:	dc800217 	ldw	r18,8(sp)
   85710:	dc400117 	ldw	r17,4(sp)
   85714:	dc000017 	ldw	r16,0(sp)
   85718:	dec00904 	addi	sp,sp,36
   8571c:	f800283a 	ret
   85720:	90800117 	ldw	r2,4(r18)
   85724:	81800017 	ldw	r6,0(r16)
   85728:	10bfffc4 	addi	r2,r2,-1
   8572c:	14401726 	beq	r2,r17,8578c <__call_exitprocs+0x110>
   85730:	80000015 	stw	zero,0(r16)
   85734:	303feb26 	beq	r6,zero,856e4 <__call_exitprocs+0x68>
   85738:	a446983a 	sll	r3,r20,r17
   8573c:	90806217 	ldw	r2,392(r18)
   85740:	95c00117 	ldw	r23,4(r18)
   85744:	1884703a 	and	r2,r3,r2
   85748:	1000081e 	bne	r2,zero,8576c <__call_exitprocs+0xf0>
   8574c:	303ee83a 	callr	r6
   85750:	90c00117 	ldw	r3,4(r18)
   85754:	98805217 	ldw	r2,328(r19)
   85758:	1dc0011e 	bne	r3,r23,85760 <__call_exitprocs+0xe4>
   8575c:	90bfe126 	beq	r18,r2,856e4 <__call_exitprocs+0x68>
   85760:	103fe426 	beq	r2,zero,856f4 <__call_exitprocs+0x78>
   85764:	1025883a 	mov	r18,r2
   85768:	003fd506 	br	856c0 <__call_exitprocs+0x44>
   8576c:	90806317 	ldw	r2,396(r18)
   85770:	81002017 	ldw	r4,128(r16)
   85774:	1886703a 	and	r3,r3,r2
   85778:	1800061e 	bne	r3,zero,85794 <__call_exitprocs+0x118>
   8577c:	200b883a 	mov	r5,r4
   85780:	a809883a 	mov	r4,r21
   85784:	303ee83a 	callr	r6
   85788:	003ff106 	br	85750 <__call_exitprocs+0xd4>
   8578c:	94400115 	stw	r17,4(r18)
   85790:	003fe806 	br	85734 <__call_exitprocs+0xb8>
   85794:	303ee83a 	callr	r6
   85798:	003fed06 	br	85750 <__call_exitprocs+0xd4>

0008579c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8579c:	defffd04 	addi	sp,sp,-12
   857a0:	df000215 	stw	fp,8(sp)
   857a4:	df000204 	addi	fp,sp,8
   857a8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   857ac:	0001883a 	nop
   857b0:	e0bffe17 	ldw	r2,-8(fp)
   857b4:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   857b8:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   857bc:	10000226 	beq	r2,zero,857c8 <_exit+0x2c>
    ALT_SIM_FAIL();
   857c0:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   857c4:	00000106 	br	857cc <_exit+0x30>
    ALT_SIM_PASS();
   857c8:	002af0b0 	cmpltui	zero,zero,43970
}
   857cc:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   857d0:	003fff06 	br	857d0 <_exit+0x34>
